
CAN_COM_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008344  08008344  00018344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800837c  0800837c  0001837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008388  08008388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800838c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800839c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080083fc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  240000d0  0800845c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400089c  0800845c  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021588  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ac  00000000  00000000  00041686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00044838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  00045f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e6b  00000000  00000000  000475b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4c2  00000000  00000000  0004b41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016f695  00000000  00000000  000698dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d8f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006560  00000000  00000000  001d8fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800832c 	.word	0x0800832c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800832c 	.word	0x0800832c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fed8 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f810 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa20 	bl	8000a2c <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f88c 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f99e 	bl	8000930 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 f9e8 	bl	80009c8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005f8:	f000 f8d2 	bl	80007a0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005fc:	f000 f926 	bl	800084c <MX_TIM2_Init>
  MX_TIM13_Init();
 8000600:	f000 f972 	bl	80008e8 <MX_TIM13_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x28>
	...

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09c      	sub	sp, #112	; 0x70
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	224c      	movs	r2, #76	; 0x4c
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 fe80 	bl	800831c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2220      	movs	r2, #32
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f007 fe7a 	bl	800831c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000628:	2002      	movs	r0, #2
 800062a:	f002 fd4d 	bl	80030c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <SystemClock_Config+0xf8>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	4a32      	ldr	r2, [pc, #200]	; (8000700 <SystemClock_Config+0xf8>)
 8000638:	f023 0301 	bic.w	r3, r3, #1
 800063c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800063e:	4b30      	ldr	r3, [pc, #192]	; (8000700 <SystemClock_Config+0xf8>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <SystemClock_Config+0xfc>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a2c      	ldr	r2, [pc, #176]	; (8000704 <SystemClock_Config+0xfc>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <SystemClock_Config+0xfc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000664:	bf00      	nop
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SystemClock_Config+0xfc>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800066e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000672:	d1f8      	bne.n	8000666 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000674:	2303      	movs	r3, #3
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800067e:	2301      	movs	r3, #1
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2340      	movs	r3, #64	; 0x40
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	2302      	movs	r3, #2
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000692:	2318      	movs	r3, #24
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006a2:	230c      	movs	r3, #12
 80006a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fd52 	bl	800315c <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006be:	f000 fac0 	bl	8000c42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	233f      	movs	r3, #63	; 0x3f
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2101      	movs	r1, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f966 	bl	80039b8 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006f2:	f000 faa6 	bl	8000c42 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3770      	adds	r7, #112	; 0x70
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	58000400 	.word	0x58000400
 8000704:	58024800 	.word	0x58024800

08000708 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ETH_Init+0x80>)
 800070e:	4a1f      	ldr	r2, [pc, #124]	; (800078c <MX_ETH_Init+0x84>)
 8000710:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_ETH_Init+0x88>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ETH_Init+0x88>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_ETH_Init+0x88>)
 8000720:	22e1      	movs	r2, #225	; 0xe1
 8000722:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ETH_Init+0x88>)
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_ETH_Init+0x88>)
 800072c:	2200      	movs	r2, #0
 800072e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_ETH_Init+0x88>)
 8000732:	2200      	movs	r2, #0
 8000734:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_ETH_Init+0x80>)
 8000738:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_ETH_Init+0x88>)
 800073a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_ETH_Init+0x80>)
 800073e:	2201      	movs	r2, #1
 8000740:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ETH_Init+0x80>)
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_ETH_Init+0x8c>)
 8000746:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ETH_Init+0x80>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_ETH_Init+0x90>)
 800074c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ETH_Init+0x80>)
 8000750:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000754:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_ETH_Init+0x80>)
 8000758:	f001 fd66 	bl	8002228 <HAL_ETH_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000762:	f000 fa6e 	bl	8000c42 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000766:	2238      	movs	r2, #56	; 0x38
 8000768:	2100      	movs	r1, #0
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_ETH_Init+0x94>)
 800076c:	f007 fdd6 	bl	800831c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_ETH_Init+0x94>)
 8000772:	2221      	movs	r2, #33	; 0x21
 8000774:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_ETH_Init+0x94>)
 8000778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800077c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_ETH_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	24000124 	.word	0x24000124
 800078c:	40028000 	.word	0x40028000
 8000790:	24000890 	.word	0x24000890
 8000794:	24000070 	.word	0x24000070
 8000798:	24000010 	.word	0x24000010
 800079c:	240000ec 	.word	0x240000ec

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007a6:	4a28      	ldr	r2, [pc, #160]	; (8000848 <MX_SPI1_Init+0xa8>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007ba:	2207      	movs	r2, #7
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI1_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI1_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI1_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_SPI1_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI1_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_SPI1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI1_Init+0xa4>)
 800082a:	2200      	movs	r2, #0
 800082c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_SPI1_Init+0xa4>)
 8000830:	f004 ffb6 	bl	80057a0 <HAL_SPI_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800083a:	f000 fa02 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	240001d4 	.word	0x240001d4
 8000848:	40013000 	.word	0x40013000

0800084c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_TIM2_Init+0x98>)
 800086c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000870:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_TIM2_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1920;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000882:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_TIM2_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000896:	f005 f8a4 	bl	80059e2 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f9cf 	bl	8000c42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_TIM2_Init+0x98>)
 80008b2:	f005 fa0d 	bl	8005cd0 <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008bc:	f000 f9c1 	bl	8000c42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_TIM2_Init+0x98>)
 80008ce:	f005 fc57 	bl	8006180 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008d8:	f000 f9b3 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2400025c 	.word	0x2400025c

080008e8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_TIM13_Init+0x40>)
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <MX_TIM13_Init+0x44>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <MX_TIM13_Init+0x40>)
 80008f4:	223f      	movs	r2, #63	; 0x3f
 80008f6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_TIM13_Init+0x40>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_TIM13_Init+0x40>)
 8000900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000904:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_TIM13_Init+0x40>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_TIM13_Init+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_TIM13_Init+0x40>)
 8000914:	f005 f865 	bl	80059e2 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800091e:	f000 f990 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	240002a8 	.word	0x240002a8
 800092c:	40001c00 	.word	0x40001c00

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_USART3_UART_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800097a:	f005 fcad 	bl	80062d8 <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f95d 	bl	8000c42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800098c:	f007 f8ce 	bl	8007b2c <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f954 	bl	8000c42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800099e:	f007 f903 	bl	8007ba8 <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f94b 	bl	8000c42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 80009ae:	f007 f884 	bl	8007aba <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f943 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	240002f4 	.word	0x240002f4
 80009c4:	40004800 	.word	0x40004800

080009c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d4:	2209      	movs	r2, #9
 80009d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009da:	2202      	movs	r2, #2
 80009dc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a10:	f002 fa11 	bl	8002e36 <HAL_PCD_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a1a:	f000 f912 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000384 	.word	0x24000384
 8000a28:	40080000 	.word	0x40080000

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b6f      	ldr	r3, [pc, #444]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	4a6d      	ldr	r2, [pc, #436]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a52:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a60:	4b67      	ldr	r3, [pc, #412]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	4a66      	ldr	r2, [pc, #408]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a70:	4b63      	ldr	r3, [pc, #396]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b60      	ldr	r3, [pc, #384]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a5e      	ldr	r2, [pc, #376]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b5c      	ldr	r3, [pc, #368]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b54      	ldr	r3, [pc, #336]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a4f      	ldr	r2, [pc, #316]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad8:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a48      	ldr	r2, [pc, #288]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <MX_GPIO_Init+0x1d4>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	483a      	ldr	r0, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x1d8>)
 8000b1a:	f002 f959 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b24:	4838      	ldr	r0, [pc, #224]	; (8000c08 <MX_GPIO_Init+0x1dc>)
 8000b26:	f002 f953 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b30:	4836      	ldr	r0, [pc, #216]	; (8000c0c <MX_GPIO_Init+0x1e0>)
 8000b32:	f002 f94d 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4835      	ldr	r0, [pc, #212]	; (8000c10 <MX_GPIO_Init+0x1e4>)
 8000b3c:	f002 f948 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	482f      	ldr	r0, [pc, #188]	; (8000c14 <MX_GPIO_Init+0x1e8>)
 8000b56:	f001 ff8b 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <MX_GPIO_Init+0x1d8>)
 8000b72:	f001 ff7d 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b76:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481e      	ldr	r0, [pc, #120]	; (8000c08 <MX_GPIO_Init+0x1dc>)
 8000b90:	f001 ff6e 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4817      	ldr	r0, [pc, #92]	; (8000c0c <MX_GPIO_Init+0x1e0>)
 8000bae:	f001 ff5f 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_GPIO_Init+0x1e8>)
 8000bc8:	f001 ff52 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MX_GPIO_Init+0x1e4>)
 8000be4:	f001 ff44 	bl	8002a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2017      	movs	r0, #23
 8000bee:	f000 fd82 	bl	80016f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f000 fd99 	bl	800172a <HAL_NVIC_EnableIRQ>

}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58024400 	.word	0x58024400
 8000c04:	58020000 	.word	0x58020000
 8000c08:	58020400 	.word	0x58020400
 8000c0c:	58020c00 	.word	0x58020c00
 8000c10:	58021000 	.word	0x58021000
 8000c14:	58020800 	.word	0x58020800

08000c18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]

}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]

}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c46:	b672      	cpsid	i
}
 8000c48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <Error_Handler+0x8>

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c58:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2005      	movs	r0, #5
 8000c76:	f000 fd3e 	bl	80016f6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	f000 fd55 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2005      	movs	r0, #5
 8000c86:	f000 fd36 	bl	80016f6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f000 fd4d 	bl	800172a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58024400 	.word	0x58024400

08000c9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <HAL_ETH_MspInit+0x184>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f040 80ab 	bne.w	8000e16 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cc0:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc6:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ccc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cd0:	4b54      	ldr	r3, [pc, #336]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cda:	623b      	str	r3, [r7, #32]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cde:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cee:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cfc:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d02:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d0c:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a40      	ldr	r2, [pc, #256]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a39      	ldr	r2, [pc, #228]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	4a31      	ldr	r2, [pc, #196]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d92:	2332      	movs	r3, #50	; 0x32
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da2:	230b      	movs	r3, #11
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	481e      	ldr	r0, [pc, #120]	; (8000e28 <HAL_ETH_MspInit+0x18c>)
 8000dae:	f001 fe5f 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000db2:	2386      	movs	r3, #134	; 0x86
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <HAL_ETH_MspInit+0x190>)
 8000dce:	f001 fe4f 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de4:	230b      	movs	r3, #11
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4810      	ldr	r0, [pc, #64]	; (8000e30 <HAL_ETH_MspInit+0x194>)
 8000df0:	f001 fe3e 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000df4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e06:	230b      	movs	r3, #11
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <HAL_ETH_MspInit+0x198>)
 8000e12:	f001 fe2d 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40028000 	.word	0x40028000
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020000 	.word	0x58020000
 8000e30:	58020400 	.word	0x58020400
 8000e34:	58021800 	.word	0x58021800

08000e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ba      	sub	sp, #232	; 0xe8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	22bc      	movs	r2, #188	; 0xbc
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 fa5f 	bl	800831c <memset>
  if(hspi->Instance==SPI1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <HAL_SPI_MspInit+0x104>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d165      	bne.n	8000f34 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 f92a 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000e82:	f7ff fede 	bl	8000c42 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e8c:	4a2c      	ldr	r2, [pc, #176]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000e8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a25      	ldr	r2, [pc, #148]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_SPI_MspInit+0x108>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f02:	4619      	mov	r1, r3
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <HAL_SPI_MspInit+0x10c>)
 8000f06:	f001 fdb3 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f22:	2305      	movs	r3, #5
 8000f24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <HAL_SPI_MspInit+0x110>)
 8000f30:	f001 fd9e 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	37e8      	adds	r7, #232	; 0xe8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40013000 	.word	0x40013000
 8000f40:	58024400 	.word	0x58024400
 8000f44:	58020000 	.word	0x58020000
 8000f48:	58020c00 	.word	0x58020c00

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5c:	d117      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_TIM_Base_MspInit+0x74>)
 8000f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f64:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <HAL_TIM_Base_MspInit+0x74>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_TIM_Base_MspInit+0x74>)
 8000f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	201c      	movs	r0, #28
 8000f82:	f000 fbb8 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f86:	201c      	movs	r0, #28
 8000f88:	f000 fbcf 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000f8c:	e013      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM13)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_TIM_Base_MspInit+0x78>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d10e      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_TIM_Base_MspInit+0x74>)
 8000f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_TIM_Base_MspInit+0x74>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_TIM_Base_MspInit+0x74>)
 8000faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	40001c00 	.word	0x40001c00

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0b8      	sub	sp, #224	; 0xe0
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	22bc      	movs	r2, #188	; 0xbc
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f007 f997 	bl	800831c <memset>
  if(huart->Instance==USART3)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a29      	ldr	r2, [pc, #164]	; (8001098 <HAL_UART_MspInit+0xd0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d14a      	bne.n	800108e <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f862 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001012:	f7ff fe16 	bl	8000c42 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_UART_MspInit+0xd4>)
 800101e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001022:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800102c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_UART_MspInit+0xd4>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800106c:	2307      	movs	r3, #7
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <HAL_UART_MspInit+0xd8>)
 800107a:	f001 fcf9 	bl	8002a70 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2027      	movs	r0, #39	; 0x27
 8001084:	f000 fb37 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001088:	2027      	movs	r0, #39	; 0x27
 800108a:	f000 fb4e 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	37e0      	adds	r7, #224	; 0xe0
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40004800 	.word	0x40004800
 800109c:	58024400 	.word	0x58024400
 80010a0:	58020c00 	.word	0x58020c00

080010a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b8      	sub	sp, #224	; 0xe0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	22bc      	movs	r2, #188	; 0xbc
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f007 f929 	bl	800831c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <HAL_PCD_MspInit+0xe8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d156      	bne.n	8001182 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fff2 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80010f2:	f7ff fda6 	bl	8000c42 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010f6:	f002 f821 	bl	800313c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_PCD_MspInit+0xec>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_PCD_MspInit+0xec>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_PCD_MspInit+0xec>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001118:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800111c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001132:	230a      	movs	r3, #10
 8001134:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800113c:	4619      	mov	r1, r3
 800113e:	4815      	ldr	r0, [pc, #84]	; (8001194 <HAL_PCD_MspInit+0xf0>)
 8001140:	f001 fc96 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <HAL_PCD_MspInit+0xf0>)
 8001160:	f001 fc86 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_PCD_MspInit+0xec>)
 8001166:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_PCD_MspInit+0xec>)
 800116c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001170:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_PCD_MspInit+0xec>)
 8001176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800117a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	37e0      	adds	r7, #224	; 0xe0
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40080000 	.word	0x40080000
 8001190:	58024400 	.word	0x58024400
 8001194:	58020000 	.word	0x58020000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f948 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	f001 fdff 	bl	8002e02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM2_IRQHandler+0x10>)
 800120e:	f004 fc3f 	bl	8005a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2400025c 	.word	0x2400025c

0800121c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <USART3_IRQHandler+0x10>)
 8001222:	f005 f8a9 	bl	8006378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240002f4 	.word	0x240002f4

08001230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <SystemInit+0xe4>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a36      	ldr	r2, [pc, #216]	; (8001314 <SystemInit+0xe4>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001244:	4b34      	ldr	r3, [pc, #208]	; (8001318 <SystemInit+0xe8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	2b06      	cmp	r3, #6
 800124e:	d807      	bhi.n	8001260 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <SystemInit+0xe8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 030f 	bic.w	r3, r3, #15
 8001258:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <SystemInit+0xe8>)
 800125a:	f043 0307 	orr.w	r3, r3, #7
 800125e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <SystemInit+0xec>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a2d      	ldr	r2, [pc, #180]	; (800131c <SystemInit+0xec>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <SystemInit+0xec>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <SystemInit+0xec>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4929      	ldr	r1, [pc, #164]	; (800131c <SystemInit+0xec>)
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <SystemInit+0xf0>)
 800127a:	4013      	ands	r3, r2
 800127c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <SystemInit+0xe8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <SystemInit+0xe8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 030f 	bic.w	r3, r3, #15
 8001292:	4a21      	ldr	r2, [pc, #132]	; (8001318 <SystemInit+0xe8>)
 8001294:	f043 0307 	orr.w	r3, r3, #7
 8001298:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <SystemInit+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <SystemInit+0xec>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <SystemInit+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <SystemInit+0xec>)
 80012ae:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <SystemInit+0xf4>)
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <SystemInit+0xec>)
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <SystemInit+0xf8>)
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <SystemInit+0xec>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <SystemInit+0xfc>)
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <SystemInit+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <SystemInit+0xec>)
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <SystemInit+0xfc>)
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <SystemInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <SystemInit+0xec>)
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <SystemInit+0xfc>)
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <SystemInit+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <SystemInit+0xec>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <SystemInit+0xec>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <SystemInit+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <SystemInit+0x100>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <SystemInit+0x104>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012fa:	d202      	bcs.n	8001302 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <SystemInit+0x108>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <SystemInit+0x10c>)
 8001304:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001308:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	52002000 	.word	0x52002000
 800131c:	58024400 	.word	0x58024400
 8001320:	eaf6ed7f 	.word	0xeaf6ed7f
 8001324:	02020200 	.word	0x02020200
 8001328:	01ff0000 	.word	0x01ff0000
 800132c:	01010280 	.word	0x01010280
 8001330:	5c001000 	.word	0x5c001000
 8001334:	ffff0000 	.word	0xffff0000
 8001338:	51008108 	.word	0x51008108
 800133c:	52004000 	.word	0x52004000

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001344:	f7ff ff74 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	; (8001380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	; (800138c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f006 ffb1 	bl	80082d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff f933 	bl	80005dc <main>
  bx  lr
 8001376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800137c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001380:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001384:	0800838c 	.word	0x0800838c
  ldr r2, =_sbss
 8001388:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800138c:	2400089c 	.word	0x2400089c

08001390 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC3_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139a:	2003      	movs	r0, #3
 800139c:	f000 f9a0 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a0:	f002 fcc0 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_Init+0x68>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	4913      	ldr	r1, [pc, #76]	; (8001400 <HAL_Init+0x6c>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_Init+0x68>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_Init+0x6c>)
 80013c8:	5cd3      	ldrb	r3, [r2, r3]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_Init+0x70>)
 80013d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013d8:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_Init+0x74>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f814 	bl	800140c <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e002      	b.n	80013f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ee:	f7ff fc2d 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	58024400 	.word	0x58024400
 8001400:	08008344 	.word	0x08008344
 8001404:	24000004 	.word	0x24000004
 8001408:	24000000 	.word	0x24000000

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_InitTick+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e021      	b.n	8001464 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_InitTick+0x64>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_InitTick+0x60>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f985 	bl	8001746 <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 f94f 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x68>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2400000c 	.word	0x2400000c
 8001470:	24000000 	.word	0x24000000
 8001474:	24000008 	.word	0x24000008

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2400000c 	.word	0x2400000c
 800149c:	24000898 	.word	0x24000898

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	24000898 	.word	0x24000898

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2400000c 	.word	0x2400000c

08001500 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetREVID+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0c1b      	lsrs	r3, r3, #16
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	5c001000 	.word	0x5c001000

08001518 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001528:	4904      	ldr	r1, [pc, #16]	; (800153c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58000400 	.word	0x58000400

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <__NVIC_SetPriorityGrouping+0x40>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	4313      	orrs	r3, r2
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x40>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00
 8001584:	05fa0000 	.word	0x05fa0000

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff29 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff40 	bl	8001588 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff90 	bl	8001634 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5f 	bl	80015e0 <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff33 	bl	80015a4 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa4 	bl	800169c <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff fe9a 	bl	80014a0 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e2dc      	b.n	8001d32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d008      	beq.n	8001796 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e2cd      	b.n	8001d32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a76      	ldr	r2, [pc, #472]	; (8001974 <HAL_DMA_Abort+0x214>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04a      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a74      	ldr	r2, [pc, #464]	; (8001978 <HAL_DMA_Abort+0x218>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d045      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a73      	ldr	r2, [pc, #460]	; (800197c <HAL_DMA_Abort+0x21c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d040      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a71      	ldr	r2, [pc, #452]	; (8001980 <HAL_DMA_Abort+0x220>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d03b      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a70      	ldr	r2, [pc, #448]	; (8001984 <HAL_DMA_Abort+0x224>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d036      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a6e      	ldr	r2, [pc, #440]	; (8001988 <HAL_DMA_Abort+0x228>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d031      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6d      	ldr	r2, [pc, #436]	; (800198c <HAL_DMA_Abort+0x22c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d02c      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6b      	ldr	r2, [pc, #428]	; (8001990 <HAL_DMA_Abort+0x230>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d027      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6a      	ldr	r2, [pc, #424]	; (8001994 <HAL_DMA_Abort+0x234>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d022      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a68      	ldr	r2, [pc, #416]	; (8001998 <HAL_DMA_Abort+0x238>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01d      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a67      	ldr	r2, [pc, #412]	; (800199c <HAL_DMA_Abort+0x23c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d018      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <HAL_DMA_Abort+0x240>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a64      	ldr	r2, [pc, #400]	; (80019a4 <HAL_DMA_Abort+0x244>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00e      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a62      	ldr	r2, [pc, #392]	; (80019a8 <HAL_DMA_Abort+0x248>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d009      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a61      	ldr	r2, [pc, #388]	; (80019ac <HAL_DMA_Abort+0x24c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d004      	beq.n	8001836 <HAL_DMA_Abort+0xd6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a5f      	ldr	r2, [pc, #380]	; (80019b0 <HAL_DMA_Abort+0x250>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_DMA_Abort+0xda>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_DMA_Abort+0xdc>
 800183a:	2300      	movs	r3, #0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 021e 	bic.w	r2, r2, #30
 800184e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800185e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e00a      	b.n	800187e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 020e 	bic.w	r2, r2, #14
 8001876:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a3c      	ldr	r2, [pc, #240]	; (8001974 <HAL_DMA_Abort+0x214>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d072      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <HAL_DMA_Abort+0x218>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d06d      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a39      	ldr	r2, [pc, #228]	; (800197c <HAL_DMA_Abort+0x21c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d068      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a37      	ldr	r2, [pc, #220]	; (8001980 <HAL_DMA_Abort+0x220>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d063      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a36      	ldr	r2, [pc, #216]	; (8001984 <HAL_DMA_Abort+0x224>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a34      	ldr	r2, [pc, #208]	; (8001988 <HAL_DMA_Abort+0x228>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d059      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a33      	ldr	r2, [pc, #204]	; (800198c <HAL_DMA_Abort+0x22c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d054      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a31      	ldr	r2, [pc, #196]	; (8001990 <HAL_DMA_Abort+0x230>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d04f      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a30      	ldr	r2, [pc, #192]	; (8001994 <HAL_DMA_Abort+0x234>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d04a      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2e      	ldr	r2, [pc, #184]	; (8001998 <HAL_DMA_Abort+0x238>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d045      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_DMA_Abort+0x23c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d040      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <HAL_DMA_Abort+0x240>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d03b      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <HAL_DMA_Abort+0x244>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d036      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_DMA_Abort+0x248>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d031      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_DMA_Abort+0x24c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d02c      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_DMA_Abort+0x250>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d027      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <HAL_DMA_Abort+0x254>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_DMA_Abort+0x258>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01d      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_DMA_Abort+0x25c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d018      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <HAL_DMA_Abort+0x260>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <HAL_DMA_Abort+0x264>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00e      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <HAL_DMA_Abort+0x268>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_DMA_Abort+0x26c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_DMA_Abort+0x20e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_DMA_Abort+0x270>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d132      	bne.n	80019d4 <HAL_DMA_Abort+0x274>
 800196e:	2301      	movs	r3, #1
 8001970:	e031      	b.n	80019d6 <HAL_DMA_Abort+0x276>
 8001972:	bf00      	nop
 8001974:	40020010 	.word	0x40020010
 8001978:	40020028 	.word	0x40020028
 800197c:	40020040 	.word	0x40020040
 8001980:	40020058 	.word	0x40020058
 8001984:	40020070 	.word	0x40020070
 8001988:	40020088 	.word	0x40020088
 800198c:	400200a0 	.word	0x400200a0
 8001990:	400200b8 	.word	0x400200b8
 8001994:	40020410 	.word	0x40020410
 8001998:	40020428 	.word	0x40020428
 800199c:	40020440 	.word	0x40020440
 80019a0:	40020458 	.word	0x40020458
 80019a4:	40020470 	.word	0x40020470
 80019a8:	40020488 	.word	0x40020488
 80019ac:	400204a0 	.word	0x400204a0
 80019b0:	400204b8 	.word	0x400204b8
 80019b4:	58025408 	.word	0x58025408
 80019b8:	5802541c 	.word	0x5802541c
 80019bc:	58025430 	.word	0x58025430
 80019c0:	58025444 	.word	0x58025444
 80019c4:	58025458 	.word	0x58025458
 80019c8:	5802546c 	.word	0x5802546c
 80019cc:	58025480 	.word	0x58025480
 80019d0:	58025494 	.word	0x58025494
 80019d4:	2300      	movs	r3, #0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6d      	ldr	r2, [pc, #436]	; (8001ba4 <HAL_DMA_Abort+0x444>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04a      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <HAL_DMA_Abort+0x448>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d045      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_DMA_Abort+0x44c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d040      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a68      	ldr	r2, [pc, #416]	; (8001bb0 <HAL_DMA_Abort+0x450>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d03b      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a67      	ldr	r2, [pc, #412]	; (8001bb4 <HAL_DMA_Abort+0x454>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d036      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_DMA_Abort+0x458>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d031      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a64      	ldr	r2, [pc, #400]	; (8001bbc <HAL_DMA_Abort+0x45c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d02c      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a62      	ldr	r2, [pc, #392]	; (8001bc0 <HAL_DMA_Abort+0x460>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d027      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a61      	ldr	r2, [pc, #388]	; (8001bc4 <HAL_DMA_Abort+0x464>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d022      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <HAL_DMA_Abort+0x468>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01d      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_DMA_Abort+0x46c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d018      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5c      	ldr	r2, [pc, #368]	; (8001bd0 <HAL_DMA_Abort+0x470>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a5b      	ldr	r2, [pc, #364]	; (8001bd4 <HAL_DMA_Abort+0x474>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <HAL_DMA_Abort+0x478>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <HAL_DMA_Abort+0x47c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_DMA_Abort+0x32a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a56      	ldr	r2, [pc, #344]	; (8001be0 <HAL_DMA_Abort+0x480>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d108      	bne.n	8001a9c <HAL_DMA_Abort+0x33c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e007      	b.n	8001aac <HAL_DMA_Abort+0x34c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001aac:	e013      	b.n	8001ad6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aae:	f7ff fcf7 	bl	80014a0 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d90c      	bls.n	8001ad6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e12d      	b.n	8001d32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e5      	bne.n	8001aae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <HAL_DMA_Abort+0x444>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d04a      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_DMA_Abort+0x448>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d045      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <HAL_DMA_Abort+0x44c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d040      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_DMA_Abort+0x450>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d03b      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <HAL_DMA_Abort+0x454>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d036      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_DMA_Abort+0x458>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <HAL_DMA_Abort+0x45c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d02c      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a24      	ldr	r2, [pc, #144]	; (8001bc0 <HAL_DMA_Abort+0x460>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d027      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <HAL_DMA_Abort+0x464>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d022      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_DMA_Abort+0x468>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01d      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <HAL_DMA_Abort+0x46c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d018      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_DMA_Abort+0x470>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_DMA_Abort+0x474>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00e      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_DMA_Abort+0x478>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d009      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_DMA_Abort+0x47c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d004      	beq.n	8001b82 <HAL_DMA_Abort+0x422>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_DMA_Abort+0x480>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_DMA_Abort+0x426>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_DMA_Abort+0x428>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d02b      	beq.n	8001be4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	223f      	movs	r2, #63	; 0x3f
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	e02a      	b.n	8001bfa <HAL_DMA_Abort+0x49a>
 8001ba4:	40020010 	.word	0x40020010
 8001ba8:	40020028 	.word	0x40020028
 8001bac:	40020040 	.word	0x40020040
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	40020070 	.word	0x40020070
 8001bb8:	40020088 	.word	0x40020088
 8001bbc:	400200a0 	.word	0x400200a0
 8001bc0:	400200b8 	.word	0x400200b8
 8001bc4:	40020410 	.word	0x40020410
 8001bc8:	40020428 	.word	0x40020428
 8001bcc:	40020440 	.word	0x40020440
 8001bd0:	40020458 	.word	0x40020458
 8001bd4:	40020470 	.word	0x40020470
 8001bd8:	40020488 	.word	0x40020488
 8001bdc:	400204a0 	.word	0x400204a0
 8001be0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_DMA_Abort+0x5dc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d072      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_DMA_Abort+0x5e0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d06d      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_DMA_Abort+0x5e4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d068      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a4a      	ldr	r2, [pc, #296]	; (8001d48 <HAL_DMA_Abort+0x5e8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d063      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <HAL_DMA_Abort+0x5ec>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d05e      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a47      	ldr	r2, [pc, #284]	; (8001d50 <HAL_DMA_Abort+0x5f0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d059      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a46      	ldr	r2, [pc, #280]	; (8001d54 <HAL_DMA_Abort+0x5f4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d054      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a44      	ldr	r2, [pc, #272]	; (8001d58 <HAL_DMA_Abort+0x5f8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d04f      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <HAL_DMA_Abort+0x5fc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d04a      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a41      	ldr	r2, [pc, #260]	; (8001d60 <HAL_DMA_Abort+0x600>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d045      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a40      	ldr	r2, [pc, #256]	; (8001d64 <HAL_DMA_Abort+0x604>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d040      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <HAL_DMA_Abort+0x608>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d03b      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_DMA_Abort+0x60c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d036      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a3b      	ldr	r2, [pc, #236]	; (8001d70 <HAL_DMA_Abort+0x610>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d031      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a3a      	ldr	r2, [pc, #232]	; (8001d74 <HAL_DMA_Abort+0x614>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d02c      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <HAL_DMA_Abort+0x618>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d027      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a37      	ldr	r2, [pc, #220]	; (8001d7c <HAL_DMA_Abort+0x61c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a35      	ldr	r2, [pc, #212]	; (8001d80 <HAL_DMA_Abort+0x620>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01d      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <HAL_DMA_Abort+0x624>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d018      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_DMA_Abort+0x628>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <HAL_DMA_Abort+0x62c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <HAL_DMA_Abort+0x630>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2e      	ldr	r2, [pc, #184]	; (8001d94 <HAL_DMA_Abort+0x634>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d004      	beq.n	8001cea <HAL_DMA_Abort+0x58a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <HAL_DMA_Abort+0x638>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_DMA_Abort+0x58e>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_DMA_Abort+0x590>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d015      	beq.n	8001d20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cfc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020010 	.word	0x40020010
 8001d40:	40020028 	.word	0x40020028
 8001d44:	40020040 	.word	0x40020040
 8001d48:	40020058 	.word	0x40020058
 8001d4c:	40020070 	.word	0x40020070
 8001d50:	40020088 	.word	0x40020088
 8001d54:	400200a0 	.word	0x400200a0
 8001d58:	400200b8 	.word	0x400200b8
 8001d5c:	40020410 	.word	0x40020410
 8001d60:	40020428 	.word	0x40020428
 8001d64:	40020440 	.word	0x40020440
 8001d68:	40020458 	.word	0x40020458
 8001d6c:	40020470 	.word	0x40020470
 8001d70:	40020488 	.word	0x40020488
 8001d74:	400204a0 	.word	0x400204a0
 8001d78:	400204b8 	.word	0x400204b8
 8001d7c:	58025408 	.word	0x58025408
 8001d80:	5802541c 	.word	0x5802541c
 8001d84:	58025430 	.word	0x58025430
 8001d88:	58025444 	.word	0x58025444
 8001d8c:	58025458 	.word	0x58025458
 8001d90:	5802546c 	.word	0x5802546c
 8001d94:	58025480 	.word	0x58025480
 8001d98:	58025494 	.word	0x58025494

08001d9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e237      	b.n	800221e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d004      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e22c      	b.n	800221e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <HAL_DMA_Abort_IT+0x1a0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d04a      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5b      	ldr	r2, [pc, #364]	; (8001f40 <HAL_DMA_Abort_IT+0x1a4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d045      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a59      	ldr	r2, [pc, #356]	; (8001f44 <HAL_DMA_Abort_IT+0x1a8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d040      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_DMA_Abort_IT+0x1ac>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d03b      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_DMA_Abort_IT+0x1b0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d036      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a55      	ldr	r2, [pc, #340]	; (8001f50 <HAL_DMA_Abort_IT+0x1b4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d031      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a53      	ldr	r2, [pc, #332]	; (8001f54 <HAL_DMA_Abort_IT+0x1b8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02c      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_DMA_Abort_IT+0x1bc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d027      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_DMA_Abort_IT+0x1c0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d022      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a4f      	ldr	r2, [pc, #316]	; (8001f60 <HAL_DMA_Abort_IT+0x1c4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d01d      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_DMA_Abort_IT+0x1c8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d018      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_DMA_Abort_IT+0x1cc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_DMA_Abort_IT+0x1d0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00e      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a49      	ldr	r2, [pc, #292]	; (8001f70 <HAL_DMA_Abort_IT+0x1d4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_DMA_Abort_IT+0x1d8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <HAL_DMA_Abort_IT+0x1dc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_DMA_Abort_IT+0xcc>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_Abort_IT+0xce>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8086 	beq.w	8001f7c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2204      	movs	r2, #4
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <HAL_DMA_Abort_IT+0x1a0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d04a      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <HAL_DMA_Abort_IT+0x1a4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d045      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2c      	ldr	r2, [pc, #176]	; (8001f44 <HAL_DMA_Abort_IT+0x1a8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d040      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <HAL_DMA_Abort_IT+0x1ac>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d03b      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <HAL_DMA_Abort_IT+0x1b0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d036      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <HAL_DMA_Abort_IT+0x1b4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d031      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_DMA_Abort_IT+0x1b8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02c      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_DMA_Abort_IT+0x1bc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d027      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <HAL_DMA_Abort_IT+0x1c0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d022      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <HAL_DMA_Abort_IT+0x1c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01d      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <HAL_DMA_Abort_IT+0x1c8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d018      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_DMA_Abort_IT+0x1cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_DMA_Abort_IT+0x1d0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00e      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <HAL_DMA_Abort_IT+0x1d4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <HAL_DMA_Abort_IT+0x1d8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d004      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x17c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_DMA_Abort_IT+0x1dc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d108      	bne.n	8001f2a <HAL_DMA_Abort_IT+0x18e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e178      	b.n	800221c <HAL_DMA_Abort_IT+0x480>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e16f      	b.n	800221c <HAL_DMA_Abort_IT+0x480>
 8001f3c:	40020010 	.word	0x40020010
 8001f40:	40020028 	.word	0x40020028
 8001f44:	40020040 	.word	0x40020040
 8001f48:	40020058 	.word	0x40020058
 8001f4c:	40020070 	.word	0x40020070
 8001f50:	40020088 	.word	0x40020088
 8001f54:	400200a0 	.word	0x400200a0
 8001f58:	400200b8 	.word	0x400200b8
 8001f5c:	40020410 	.word	0x40020410
 8001f60:	40020428 	.word	0x40020428
 8001f64:	40020440 	.word	0x40020440
 8001f68:	40020458 	.word	0x40020458
 8001f6c:	40020470 	.word	0x40020470
 8001f70:	40020488 	.word	0x40020488
 8001f74:	400204a0 	.word	0x400204a0
 8001f78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 020e 	bic.w	r2, r2, #14
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6c      	ldr	r2, [pc, #432]	; (8002144 <HAL_DMA_Abort_IT+0x3a8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d04a      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6b      	ldr	r2, [pc, #428]	; (8002148 <HAL_DMA_Abort_IT+0x3ac>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d045      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_DMA_Abort_IT+0x3b0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d040      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a68      	ldr	r2, [pc, #416]	; (8002150 <HAL_DMA_Abort_IT+0x3b4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d03b      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a66      	ldr	r2, [pc, #408]	; (8002154 <HAL_DMA_Abort_IT+0x3b8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d036      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a65      	ldr	r2, [pc, #404]	; (8002158 <HAL_DMA_Abort_IT+0x3bc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d031      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a63      	ldr	r2, [pc, #396]	; (800215c <HAL_DMA_Abort_IT+0x3c0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d02c      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a62      	ldr	r2, [pc, #392]	; (8002160 <HAL_DMA_Abort_IT+0x3c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d027      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a60      	ldr	r2, [pc, #384]	; (8002164 <HAL_DMA_Abort_IT+0x3c8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a5f      	ldr	r2, [pc, #380]	; (8002168 <HAL_DMA_Abort_IT+0x3cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d01d      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a5d      	ldr	r2, [pc, #372]	; (800216c <HAL_DMA_Abort_IT+0x3d0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d018      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a5c      	ldr	r2, [pc, #368]	; (8002170 <HAL_DMA_Abort_IT+0x3d4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5a      	ldr	r2, [pc, #360]	; (8002174 <HAL_DMA_Abort_IT+0x3d8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00e      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a59      	ldr	r2, [pc, #356]	; (8002178 <HAL_DMA_Abort_IT+0x3dc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_DMA_Abort_IT+0x3e0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_DMA_Abort_IT+0x290>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_DMA_Abort_IT+0x3e4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <HAL_DMA_Abort_IT+0x2a2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e007      	b.n	800204e <HAL_DMA_Abort_IT+0x2b2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <HAL_DMA_Abort_IT+0x3a8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d072      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_DMA_Abort_IT+0x3ac>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d06d      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_DMA_Abort_IT+0x3b0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d068      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a37      	ldr	r2, [pc, #220]	; (8002150 <HAL_DMA_Abort_IT+0x3b4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d063      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a36      	ldr	r2, [pc, #216]	; (8002154 <HAL_DMA_Abort_IT+0x3b8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_DMA_Abort_IT+0x3bc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d059      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a33      	ldr	r2, [pc, #204]	; (800215c <HAL_DMA_Abort_IT+0x3c0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d054      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_DMA_Abort_IT+0x3c4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04f      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a30      	ldr	r2, [pc, #192]	; (8002164 <HAL_DMA_Abort_IT+0x3c8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d04a      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_DMA_Abort_IT+0x3cc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d045      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <HAL_DMA_Abort_IT+0x3d0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d040      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <HAL_DMA_Abort_IT+0x3d4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d03b      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <HAL_DMA_Abort_IT+0x3d8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d036      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_DMA_Abort_IT+0x3dc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d031      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_DMA_Abort_IT+0x3e0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d02c      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a25      	ldr	r2, [pc, #148]	; (8002180 <HAL_DMA_Abort_IT+0x3e4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d027      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_DMA_Abort_IT+0x3e8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d022      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_DMA_Abort_IT+0x3ec>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01d      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_DMA_Abort_IT+0x3f0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d018      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_DMA_Abort_IT+0x3f4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <HAL_DMA_Abort_IT+0x3f8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_DMA_Abort_IT+0x3fc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1b      	ldr	r2, [pc, #108]	; (800219c <HAL_DMA_Abort_IT+0x400>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_DMA_Abort_IT+0x3a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_DMA_Abort_IT+0x404>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d132      	bne.n	80021a4 <HAL_DMA_Abort_IT+0x408>
 800213e:	2301      	movs	r3, #1
 8002140:	e031      	b.n	80021a6 <HAL_DMA_Abort_IT+0x40a>
 8002142:	bf00      	nop
 8002144:	40020010 	.word	0x40020010
 8002148:	40020028 	.word	0x40020028
 800214c:	40020040 	.word	0x40020040
 8002150:	40020058 	.word	0x40020058
 8002154:	40020070 	.word	0x40020070
 8002158:	40020088 	.word	0x40020088
 800215c:	400200a0 	.word	0x400200a0
 8002160:	400200b8 	.word	0x400200b8
 8002164:	40020410 	.word	0x40020410
 8002168:	40020428 	.word	0x40020428
 800216c:	40020440 	.word	0x40020440
 8002170:	40020458 	.word	0x40020458
 8002174:	40020470 	.word	0x40020470
 8002178:	40020488 	.word	0x40020488
 800217c:	400204a0 	.word	0x400204a0
 8002180:	400204b8 	.word	0x400204b8
 8002184:	58025408 	.word	0x58025408
 8002188:	5802541c 	.word	0x5802541c
 800218c:	58025430 	.word	0x58025430
 8002190:	58025444 	.word	0x58025444
 8002194:	58025458 	.word	0x58025458
 8002198:	5802546c 	.word	0x5802546c
 800219c:	58025480 	.word	0x58025480
 80021a0:	58025494 	.word	0x58025494
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d028      	beq.n	80021fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2201      	movs	r2, #1
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop

08002228 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0cf      	b.n	80023da <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2223      	movs	r2, #35	; 0x23
 8002248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7fe fd25 	bl	8000c9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_ETH_Init+0x1bc>)
 8002254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002258:	4a62      	ldr	r2, [pc, #392]	; (80023e4 <HAL_ETH_Init+0x1bc>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002262:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <HAL_ETH_Init+0x1bc>)
 8002264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7a1b      	ldrb	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff f94d 	bl	8001518 <HAL_SYSCFG_ETHInterfaceSelect>
 800227e:	e003      	b.n	8002288 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002280:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002284:	f7ff f948 	bl	8001518 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_ETH_Init+0x1c0>)
 800228a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a4:	f7ff f8fc 	bl	80014a0 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80022aa:	e011      	b.n	80022d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022ac:	f7ff f8f8 	bl	80014a0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022ba:	d909      	bls.n	80022d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2204      	movs	r2, #4
 80022c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	22e0      	movs	r2, #224	; 0xe0
 80022c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e084      	b.n	80023da <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e4      	bne.n	80022ac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f886 	bl	80023f4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80022e8:	f001 fe96 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <HAL_ETH_Init+0x1c4>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	0c9a      	lsrs	r2, r3, #18
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3a01      	subs	r2, #1
 80022fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa71 	bl	80027e8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002312:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800231e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002322:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	22e0      	movs	r2, #224	; 0xe0
 800233e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e049      	b.n	80023da <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_ETH_Init+0x1c8>)
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6952      	ldr	r2, [r2, #20]
 800235a:	0051      	lsls	r1, r2, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002366:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fad9 	bl	8002922 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fb1f 	bl	80029b4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	3305      	adds	r3, #5
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	021a      	lsls	r2, r3, #8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	3303      	adds	r3, #3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	061a      	lsls	r2, r3, #24
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	3302      	adds	r3, #2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	3301      	adds	r3, #1
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2210      	movs	r2, #16
 80023d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	58024400 	.word	0x58024400
 80023e8:	58000400 	.word	0x58000400
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	ffff8001 	.word	0xffff8001

080023f4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002404:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800240c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800240e:	f001 fe03 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8002412:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d908      	bls.n	800242e <HAL_ETH_SetMDIOClockRange+0x3a>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d804      	bhi.n	800242e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e027      	b.n	800247e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4a18      	ldr	r2, [pc, #96]	; (8002494 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d908      	bls.n	8002448 <HAL_ETH_SetMDIOClockRange+0x54>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4a17      	ldr	r2, [pc, #92]	; (8002498 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d204      	bcs.n	8002448 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e01a      	b.n	800247e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d303      	bcc.n	8002458 <HAL_ETH_SetMDIOClockRange+0x64>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d911      	bls.n	800247c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d908      	bls.n	8002472 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d804      	bhi.n	8002472 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e005      	b.n	800247e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e000      	b.n	800247e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800247c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	01312cff 	.word	0x01312cff
 8002494:	02160ebf 	.word	0x02160ebf
 8002498:	03938700 	.word	0x03938700
 800249c:	05f5e0ff 	.word	0x05f5e0ff
 80024a0:	08f0d17f 	.word	0x08f0d17f

080024a4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80024b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80024be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	7b1b      	ldrb	r3, [r3, #12]
 80024c4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	7b5b      	ldrb	r3, [r3, #13]
 80024cc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	7b9b      	ldrb	r3, [r3, #14]
 80024d4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7bdb      	ldrb	r3, [r3, #15]
 80024dc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	7c12      	ldrb	r2, [r2, #16]
 80024e4:	2a00      	cmp	r2, #0
 80024e6:	d102      	bne.n	80024ee <ETH_SetMACConfig+0x4a>
 80024e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024ec:	e000      	b.n	80024f0 <ETH_SetMACConfig+0x4c>
 80024ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	7c52      	ldrb	r2, [r2, #17]
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d102      	bne.n	8002500 <ETH_SetMACConfig+0x5c>
 80024fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024fe:	e000      	b.n	8002502 <ETH_SetMACConfig+0x5e>
 8002500:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	7c9b      	ldrb	r3, [r3, #18]
 8002508:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800250a:	431a      	orrs	r2, r3
               macconf->Speed |
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002510:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	7f1b      	ldrb	r3, [r3, #28]
 800251c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800251e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7f5b      	ldrb	r3, [r3, #29]
 8002524:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002526:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	7f92      	ldrb	r2, [r2, #30]
 800252c:	2a00      	cmp	r2, #0
 800252e:	d102      	bne.n	8002536 <ETH_SetMACConfig+0x92>
 8002530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002534:	e000      	b.n	8002538 <ETH_SetMACConfig+0x94>
 8002536:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002538:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	7fdb      	ldrb	r3, [r3, #31]
 800253e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002540:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002548:	2a00      	cmp	r2, #0
 800254a:	d102      	bne.n	8002552 <ETH_SetMACConfig+0xae>
 800254c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0xb0>
 8002552:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002554:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800255a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002562:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002564:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b56      	ldr	r3, [pc, #344]	; (80026d0 <ETH_SetMACConfig+0x22c>)
 8002576:	4013      	ands	r3, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	430b      	orrs	r3, r1
 8002580:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800258e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002590:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002598:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800259a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025a2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	d102      	bne.n	80025b6 <ETH_SetMACConfig+0x112>
 80025b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025b4:	e000      	b.n	80025b8 <ETH_SetMACConfig+0x114>
 80025b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025b8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <ETH_SetMACConfig+0x230>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	68f9      	ldr	r1, [r7, #12]
 80025d2:	430b      	orrs	r3, r1
 80025d4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025dc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <ETH_SetMACConfig+0x234>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002600:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002606:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800260e:	2a00      	cmp	r2, #0
 8002610:	d101      	bne.n	8002616 <ETH_SetMACConfig+0x172>
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	e000      	b.n	8002618 <ETH_SetMACConfig+0x174>
 8002616:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002618:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800262a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800262e:	4013      	ands	r3, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	430b      	orrs	r3, r1
 8002638:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002640:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002648:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	f023 0103 	bic.w	r1, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	430a      	orrs	r2, r1
 8002662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800266e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800268a:	2a00      	cmp	r2, #0
 800268c:	d101      	bne.n	8002692 <ETH_SetMACConfig+0x1ee>
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	e000      	b.n	8002694 <ETH_SetMACConfig+0x1f0>
 8002692:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002694:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800269c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800269e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80026a6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026b4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	430a      	orrs	r2, r1
 80026c0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	00048083 	.word	0x00048083
 80026d4:	c0f88000 	.word	0xc0f88000
 80026d8:	fffffef0 	.word	0xfffffef0

080026dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <ETH_SetDMAConfig+0xf8>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6811      	ldr	r1, [r2, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002702:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	791b      	ldrb	r3, [r3, #4]
 8002708:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800270e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7b1b      	ldrb	r3, [r3, #12]
 8002714:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <ETH_SetDMAConfig+0xfc>)
 8002726:	4013      	ands	r3, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	68f9      	ldr	r1, [r7, #12]
 800272e:	430b      	orrs	r3, r1
 8002730:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002734:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	7b5b      	ldrb	r3, [r3, #13]
 800273a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <ETH_SetDMAConfig+0x100>)
 8002752:	4013      	ands	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	430b      	orrs	r3, r1
 800275c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002760:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	7d1b      	ldrb	r3, [r3, #20]
 800276c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800276e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	7f5b      	ldrb	r3, [r3, #29]
 8002774:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002782:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <ETH_SetDMAConfig+0x104>)
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	430b      	orrs	r3, r1
 8002792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002796:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	7f1b      	ldrb	r3, [r3, #28]
 800279e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <ETH_SetDMAConfig+0x108>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	68f9      	ldr	r1, [r7, #12]
 80027be:	430b      	orrs	r3, r1
 80027c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027c4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	ffff87fd 	.word	0xffff87fd
 80027d8:	ffff2ffe 	.word	0xffff2ffe
 80027dc:	fffec000 	.word	0xfffec000
 80027e0:	ffc0efef 	.word	0xffc0efef
 80027e4:	7fc0ffff 	.word	0x7fc0ffff

080027e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0a4      	sub	sp, #144	; 0x90
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027f6:	2300      	movs	r3, #0
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002830:	2300      	movs	r3, #0
 8002832:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002840:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002844:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002862:	2300      	movs	r3, #0
 8002864:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002866:	2300      	movs	r3, #0
 8002868:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800286a:	2300      	movs	r3, #0
 800286c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002880:	2320      	movs	r3, #32
 8002882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002892:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800289c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028a4:	2302      	movs	r3, #2
 80028a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80028bc:	2301      	movs	r3, #1
 80028be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80028c2:	2300      	movs	r3, #0
 80028c4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fde6 	bl	80024a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028d8:	2301      	movs	r3, #1
 80028da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028dc:	2301      	movs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002900:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002908:	f44f 7306 	mov.w	r3, #536	; 0x218
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fee1 	bl	80026dc <ETH_SetDMAConfig>
}
 800291a:	bf00      	nop
 800291c:	3790      	adds	r7, #144	; 0x90
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	e01d      	b.n	800296c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68d9      	ldr	r1, [r3, #12]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	3206      	adds	r2, #6
 8002962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d9de      	bls.n	8002930 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002980:	461a      	mov	r2, r3
 8002982:	2303      	movs	r3, #3
 8002984:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002994:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e023      	b.n	8002a0a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	3212      	adds	r2, #18
 8002a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d9d8      	bls.n	80029c2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a36:	461a      	mov	r2, r3
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a7e:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <HAL_GPIO_Init+0x234>)
 8002a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a82:	e194      	b.n	8002dae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8186 	beq.w	8002da8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d005      	beq.n	8002ab4 <HAL_GPIO_Init+0x44>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d130      	bne.n	8002b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aea:	2201      	movs	r2, #1
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0201 	and.w	r2, r3, #1
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d017      	beq.n	8002b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d123      	bne.n	8002ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	08da      	lsrs	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3208      	adds	r2, #8
 8002ba0:	69b9      	ldr	r1, [r7, #24]
 8002ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0203 	and.w	r2, r3, #3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80e0 	beq.w	8002da8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_GPIO_Init+0x238>)
 8002bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bee:	4a2e      	ldr	r2, [pc, #184]	; (8002ca8 <HAL_GPIO_Init+0x238>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_GPIO_Init+0x238>)
 8002bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c06:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_GPIO_Init+0x23c>)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <HAL_GPIO_Init+0x240>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d052      	beq.n	8002cd8 <HAL_GPIO_Init+0x268>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_GPIO_Init+0x244>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <HAL_GPIO_Init+0x22e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_GPIO_Init+0x248>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x22a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_GPIO_Init+0x24c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x226>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_GPIO_Init+0x250>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x222>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <HAL_GPIO_Init+0x254>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x21e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_GPIO_Init+0x258>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x21a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <HAL_GPIO_Init+0x25c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x216>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_GPIO_Init+0x260>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x212>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_GPIO_Init+0x264>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x20e>
 8002c7a:	2309      	movs	r3, #9
 8002c7c:	e02d      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c7e:	230a      	movs	r3, #10
 8002c80:	e02b      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c82:	2308      	movs	r3, #8
 8002c84:	e029      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c86:	2307      	movs	r3, #7
 8002c88:	e027      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	e025      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c8e:	2305      	movs	r3, #5
 8002c90:	e023      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c92:	2304      	movs	r3, #4
 8002c94:	e021      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c96:	2303      	movs	r3, #3
 8002c98:	e01f      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e01d      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01b      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002ca2:	bf00      	nop
 8002ca4:	58000080 	.word	0x58000080
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	58000400 	.word	0x58000400
 8002cb0:	58020000 	.word	0x58020000
 8002cb4:	58020400 	.word	0x58020400
 8002cb8:	58020800 	.word	0x58020800
 8002cbc:	58020c00 	.word	0x58020c00
 8002cc0:	58021000 	.word	0x58021000
 8002cc4:	58021400 	.word	0x58021400
 8002cc8:	58021800 	.word	0x58021800
 8002ccc:	58021c00 	.word	0x58021c00
 8002cd0:	58022000 	.word	0x58022000
 8002cd4:	58022400 	.word	0x58022400
 8002cd8:	2300      	movs	r3, #0
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f002 0203 	and.w	r2, r2, #3
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cea:	4938      	ldr	r1, [pc, #224]	; (8002dcc <HAL_GPIO_Init+0x35c>)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f ae63 	bne.w	8002a84 <HAL_GPIO_Init+0x14>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	3724      	adds	r7, #36	; 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	58000400 	.word	0x58000400

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fef5 	bl	8000c18 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e38:	b08f      	sub	sp, #60	; 0x3c
 8002e3a:	af0a      	add	r7, sp, #40	; 0x28
 8002e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e116      	b.n	8003076 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe f91e 	bl	80010a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 ff88 	bl	8007d9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	687e      	ldr	r6, [r7, #4]
 8002e94:	466d      	mov	r5, sp
 8002e96:	f106 0410 	add.w	r4, r6, #16
 8002e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eaa:	1d33      	adds	r3, r6, #4
 8002eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eae:	6838      	ldr	r0, [r7, #0]
 8002eb0:	f004 ff06 	bl	8007cc0 <USB_CoreInit>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0d7      	b.n	8003076 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 ff76 	bl	8007dbe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e04a      	b.n	8002f6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	333d      	adds	r3, #61	; 0x3d
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	333c      	adds	r3, #60	; 0x3c
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	b298      	uxth	r0, r3
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3344      	adds	r3, #68	; 0x44
 8002f14:	4602      	mov	r2, r0
 8002f16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3340      	adds	r3, #64	; 0x40
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3348      	adds	r3, #72	; 0x48
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	334c      	adds	r3, #76	; 0x4c
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	3354      	adds	r3, #84	; 0x54
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d3af      	bcc.n	8002ed8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e044      	b.n	8003008 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	3301      	adds	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3b5      	bcc.n	8002f7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	687e      	ldr	r6, [r7, #4]
 800301a:	466d      	mov	r5, sp
 800301c:	f106 0410 	add.w	r4, r6, #16
 8003020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800302c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003030:	1d33      	adds	r3, r6, #4
 8003032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	f004 ff0f 	bl	8007e58 <USB_DevInit>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e014      	b.n	8003076 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f80b 	bl	8003080 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f005 f8cd 	bl	800820e <USB_DevDisconnect>

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003080 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	10000003 	.word	0x10000003

080030c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_PWREx_ConfigSupply+0x70>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d00a      	beq.n	80030f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_PWREx_ConfigSupply+0x70>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e01f      	b.n	800312e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e01d      	b.n	800312e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <HAL_PWREx_ConfigSupply+0x70>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	490f      	ldr	r1, [pc, #60]	; (8003138 <HAL_PWREx_ConfigSupply+0x70>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003102:	f7fe f9cd 	bl	80014a0 <HAL_GetTick>
 8003106:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003108:	e009      	b.n	800311e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800310a:	f7fe f9c9 	bl	80014a0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003118:	d901      	bls.n	800311e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e007      	b.n	800312e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_PWREx_ConfigSupply+0x70>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	d1ee      	bne.n	800310a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	58024800 	.word	0x58024800

0800313c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	58024800 	.word	0x58024800

0800315c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f000 bc1d 	b.w	80039aa <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8087 	beq.w	800328c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317e:	4b99      	ldr	r3, [pc, #612]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003188:	4b96      	ldr	r3, [pc, #600]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b10      	cmp	r3, #16
 8003192:	d007      	beq.n	80031a4 <HAL_RCC_OscConfig+0x48>
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b18      	cmp	r3, #24
 8003198:	d110      	bne.n	80031bc <HAL_RCC_OscConfig+0x60>
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d06c      	beq.n	800328a <HAL_RCC_OscConfig+0x12e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d168      	bne.n	800328a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e3f6      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x78>
 80031c6:	4b87      	ldr	r3, [pc, #540]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a86      	ldr	r2, [pc, #536]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e02e      	b.n	8003232 <HAL_RCC_OscConfig+0xd6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10c      	bne.n	80031f6 <HAL_RCC_OscConfig+0x9a>
 80031dc:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a80      	ldr	r2, [pc, #512]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b7e      	ldr	r3, [pc, #504]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7d      	ldr	r2, [pc, #500]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e01d      	b.n	8003232 <HAL_RCC_OscConfig+0xd6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0xbe>
 8003200:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a77      	ldr	r2, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a74      	ldr	r2, [pc, #464]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0xd6>
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6e      	ldr	r2, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800322c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d013      	beq.n	8003262 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe f931 	bl	80014a0 <HAL_GetTick>
 800323e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003242:	f7fe f92d 	bl	80014a0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e3aa      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0xe6>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe f91d 	bl	80014a0 <HAL_GetTick>
 8003266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326a:	f7fe f919 	bl	80014a0 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	; 0x64
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e396      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x10e>
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80cb 	beq.w	8003430 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329a:	4b52      	ldr	r3, [pc, #328]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032a4:	4b4f      	ldr	r3, [pc, #316]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_RCC_OscConfig+0x164>
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b18      	cmp	r3, #24
 80032b4:	d156      	bne.n	8003364 <HAL_RCC_OscConfig+0x208>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d151      	bne.n	8003364 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c0:	4b48      	ldr	r3, [pc, #288]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_OscConfig+0x17c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e368      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0219 	bic.w	r2, r3, #25
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	493f      	ldr	r1, [pc, #252]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032ea:	f7fe f8d9 	bl	80014a0 <HAL_GetTick>
 80032ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe f8d5 	bl	80014a0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e352      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003304:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	f7fe f8f6 	bl	8001500 <HAL_GetREVID>
 8003314:	4603      	mov	r3, r0
 8003316:	f241 0203 	movw	r2, #4099	; 0x1003
 800331a:	4293      	cmp	r3, r2
 800331c:	d817      	bhi.n	800334e <HAL_RCC_OscConfig+0x1f2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d108      	bne.n	8003338 <HAL_RCC_OscConfig+0x1dc>
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800332e:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003336:	e07b      	b.n	8003430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	4927      	ldr	r1, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334c:	e070      	b.n	8003430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	4921      	ldr	r1, [pc, #132]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003362:	e065      	b.n	8003430 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d048      	beq.n	80033fe <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 0219 	bic.w	r2, r3, #25
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	491a      	ldr	r1, [pc, #104]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe f88f 	bl	80014a0 <HAL_GetTick>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003386:	f7fe f88b 	bl	80014a0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e308      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	f7fe f8ac 	bl	8001500 <HAL_GetREVID>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d81a      	bhi.n	80033e8 <HAL_RCC_OscConfig+0x28c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d108      	bne.n	80033cc <HAL_RCC_OscConfig+0x270>
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	6053      	str	r3, [r2, #4]
 80033ca:	e031      	b.n	8003430 <HAL_RCC_OscConfig+0x2d4>
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	031b      	lsls	r3, r3, #12
 80033da:	4902      	ldr	r1, [pc, #8]	; (80033e4 <HAL_RCC_OscConfig+0x288>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	e026      	b.n	8003430 <HAL_RCC_OscConfig+0x2d4>
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
 80033e8:	4b9a      	ldr	r3, [pc, #616]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	4997      	ldr	r1, [pc, #604]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
 80033fc:	e018      	b.n	8003430 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	4b95      	ldr	r3, [pc, #596]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a94      	ldr	r2, [pc, #592]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe f849 	bl	80014a0 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe f845 	bl	80014a0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e2c2      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003424:	4b8b      	ldr	r3, [pc, #556]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a9 	beq.w	8003590 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343e:	4b85      	ldr	r3, [pc, #532]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003446:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003448:	4b82      	ldr	r3, [pc, #520]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d007      	beq.n	8003464 <HAL_RCC_OscConfig+0x308>
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b18      	cmp	r3, #24
 8003458:	d13a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x374>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d135      	bne.n	80034d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003464:	4b7b      	ldr	r3, [pc, #492]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x320>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d001      	beq.n	800347c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e296      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800347c:	f7fe f840 	bl	8001500 <HAL_GetREVID>
 8003480:	4603      	mov	r3, r0
 8003482:	f241 0203 	movw	r2, #4099	; 0x1003
 8003486:	4293      	cmp	r3, r2
 8003488:	d817      	bhi.n	80034ba <HAL_RCC_OscConfig+0x35e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	2b20      	cmp	r3, #32
 8003490:	d108      	bne.n	80034a4 <HAL_RCC_OscConfig+0x348>
 8003492:	4b70      	ldr	r3, [pc, #448]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800349a:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034a2:	e075      	b.n	8003590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034a4:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	069b      	lsls	r3, r3, #26
 80034b2:	4968      	ldr	r1, [pc, #416]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034b8:	e06a      	b.n	8003590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	061b      	lsls	r3, r3, #24
 80034c8:	4962      	ldr	r1, [pc, #392]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034ce:	e05f      	b.n	8003590 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d042      	beq.n	800355e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034d8:	4b5e      	ldr	r3, [pc, #376]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a5d      	ldr	r2, [pc, #372]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80034de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd ffdc 	bl	80014a0 <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034ec:	f7fd ffd8 	bl	80014a0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e255      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034fe:	4b55      	ldr	r3, [pc, #340]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800350a:	f7fd fff9 	bl	8001500 <HAL_GetREVID>
 800350e:	4603      	mov	r3, r0
 8003510:	f241 0203 	movw	r2, #4099	; 0x1003
 8003514:	4293      	cmp	r3, r2
 8003516:	d817      	bhi.n	8003548 <HAL_RCC_OscConfig+0x3ec>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	2b20      	cmp	r3, #32
 800351e:	d108      	bne.n	8003532 <HAL_RCC_OscConfig+0x3d6>
 8003520:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800352e:	6053      	str	r3, [r2, #4]
 8003530:	e02e      	b.n	8003590 <HAL_RCC_OscConfig+0x434>
 8003532:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	069b      	lsls	r3, r3, #26
 8003540:	4944      	ldr	r1, [pc, #272]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
 8003546:	e023      	b.n	8003590 <HAL_RCC_OscConfig+0x434>
 8003548:	4b42      	ldr	r3, [pc, #264]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	493f      	ldr	r1, [pc, #252]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003558:	4313      	orrs	r3, r2
 800355a:	60cb      	str	r3, [r1, #12]
 800355c:	e018      	b.n	8003590 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800355e:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd ff99 	bl	80014a0 <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003572:	f7fd ff95 	bl	80014a0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e212      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d036      	beq.n	800360a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d019      	beq.n	80035d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fd ff76 	bl	80014a0 <HAL_GetTick>
 80035b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fd ff72 	bl	80014a0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1ef      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x45c>
 80035d6:	e018      	b.n	800360a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fd ff5c 	bl	80014a0 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ec:	f7fd ff58 	bl	80014a0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1d5      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d039      	beq.n	800368a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01c      	beq.n	8003658 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003628:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800362a:	f7fd ff39 	bl	80014a0 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003632:	f7fd ff35 	bl	80014a0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1b2      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_OscConfig+0x4f8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x4d6>
 8003650:	e01b      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
 8003652:	bf00      	nop
 8003654:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003658:	4b9b      	ldr	r3, [pc, #620]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a9a      	ldr	r2, [pc, #616]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800365e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003662:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003664:	f7fd ff1c 	bl	80014a0 <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800366c:	f7fd ff18 	bl	80014a0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e195      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800367e:	4b92      	ldr	r3, [pc, #584]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8081 	beq.w	800379a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003698:	4b8c      	ldr	r3, [pc, #560]	; (80038cc <HAL_RCC_OscConfig+0x770>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a8b      	ldr	r2, [pc, #556]	; (80038cc <HAL_RCC_OscConfig+0x770>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036a4:	f7fd fefc 	bl	80014a0 <HAL_GetTick>
 80036a8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036ac:	f7fd fef8 	bl	80014a0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e175      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036be:	4b83      	ldr	r3, [pc, #524]	; (80038cc <HAL_RCC_OscConfig+0x770>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d106      	bne.n	80036e0 <HAL_RCC_OscConfig+0x584>
 80036d2:	4b7d      	ldr	r3, [pc, #500]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a7c      	ldr	r2, [pc, #496]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
 80036de:	e02d      	b.n	800373c <HAL_RCC_OscConfig+0x5e0>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10c      	bne.n	8003702 <HAL_RCC_OscConfig+0x5a6>
 80036e8:	4b77      	ldr	r3, [pc, #476]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a76      	ldr	r2, [pc, #472]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	4b74      	ldr	r3, [pc, #464]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a73      	ldr	r2, [pc, #460]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80036fa:	f023 0304 	bic.w	r3, r3, #4
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003700:	e01c      	b.n	800373c <HAL_RCC_OscConfig+0x5e0>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x5c8>
 800370a:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a6b      	ldr	r2, [pc, #428]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	e00b      	b.n	800373c <HAL_RCC_OscConfig+0x5e0>
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a64      	ldr	r2, [pc, #400]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003736:	f023 0304 	bic.w	r3, r3, #4
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d015      	beq.n	8003770 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd feac 	bl	80014a0 <HAL_GetTick>
 8003748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fd fea8 	bl	80014a0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e123      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003762:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ee      	beq.n	800374c <HAL_RCC_OscConfig+0x5f0>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fd fe96 	bl	80014a0 <HAL_GetTick>
 8003774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fd fe92 	bl	80014a0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e10d      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800378e:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1ee      	bne.n	8003778 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8102 	beq.w	80039a8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037a4:	4b48      	ldr	r3, [pc, #288]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ac:	2b18      	cmp	r3, #24
 80037ae:	f000 80bd 	beq.w	800392c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	f040 809e 	bne.w	80038f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037bc:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a41      	ldr	r2, [pc, #260]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80037c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd fe6a 	bl	80014a0 <HAL_GetTick>
 80037cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd fe66 	bl	80014a0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0e3      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037e2:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80037f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_OscConfig+0x774>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	430a      	orrs	r2, r1
 8003802:	4931      	ldr	r1, [pc, #196]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	628b      	str	r3, [r1, #40]	; 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	3b01      	subs	r3, #1
 800380e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	3b01      	subs	r3, #1
 8003818:	025b      	lsls	r3, r3, #9
 800381a:	b29b      	uxth	r3, r3
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	3b01      	subs	r3, #1
 8003832:	061b      	lsls	r3, r3, #24
 8003834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003838:	4923      	ldr	r1, [pc, #140]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800384a:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800384c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384e:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <HAL_RCC_OscConfig+0x778>)
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003856:	00d2      	lsls	r2, r2, #3
 8003858:	491b      	ldr	r1, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	f023 020c 	bic.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4917      	ldr	r1, [pc, #92]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	f023 0202 	bic.w	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	4912      	ldr	r1, [pc, #72]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80038a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fd fdef 	bl	80014a0 <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038c4:	e011      	b.n	80038ea <HAL_RCC_OscConfig+0x78e>
 80038c6:	bf00      	nop
 80038c8:	58024400 	.word	0x58024400
 80038cc:	58024800 	.word	0x58024800
 80038d0:	fffffc0c 	.word	0xfffffc0c
 80038d4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fde2 	bl	80014a0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e05f      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038ea:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_RCC_OscConfig+0x858>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x77c>
 80038f6:	e057      	b.n	80039a8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f8:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <HAL_RCC_OscConfig+0x858>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2d      	ldr	r2, [pc, #180]	; (80039b4 <HAL_RCC_OscConfig+0x858>)
 80038fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd fdcc 	bl	80014a0 <HAL_GetTick>
 8003908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390c:	f7fd fdc8 	bl	80014a0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e045      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_RCC_OscConfig+0x858>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x7b0>
 800392a:	e03d      	b.n	80039a8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800392c:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <HAL_RCC_OscConfig+0x858>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_OscConfig+0x858>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b01      	cmp	r3, #1
 800393e:	d031      	beq.n	80039a4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f003 0203 	and.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d12a      	bne.n	80039a4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d122      	bne.n	80039a4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d11a      	bne.n	80039a4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	0a5b      	lsrs	r3, r3, #9
 8003972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d111      	bne.n	80039a4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d108      	bne.n	80039a4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3730      	adds	r7, #48	; 0x30
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	58024400 	.word	0x58024400

080039b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e19c      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b8a      	ldr	r3, [pc, #552]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b87      	ldr	r3, [pc, #540]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 020f 	bic.w	r2, r3, #15
 80039e2:	4985      	ldr	r1, [pc, #532]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b83      	ldr	r3, [pc, #524]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e184      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	4b7b      	ldr	r3, [pc, #492]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d908      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a18:	4b78      	ldr	r3, [pc, #480]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4975      	ldr	r1, [pc, #468]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d908      	bls.n	8003a58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a46:	4b6d      	ldr	r3, [pc, #436]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	496a      	ldr	r1, [pc, #424]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d908      	bls.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a74:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	495e      	ldr	r1, [pc, #376]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d908      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003aa2:	4b56      	ldr	r3, [pc, #344]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4953      	ldr	r1, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d908      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b4a      	ldr	r3, [pc, #296]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f023 020f 	bic.w	r2, r3, #15
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4947      	ldr	r1, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d055      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003aee:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4940      	ldr	r1, [pc, #256]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b08:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d121      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0f6      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d115      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0ea      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b38:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0de      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b48:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0d6      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f023 0207 	bic.w	r2, r3, #7
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4925      	ldr	r1, [pc, #148]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fd fc99 	bl	80014a0 <HAL_GetTick>
 8003b6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b72:	f7fd fc95 	bl	80014a0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0be      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d1eb      	bne.n	8003b72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d010      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d208      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f023 020f 	bic.w	r2, r3, #15
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	490e      	ldr	r1, [pc, #56]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d214      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e086      	b.n	8003d06 <HAL_RCC_ClockConfig+0x34e>
 8003bf8:	52002000 	.word	0x52002000
 8003bfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d208      	bcs.n	8003c2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c1c:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	4939      	ldr	r1, [pc, #228]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d010      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d208      	bcs.n	8003c5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c4a:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	492e      	ldr	r1, [pc, #184]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d010      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d208      	bcs.n	8003c8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	4922      	ldr	r1, [pc, #136]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d010      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d208      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4917      	ldr	r1, [pc, #92]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cb8:	f000 f834 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	4912      	ldr	r1, [pc, #72]	; (8003d14 <HAL_RCC_ClockConfig+0x35c>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_RCC_ClockConfig+0x358>)
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <HAL_RCC_ClockConfig+0x35c>)
 8003ce0:	5cd3      	ldrb	r3, [r2, r3]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x360>)
 8003cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x364>)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_RCC_ClockConfig+0x368>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fb86 	bl	800140c <HAL_InitTick>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
 8003d14:	08008344 	.word	0x08008344
 8003d18:	24000004 	.word	0x24000004
 8003d1c:	24000000 	.word	0x24000000
 8003d20:	24000008 	.word	0x24000008

08003d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d2a:	4bb3      	ldr	r3, [pc, #716]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d32:	2b18      	cmp	r3, #24
 8003d34:	f200 8155 	bhi.w	8003fe2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003da5 	.word	0x08003da5
 8003d44:	08003fe3 	.word	0x08003fe3
 8003d48:	08003fe3 	.word	0x08003fe3
 8003d4c:	08003fe3 	.word	0x08003fe3
 8003d50:	08003fe3 	.word	0x08003fe3
 8003d54:	08003fe3 	.word	0x08003fe3
 8003d58:	08003fe3 	.word	0x08003fe3
 8003d5c:	08003fe3 	.word	0x08003fe3
 8003d60:	08003dcb 	.word	0x08003dcb
 8003d64:	08003fe3 	.word	0x08003fe3
 8003d68:	08003fe3 	.word	0x08003fe3
 8003d6c:	08003fe3 	.word	0x08003fe3
 8003d70:	08003fe3 	.word	0x08003fe3
 8003d74:	08003fe3 	.word	0x08003fe3
 8003d78:	08003fe3 	.word	0x08003fe3
 8003d7c:	08003fe3 	.word	0x08003fe3
 8003d80:	08003dd1 	.word	0x08003dd1
 8003d84:	08003fe3 	.word	0x08003fe3
 8003d88:	08003fe3 	.word	0x08003fe3
 8003d8c:	08003fe3 	.word	0x08003fe3
 8003d90:	08003fe3 	.word	0x08003fe3
 8003d94:	08003fe3 	.word	0x08003fe3
 8003d98:	08003fe3 	.word	0x08003fe3
 8003d9c:	08003fe3 	.word	0x08003fe3
 8003da0:	08003dd7 	.word	0x08003dd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003da4:	4b94      	ldr	r3, [pc, #592]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003db0:	4b91      	ldr	r3, [pc, #580]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	4a90      	ldr	r2, [pc, #576]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003dc2:	e111      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dc4:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dc6:	61bb      	str	r3, [r7, #24]
    break;
 8003dc8:	e10e      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dca:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dcc:	61bb      	str	r3, [r7, #24]
    break;
 8003dce:	e10b      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003dd0:	4b8c      	ldr	r3, [pc, #560]	; (8004004 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dd2:	61bb      	str	r3, [r7, #24]
    break;
 8003dd4:	e108      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003de0:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dec:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003df6:	4b80      	ldr	r3, [pc, #512]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	08db      	lsrs	r3, r3, #3
 8003dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80e1 	beq.w	8003fdc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f000 8083 	beq.w	8003f28 <HAL_RCC_GetSysClockFreq+0x204>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	f200 80a1 	bhi.w	8003f6c <HAL_RCC_GetSysClockFreq+0x248>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x114>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d056      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e36:	e099      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e38:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d02d      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e44:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	08db      	lsrs	r3, r3, #3
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	4a6b      	ldr	r2, [pc, #428]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	ee07 3a90 	vmov	s15, r3
 8003e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6e:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e9e:	e087      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800400c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	4b51      	ldr	r3, [pc, #324]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee2:	e065      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004010 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f26:	e043      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004014 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6a:	e021      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004010 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	0a5b      	lsrs	r3, r3, #9
 8003fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fba:	3301      	adds	r3, #1
 8003fbc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd4:	ee17 3a90 	vmov	r3, s15
 8003fd8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fda:	e005      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
    break;
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fe4:	61bb      	str	r3, [r7, #24]
    break;
 8003fe6:	bf00      	nop
  }

  return sysclockfreq;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	03d09000 	.word	0x03d09000
 8004000:	003d0900 	.word	0x003d0900
 8004004:	007a1200 	.word	0x007a1200
 8004008:	46000000 	.word	0x46000000
 800400c:	4c742400 	.word	0x4c742400
 8004010:	4a742400 	.word	0x4a742400
 8004014:	4af42400 	.word	0x4af42400

08004018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800401e:	f7ff fe81 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8004022:	4602      	mov	r2, r0
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_RCC_GetHCLKFreq+0x50>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	0a1b      	lsrs	r3, r3, #8
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	490f      	ldr	r1, [pc, #60]	; (800406c <HAL_RCC_GetHCLKFreq+0x54>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	fa22 f303 	lsr.w	r3, r2, r3
 800403a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_RCC_GetHCLKFreq+0x50>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_GetHCLKFreq+0x54>)
 8004046:	5cd3      	ldrb	r3, [r2, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	fa22 f303 	lsr.w	r3, r2, r3
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_RCC_GetHCLKFreq+0x58>)
 8004054:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004056:	4a07      	ldr	r2, [pc, #28]	; (8004074 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <HAL_RCC_GetHCLKFreq+0x58>)
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58024400 	.word	0x58024400
 800406c:	08008344 	.word	0x08008344
 8004070:	24000004 	.word	0x24000004
 8004074:	24000000 	.word	0x24000000

08004078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800407c:	f7ff ffcc 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4904      	ldr	r1, [pc, #16]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	58024400 	.word	0x58024400
 80040a0:	08008344 	.word	0x08008344

080040a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040a8:	f7ff ffb6 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4904      	ldr	r1, [pc, #16]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	58024400 	.word	0x58024400
 80040cc:	08008344 	.word	0x08008344

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040dc:	2300      	movs	r3, #0
 80040de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03f      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040f4:	d02a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040fa:	d824      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004100:	d018      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004106:	d81e      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800410c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004110:	d007      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004112:	e018      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004114:	4ba3      	ldr	r3, [pc, #652]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	4aa2      	ldr	r2, [pc, #648]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004120:	e015      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3304      	adds	r3, #4
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f001 f9d5 	bl	80054d8 <RCCEx_PLL2_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004132:	e00c      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	2102      	movs	r1, #2
 800413a:	4618      	mov	r0, r3
 800413c:	f001 fa7e 	bl	800563c <RCCEx_PLL3_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
      break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800414c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004154:	4b93      	ldr	r3, [pc, #588]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004160:	4990      	ldr	r1, [pc, #576]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	650b      	str	r3, [r1, #80]	; 0x50
 8004166:	e001      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03d      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	2b04      	cmp	r3, #4
 800417e:	d826      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	0800419d 	.word	0x0800419d
 800418c:	080041ab 	.word	0x080041ab
 8004190:	080041bd 	.word	0x080041bd
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419c:	4b81      	ldr	r3, [pc, #516]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4a80      	ldr	r2, [pc, #512]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041a8:	e015      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3304      	adds	r3, #4
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 f991 	bl	80054d8 <RCCEx_PLL2_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041ba:	e00c      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3324      	adds	r3, #36	; 0x24
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 fa3a 	bl	800563c <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041cc:	e003      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
      break;
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80041d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041dc:	4b71      	ldr	r3, [pc, #452]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e0:	f023 0207 	bic.w	r2, r3, #7
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	496e      	ldr	r1, [pc, #440]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	650b      	str	r3, [r1, #80]	; 0x50
 80041ee:	e001      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d042      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004208:	d02b      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800420a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420e:	d825      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004210:	2bc0      	cmp	r3, #192	; 0xc0
 8004212:	d028      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004214:	2bc0      	cmp	r3, #192	; 0xc0
 8004216:	d821      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d016      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d81d      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d007      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004228:	e018      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800422a:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	4a5d      	ldr	r2, [pc, #372]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004234:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004236:	e017      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f001 f94a 	bl	80054d8 <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004248:	e00e      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3324      	adds	r3, #36	; 0x24
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f001 f9f3 	bl	800563c <RCCEx_PLL3_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800425a:	e005      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
      break;
 8004260:	e002      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	494a      	ldr	r1, [pc, #296]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	650b      	str	r3, [r1, #80]	; 0x50
 8004280:	e001      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428e:	2b00      	cmp	r3, #0
 8004290:	d049      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800429c:	d030      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800429e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042a2:	d82a      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042a8:	d02c      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80042aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042ae:	d824      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b4:	d018      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80042b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ba:	d81e      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80042c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042c4:	d007      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80042c6:	e018      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c8:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042d4:	e017      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 f8fb 	bl	80054d8 <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042e6:	e00e      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3324      	adds	r3, #36	; 0x24
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f9a4 	bl	800563c <RCCEx_PLL3_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042f8:	e005      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
      break;
 80042fe:	e002      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800431a:	4922      	ldr	r1, [pc, #136]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	658b      	str	r3, [r1, #88]	; 0x58
 8004320:	e001      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432e:	2b00      	cmp	r3, #0
 8004330:	d04b      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433c:	d030      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800433e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004342:	d82a      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004344:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004348:	d02e      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800434a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800434e:	d824      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004354:	d018      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800435a:	d81e      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004364:	d007      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004366:	e018      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	4a0d      	ldr	r2, [pc, #52]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004374:	e019      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f001 f8ab 	bl	80054d8 <RCCEx_PLL2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004386:	e010      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3324      	adds	r3, #36	; 0x24
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f001 f954 	bl	800563c <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004398:	e007      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
      break;
 800439e:	e004      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80043a0:	bf00      	nop
 80043a2:	e002      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80043a4:	58024400 	.word	0x58024400
      break;
 80043a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043b0:	4b99      	ldr	r3, [pc, #612]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043be:	4996      	ldr	r1, [pc, #600]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	658b      	str	r3, [r1, #88]	; 0x58
 80043c4:	e001      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d032      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	2b30      	cmp	r3, #48	; 0x30
 80043dc:	d01c      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80043de:	2b30      	cmp	r3, #48	; 0x30
 80043e0:	d817      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d00c      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d813      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d10f      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f2:	4b89      	ldr	r3, [pc, #548]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a88      	ldr	r2, [pc, #544]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80043fe:	e00e      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f866 	bl	80054d8 <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004410:	e005      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
      break;
 8004416:	e002      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800441c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004424:	4b7c      	ldr	r3, [pc, #496]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	4979      	ldr	r1, [pc, #484]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004432:	4313      	orrs	r3, r2
 8004434:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d047      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004450:	d030      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004456:	d82a      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004458:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800445c:	d02c      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800445e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004462:	d824      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004468:	d018      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	d81e      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	d007      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800447a:	e018      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4b66      	ldr	r3, [pc, #408]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	4a65      	ldr	r2, [pc, #404]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004488:	e017      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f001 f821 	bl	80054d8 <RCCEx_PLL2_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800449a:	e00e      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3324      	adds	r3, #36	; 0x24
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 f8ca 	bl	800563c <RCCEx_PLL3_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044ac:	e005      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
      break;
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80044b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044c0:	4b55      	ldr	r3, [pc, #340]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	4952      	ldr	r1, [pc, #328]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	650b      	str	r3, [r1, #80]	; 0x50
 80044d2:	e001      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d049      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ec:	d02e      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80044ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f2:	d828      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80044f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044f8:	d02a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80044fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044fe:	d822      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004500:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004504:	d026      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004506:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800450a:	d81c      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800450c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004510:	d010      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004516:	d816      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01d      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d111      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f000 ffd5 	bl	80054d8 <RCCEx_PLL2_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004532:	e012      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3324      	adds	r3, #36	; 0x24
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f87e 	bl	800563c <RCCEx_PLL3_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004544:	e009      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
      break;
 800454a:	e006      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800454c:	bf00      	nop
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004550:	bf00      	nop
 8004552:	e002      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456c:	492a      	ldr	r1, [pc, #168]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800456e:	4313      	orrs	r3, r2
 8004570:	650b      	str	r3, [r1, #80]	; 0x50
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d04d      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800458a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800458e:	d02e      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004594:	d828      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d02a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a0:	d822      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80045a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045a6:	d026      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80045a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045ac:	d81c      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80045ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b2:	d010      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80045b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b8:	d816      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01d      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80045be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c2:	d111      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 ff84 	bl	80054d8 <RCCEx_PLL2_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045d4:	e012      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3324      	adds	r3, #36	; 0x24
 80045da:	2101      	movs	r1, #1
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f82d 	bl	800563c <RCCEx_PLL3_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045e6:	e009      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75fb      	strb	r3, [r7, #23]
      break;
 80045ec:	e006      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80045ee:	bf00      	nop
 80045f0:	e004      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80045f2:	bf00      	nop
 80045f4:	e002      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80045f6:	bf00      	nop
 80045f8:	e000      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80045fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10c      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004610:	4901      	ldr	r1, [pc, #4]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004612:	4313      	orrs	r3, r2
 8004614:	658b      	str	r3, [r1, #88]	; 0x58
 8004616:	e003      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02f      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004634:	d00e      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463a:	d814      	bhi.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004644:	d10f      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004646:	4baf      	ldr	r3, [pc, #700]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4aae      	ldr	r2, [pc, #696]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800464c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004652:	e00c      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ff3c 	bl	80054d8 <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004664:	e003      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
      break;
 800466a:	e000      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800466c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004674:	4ba3      	ldr	r3, [pc, #652]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004680:	49a0      	ldr	r1, [pc, #640]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004682:	4313      	orrs	r3, r2
 8004684:	650b      	str	r3, [r1, #80]	; 0x50
 8004686:	e001      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d032      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	2b03      	cmp	r3, #3
 800469e:	d81b      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046df 	.word	0x080046df
 80046ac:	080046b9 	.word	0x080046b9
 80046b0:	080046c7 	.word	0x080046c7
 80046b4:	080046df 	.word	0x080046df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b8:	4b92      	ldr	r3, [pc, #584]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	4a91      	ldr	r2, [pc, #580]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046c4:	e00c      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2102      	movs	r1, #2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 ff03 	bl	80054d8 <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046d6:	e003      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
      break;
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80046de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046e6:	4b87      	ldr	r3, [pc, #540]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	4984      	ldr	r1, [pc, #528]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046f8:	e001      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8086 	beq.w	8004818 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470c:	4b7e      	ldr	r3, [pc, #504]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a7d      	ldr	r2, [pc, #500]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004718:	f7fc fec2 	bl	80014a0 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004720:	f7fc febe 	bl	80014a0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d902      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	75fb      	strb	r3, [r7, #23]
        break;
 8004732:	e005      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004734:	4b74      	ldr	r3, [pc, #464]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ef      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d166      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004746:	4b6f      	ldr	r3, [pc, #444]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004748:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004750:	4053      	eors	r3, r2
 8004752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004756:	2b00      	cmp	r3, #0
 8004758:	d013      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800475a:	4b6a      	ldr	r3, [pc, #424]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004764:	4b67      	ldr	r3, [pc, #412]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	4a66      	ldr	r2, [pc, #408]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004770:	4b64      	ldr	r3, [pc, #400]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	4a63      	ldr	r2, [pc, #396]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800477c:	4a61      	ldr	r2, [pc, #388]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478c:	d115      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fc fe87 	bl	80014a0 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004794:	e00b      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fc fe83 	bl	80014a0 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d902      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	75fb      	strb	r3, [r7, #23]
            break;
 80047ac:	e005      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ae:	4b55      	ldr	r3, [pc, #340]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ed      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d126      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ce:	d10d      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80047d0:	4b4c      	ldr	r3, [pc, #304]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047de:	0919      	lsrs	r1, r3, #4
 80047e0:	4b4a      	ldr	r3, [pc, #296]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80047e2:	400b      	ands	r3, r1
 80047e4:	4947      	ldr	r1, [pc, #284]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	610b      	str	r3, [r1, #16]
 80047ea:	e005      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80047ec:	4b45      	ldr	r3, [pc, #276]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	4a44      	ldr	r2, [pc, #272]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047f6:	6113      	str	r3, [r2, #16]
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004806:	493f      	ldr	r1, [pc, #252]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004808:	4313      	orrs	r3, r2
 800480a:	670b      	str	r3, [r1, #112]	; 0x70
 800480c:	e004      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	75bb      	strb	r3, [r7, #22]
 8004812:	e001      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8085 	beq.w	8004930 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482a:	2b28      	cmp	r3, #40	; 0x28
 800482c:	d866      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004911 	.word	0x08004911
 8004838:	080048fd 	.word	0x080048fd
 800483c:	080048fd 	.word	0x080048fd
 8004840:	080048fd 	.word	0x080048fd
 8004844:	080048fd 	.word	0x080048fd
 8004848:	080048fd 	.word	0x080048fd
 800484c:	080048fd 	.word	0x080048fd
 8004850:	080048fd 	.word	0x080048fd
 8004854:	080048d9 	.word	0x080048d9
 8004858:	080048fd 	.word	0x080048fd
 800485c:	080048fd 	.word	0x080048fd
 8004860:	080048fd 	.word	0x080048fd
 8004864:	080048fd 	.word	0x080048fd
 8004868:	080048fd 	.word	0x080048fd
 800486c:	080048fd 	.word	0x080048fd
 8004870:	080048fd 	.word	0x080048fd
 8004874:	080048eb 	.word	0x080048eb
 8004878:	080048fd 	.word	0x080048fd
 800487c:	080048fd 	.word	0x080048fd
 8004880:	080048fd 	.word	0x080048fd
 8004884:	080048fd 	.word	0x080048fd
 8004888:	080048fd 	.word	0x080048fd
 800488c:	080048fd 	.word	0x080048fd
 8004890:	080048fd 	.word	0x080048fd
 8004894:	08004911 	.word	0x08004911
 8004898:	080048fd 	.word	0x080048fd
 800489c:	080048fd 	.word	0x080048fd
 80048a0:	080048fd 	.word	0x080048fd
 80048a4:	080048fd 	.word	0x080048fd
 80048a8:	080048fd 	.word	0x080048fd
 80048ac:	080048fd 	.word	0x080048fd
 80048b0:	080048fd 	.word	0x080048fd
 80048b4:	08004911 	.word	0x08004911
 80048b8:	080048fd 	.word	0x080048fd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048fd 	.word	0x080048fd
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004911 	.word	0x08004911
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	2101      	movs	r1, #1
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fdfa 	bl	80054d8 <RCCEx_PLL2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048e8:	e013      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3324      	adds	r3, #36	; 0x24
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fea3 	bl	800563c <RCCEx_PLL3_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048fa:	e00a      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004900:	e007      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004902:	bf00      	nop
 8004904:	58024400 	.word	0x58024400
 8004908:	58024800 	.word	0x58024800
 800490c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004918:	4b96      	ldr	r3, [pc, #600]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004924:	4993      	ldr	r1, [pc, #588]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	654b      	str	r3, [r1, #84]	; 0x54
 800492a:	e001      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d038      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004940:	2b05      	cmp	r3, #5
 8004942:	d821      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	0800498f 	.word	0x0800498f
 8004950:	08004965 	.word	0x08004965
 8004954:	08004977 	.word	0x08004977
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800498f 	.word	0x0800498f
 8004960:	0800498f 	.word	0x0800498f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fdb4 	bl	80054d8 <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004974:	e00c      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3324      	adds	r3, #36	; 0x24
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fe5d 	bl	800563c <RCCEx_PLL3_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004986:	e003      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	75fb      	strb	r3, [r7, #23]
      break;
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800498e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004996:	4b77      	ldr	r3, [pc, #476]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f023 0207 	bic.w	r2, r3, #7
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	4974      	ldr	r1, [pc, #464]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	654b      	str	r3, [r1, #84]	; 0x54
 80049a8:	e001      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d821      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a0f 	.word	0x08004a0f
 80049d0:	080049e5 	.word	0x080049e5
 80049d4:	080049f7 	.word	0x080049f7
 80049d8:	08004a0f 	.word	0x08004a0f
 80049dc:	08004a0f 	.word	0x08004a0f
 80049e0:	08004a0f 	.word	0x08004a0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fd74 	bl	80054d8 <RCCEx_PLL2_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049f4:	e00c      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3324      	adds	r3, #36	; 0x24
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fe1d 	bl	800563c <RCCEx_PLL3_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a06:	e003      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0c:	e000      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a16:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	4953      	ldr	r1, [pc, #332]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	658b      	str	r3, [r1, #88]	; 0x58
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d04b      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a46:	d02e      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a4c:	d828      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d02a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d822      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a5e:	d026      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004a60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a64:	d81c      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a70:	d816      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01d      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7a:	d111      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fd28 	bl	80054d8 <RCCEx_PLL2_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a8c:	e012      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3324      	adds	r3, #36	; 0x24
 8004a92:	2102      	movs	r1, #2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fdd1 	bl	800563c <RCCEx_PLL3_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a9e:	e009      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa4:	e006      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e004      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e002      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac8:	492a      	ldr	r1, [pc, #168]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ace:	e001      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d04d      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004aea:	d02e      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004aec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004af0:	d828      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	d02a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afc:	d822      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b02:	d026      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004b04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b08:	d81c      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d010      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d816      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01d      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	d111      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fcd6 	bl	80054d8 <RCCEx_PLL2_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b30:	e012      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3324      	adds	r3, #36	; 0x24
 8004b36:	2102      	movs	r1, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fd7f 	bl	800563c <RCCEx_PLL3_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b42:	e009      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	e006      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e004      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e002      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b52:	bf00      	nop
 8004b54:	e000      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b6c:	4901      	ldr	r1, [pc, #4]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	658b      	str	r3, [r1, #88]	; 0x58
 8004b72:	e003      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d04b      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b92:	d02e      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004b94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b98:	d828      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9e:	d02a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	d822      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004ba6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004baa:	d026      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004bac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bb0:	d81c      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb6:	d010      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bbc:	d816      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01d      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc6:	d111      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fc82 	bl	80054d8 <RCCEx_PLL2_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bd8:	e012      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3324      	adds	r3, #36	; 0x24
 8004bde:	2102      	movs	r1, #2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fd2b 	bl	800563c <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bea:	e009      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e004      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e002      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c06:	4b9d      	ldr	r3, [pc, #628]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c14:	4999      	ldr	r1, [pc, #612]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	658b      	str	r3, [r1, #88]	; 0x58
 8004c1a:	e001      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	d10a      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3324      	adds	r3, #36	; 0x24
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fcfc 	bl	800563c <RCCEx_PLL3_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c4e:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5c:	4987      	ldr	r1, [pc, #540]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c78:	d10a      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3324      	adds	r3, #36	; 0x24
 8004c7e:	2102      	movs	r1, #2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fcdb 	bl	800563c <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c90:	4b7a      	ldr	r3, [pc, #488]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9e:	4977      	ldr	r1, [pc, #476]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d034      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cba:	d01d      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc0:	d817      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004ccc:	e011      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fbff 	bl	80054d8 <RCCEx_PLL2_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cde:	e00c      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3324      	adds	r3, #36	; 0x24
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fca8 	bl	800563c <RCCEx_PLL3_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cf0:	e003      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d00:	4b5e      	ldr	r3, [pc, #376]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d0e:	495b      	ldr	r1, [pc, #364]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	658b      	str	r3, [r1, #88]	; 0x58
 8004d14:	e001      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d033      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d30:	d01c      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004d32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d36:	d816      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3c:	d003      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d42:	d007      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004d44:	e00f      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d46:	4b4d      	ldr	r3, [pc, #308]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d52:	e00c      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3324      	adds	r3, #36	; 0x24
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fc6e 	bl	800563c <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d64:	e003      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6a:	e000      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d74:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d82:	493e      	ldr	r1, [pc, #248]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	654b      	str	r3, [r1, #84]	; 0x54
 8004d88:	e001      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
 8004d8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d029      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d007      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004da8:	e00f      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	4a33      	ldr	r2, [pc, #204]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fb8a 	bl	80054d8 <RCCEx_PLL2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004dc8:	e002      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	4926      	ldr	r1, [pc, #152]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004de8:	e001      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3324      	adds	r3, #36	; 0x24
 8004dfe:	2102      	movs	r1, #2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fc1b 	bl	800563c <RCCEx_PLL3_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d033      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e24:	d017      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2a:	d811      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e30:	d013      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e36:	d80b      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e40:	d106      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e42:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e4e:	e007      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      break;
 8004e54:	e004      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004e56:	bf00      	nop
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e000      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e72:	4902      	ldr	r1, [pc, #8]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	654b      	str	r3, [r1, #84]	; 0x54
 8004e78:	e004      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e90:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	492e      	ldr	r1, [pc, #184]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004eae:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ebc:	4926      	ldr	r1, [pc, #152]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eda:	491f      	ldr	r1, [pc, #124]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ef6:	6113      	str	r3, [r2, #16]
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f02:	4915      	ldr	r1, [pc, #84]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	da08      	bge.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1c:	490e      	ldr	r1, [pc, #56]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	4906      	ldr	r1, [pc, #24]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f42:	7dbb      	ldrb	r3, [r7, #22]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400

08004f5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f60:	f7ff f85a 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4904      	ldr	r1, [pc, #16]	; (8004f84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f72:	5ccb      	ldrb	r3, [r1, r3]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	58024400 	.word	0x58024400
 8004f84:	08008344 	.word	0x08008344

08004f88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	; 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f90:	4ba1      	ldr	r3, [pc, #644]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004f9a:	4b9f      	ldr	r3, [pc, #636]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	0b1b      	lsrs	r3, r3, #12
 8004fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fa6:	4b9c      	ldr	r3, [pc, #624]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004fb2:	4b99      	ldr	r3, [pc, #612]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8111 	beq.w	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	f000 8083 	beq.w	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	f200 80a1 	bhi.w	8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d056      	beq.n	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ff2:	e099      	b.n	8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ff4:	4b88      	ldr	r3, [pc, #544]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d02d      	beq.n	800505c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005000:	4b85      	ldr	r3, [pc, #532]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	08db      	lsrs	r3, r3, #3
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	4a84      	ldr	r2, [pc, #528]	; (800521c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502a:	4b7b      	ldr	r3, [pc, #492]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503a:	ed97 6a03 	vldr	s12, [r7, #12]
 800503e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800504a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800504e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005056:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800505a:	e087      	b.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506e:	4b6a      	ldr	r3, [pc, #424]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005082:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800509e:	e065      	b.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005228 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b2:	4b59      	ldr	r3, [pc, #356]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050e2:	e043      	b.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800522c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80050f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f6:	4b48      	ldr	r3, [pc, #288]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005106:	ed97 6a03 	vldr	s12, [r7, #12]
 800510a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800510e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005126:	e021      	b.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005228 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b37      	ldr	r3, [pc, #220]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a03 	vldr	s12, [r7, #12]
 800514e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800516a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800516c:	4b2a      	ldr	r3, [pc, #168]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	0a5b      	lsrs	r3, r3, #9
 8005172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005186:	edd7 6a07 	vldr	s13, [r7, #28]
 800518a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800518e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005192:	ee17 2a90 	vmov	r2, s15
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800519a:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	0c1b      	lsrs	r3, r3, #16
 80051a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c0:	ee17 2a90 	vmov	r2, s15
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	0e1b      	lsrs	r3, r3, #24
 80051ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ee:	ee17 2a90 	vmov	r2, s15
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80051f6:	e008      	b.n	800520a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	609a      	str	r2, [r3, #8]
}
 800520a:	bf00      	nop
 800520c:	3724      	adds	r7, #36	; 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400
 800521c:	03d09000 	.word	0x03d09000
 8005220:	46000000 	.word	0x46000000
 8005224:	4c742400 	.word	0x4c742400
 8005228:	4a742400 	.word	0x4a742400
 800522c:	4af42400 	.word	0x4af42400

08005230 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005238:	4ba1      	ldr	r3, [pc, #644]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005242:	4b9f      	ldr	r3, [pc, #636]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	0d1b      	lsrs	r3, r3, #20
 8005248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800524c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800524e:	4b9c      	ldr	r3, [pc, #624]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800525a:	4b99      	ldr	r3, [pc, #612]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	08db      	lsrs	r3, r3, #3
 8005260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8111 	beq.w	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b02      	cmp	r3, #2
 8005282:	f000 8083 	beq.w	800538c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b02      	cmp	r3, #2
 800528a:	f200 80a1 	bhi.w	80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d056      	beq.n	8005348 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800529a:	e099      	b.n	80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529c:	4b88      	ldr	r3, [pc, #544]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02d      	beq.n	8005304 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052a8:	4b85      	ldr	r3, [pc, #532]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	08db      	lsrs	r3, r3, #3
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	4a84      	ldr	r2, [pc, #528]	; (80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d2:	4b7b      	ldr	r3, [pc, #492]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005302:	e087      	b.n	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005316:	4b6a      	ldr	r3, [pc, #424]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005326:	ed97 6a03 	vldr	s12, [r7, #12]
 800532a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800532e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005346:	e065      	b.n	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535a:	4b59      	ldr	r3, [pc, #356]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536a:	ed97 6a03 	vldr	s12, [r7, #12]
 800536e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800538a:	e043      	b.n	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800539a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539e:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80053b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ce:	e021      	b.n	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e2:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005412:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005414:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	0a5b      	lsrs	r3, r3, #9
 800541a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800542a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800542e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800543a:	ee17 2a90 	vmov	r2, s15
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800545c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005468:	ee17 2a90 	vmov	r2, s15
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005470:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	0e1b      	lsrs	r3, r3, #24
 8005476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800548a:	edd7 6a07 	vldr	s13, [r7, #28]
 800548e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005496:	ee17 2a90 	vmov	r2, s15
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800549e:	e008      	b.n	80054b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	609a      	str	r2, [r3, #8]
}
 80054b2:	bf00      	nop
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	58024400 	.word	0x58024400
 80054c4:	03d09000 	.word	0x03d09000
 80054c8:	46000000 	.word	0x46000000
 80054cc:	4c742400 	.word	0x4c742400
 80054d0:	4a742400 	.word	0x4a742400
 80054d4:	4af42400 	.word	0x4af42400

080054d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054e6:	4b53      	ldr	r3, [pc, #332]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d101      	bne.n	80054f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e099      	b.n	800562a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054f6:	4b4f      	ldr	r3, [pc, #316]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a4e      	ldr	r2, [pc, #312]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005502:	f7fb ffcd 	bl	80014a0 <HAL_GetTick>
 8005506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005508:	e008      	b.n	800551c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800550a:	f7fb ffc9 	bl	80014a0 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e086      	b.n	800562a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800551c:	4b45      	ldr	r3, [pc, #276]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f0      	bne.n	800550a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	031b      	lsls	r3, r3, #12
 8005536:	493f      	ldr	r1, [pc, #252]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	628b      	str	r3, [r1, #40]	; 0x28
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	3b01      	subs	r3, #1
 8005542:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	3b01      	subs	r3, #1
 800554c:	025b      	lsls	r3, r3, #9
 800554e:	b29b      	uxth	r3, r3
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	3b01      	subs	r3, #1
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	3b01      	subs	r3, #1
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800556c:	4931      	ldr	r1, [pc, #196]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005572:	4b30      	ldr	r3, [pc, #192]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	492d      	ldr	r1, [pc, #180]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005584:	4b2b      	ldr	r3, [pc, #172]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	f023 0220 	bic.w	r2, r3, #32
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4928      	ldr	r1, [pc, #160]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005596:	4b27      	ldr	r3, [pc, #156]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	4a26      	ldr	r2, [pc, #152]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 800559c:	f023 0310 	bic.w	r3, r3, #16
 80055a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055a2:	4b24      	ldr	r3, [pc, #144]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a6:	4b24      	ldr	r3, [pc, #144]	; (8005638 <RCCEx_PLL2_Config+0x160>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	69d2      	ldr	r2, [r2, #28]
 80055ae:	00d2      	lsls	r2, r2, #3
 80055b0:	4920      	ldr	r1, [pc, #128]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055b6:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055bc:	f043 0310 	orr.w	r3, r3, #16
 80055c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055c8:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055d4:	e00f      	b.n	80055f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d106      	bne.n	80055ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055dc:	4b15      	ldr	r3, [pc, #84]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a14      	ldr	r2, [pc, #80]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055e8:	e005      	b.n	80055f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a11      	ldr	r2, [pc, #68]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a0e      	ldr	r2, [pc, #56]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005602:	f7fb ff4d 	bl	80014a0 <HAL_GetTick>
 8005606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005608:	e008      	b.n	800561c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800560a:	f7fb ff49 	bl	80014a0 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e006      	b.n	800562a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <RCCEx_PLL2_Config+0x15c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	58024400 	.word	0x58024400
 8005638:	ffff0007 	.word	0xffff0007

0800563c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800564a:	4b53      	ldr	r3, [pc, #332]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b03      	cmp	r3, #3
 8005654:	d101      	bne.n	800565a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e099      	b.n	800578e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800565a:	4b4f      	ldr	r3, [pc, #316]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a4e      	ldr	r2, [pc, #312]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005666:	f7fb ff1b 	bl	80014a0 <HAL_GetTick>
 800566a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800566c:	e008      	b.n	8005680 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800566e:	f7fb ff17 	bl	80014a0 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e086      	b.n	800578e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005680:	4b45      	ldr	r3, [pc, #276]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f0      	bne.n	800566e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800568c:	4b42      	ldr	r3, [pc, #264]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	051b      	lsls	r3, r3, #20
 800569a:	493f      	ldr	r1, [pc, #252]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 800569c:	4313      	orrs	r3, r2
 800569e:	628b      	str	r3, [r1, #40]	; 0x28
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	025b      	lsls	r3, r3, #9
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	061b      	lsls	r3, r3, #24
 80056cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056d0:	4931      	ldr	r1, [pc, #196]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056d6:	4b30      	ldr	r3, [pc, #192]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	492d      	ldr	r1, [pc, #180]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80056e8:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	4928      	ldr	r1, [pc, #160]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056fa:	4b27      	ldr	r3, [pc, #156]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	4a26      	ldr	r2, [pc, #152]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005704:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <RCCEx_PLL3_Config+0x160>)
 800570c:	4013      	ands	r3, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	69d2      	ldr	r2, [r2, #28]
 8005712:	00d2      	lsls	r2, r2, #3
 8005714:	4920      	ldr	r1, [pc, #128]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005724:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	4a19      	ldr	r2, [pc, #100]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005732:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005736:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005738:	e00f      	b.n	800575a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d106      	bne.n	800574e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005740:	4b15      	ldr	r3, [pc, #84]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005746:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800574a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800574c:	e005      	b.n	800575a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	4a11      	ldr	r2, [pc, #68]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005758:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800575a:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a0e      	ldr	r2, [pc, #56]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005766:	f7fb fe9b 	bl	80014a0 <HAL_GetTick>
 800576a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800576c:	e008      	b.n	8005780 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800576e:	f7fb fe97 	bl	80014a0 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e006      	b.n	800578e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <RCCEx_PLL3_Config+0x15c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	58024400 	.word	0x58024400
 800579c:	ffff0007 	.word	0xffff0007

080057a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e0f1      	b.n	8005996 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a78      	ldr	r2, [pc, #480]	; (80059a0 <HAL_SPI_Init+0x200>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00f      	beq.n	80057e2 <HAL_SPI_Init+0x42>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a77      	ldr	r2, [pc, #476]	; (80059a4 <HAL_SPI_Init+0x204>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00a      	beq.n	80057e2 <HAL_SPI_Init+0x42>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a75      	ldr	r2, [pc, #468]	; (80059a8 <HAL_SPI_Init+0x208>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d005      	beq.n	80057e2 <HAL_SPI_Init+0x42>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	d901      	bls.n	80057e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0d9      	b.n	8005996 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8e2 	bl	80059ac <SPI_GetPacketSize>
 80057e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a6c      	ldr	r2, [pc, #432]	; (80059a0 <HAL_SPI_Init+0x200>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00c      	beq.n	800580e <HAL_SPI_Init+0x6e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a6a      	ldr	r2, [pc, #424]	; (80059a4 <HAL_SPI_Init+0x204>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <HAL_SPI_Init+0x6e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a69      	ldr	r2, [pc, #420]	; (80059a8 <HAL_SPI_Init+0x208>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d002      	beq.n	800580e <HAL_SPI_Init+0x6e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b08      	cmp	r3, #8
 800580c:	d811      	bhi.n	8005832 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005812:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <HAL_SPI_Init+0x200>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d009      	beq.n	800582c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a61      	ldr	r2, [pc, #388]	; (80059a4 <HAL_SPI_Init+0x204>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <HAL_SPI_Init+0x8c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a60      	ldr	r2, [pc, #384]	; (80059a8 <HAL_SPI_Init+0x208>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d104      	bne.n	8005836 <HAL_SPI_Init+0x96>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b10      	cmp	r3, #16
 8005830:	d901      	bls.n	8005836 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0af      	b.n	8005996 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fb faf4 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005872:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800587c:	d119      	bne.n	80058b2 <HAL_SPI_Init+0x112>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005886:	d103      	bne.n	8005890 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10c      	bne.n	80058b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800589c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058a0:	d107      	bne.n	80058b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	ea42 0103 	orr.w	r1, r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	ea42 0103 	orr.w	r1, r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d113      	bne.n	8005952 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005950:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40013000 	.word	0x40013000
 80059a4:	40003800 	.word	0x40003800
 80059a8:	40003c00 	.word	0x40003c00

080059ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	3307      	adds	r3, #7
 80059ca:	08db      	lsrs	r3, r3, #3
 80059cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e049      	b.n	8005a88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fb fa9f 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f000 fa75 	bl	8005f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0202 	mvn.w	r2, #2
 8005abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9fe 	bl	8005ed4 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9f0 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa01 	bl	8005ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0204 	mvn.w	r2, #4
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9d4 	bl	8005ed4 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9c6 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9d7 	bl	8005ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0208 	mvn.w	r2, #8
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9aa 	bl	8005ed4 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f99c 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f9ad 	bl	8005ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0210 	mvn.w	r2, #16
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f980 	bl	8005ed4 <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f972 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f983 	bl	8005ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0201 	mvn.w	r2, #1
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fb f80d 	bl	8000c2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b80      	cmp	r3, #128	; 0x80
 8005c20:	d10e      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d107      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fb38 	bl	80062b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d10e      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d107      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb2b 	bl	80062c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d10e      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d107      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f931 	bl	8005efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d107      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0220 	mvn.w	r2, #32
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 faeb 	bl	800629c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIM_ConfigClockSource+0x1c>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e0dc      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a64      	ldr	r2, [pc, #400]	; (8005eb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f000 80a9 	beq.w	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d28:	4a62      	ldr	r2, [pc, #392]	; (8005eb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	f200 80ae 	bhi.w	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d30:	4a61      	ldr	r2, [pc, #388]	; (8005eb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	f000 80a1 	beq.w	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d38:	4a5f      	ldr	r2, [pc, #380]	; (8005eb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	f200 80a6 	bhi.w	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d40:	4a5e      	ldr	r2, [pc, #376]	; (8005ebc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	f000 8099 	beq.w	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d48:	4a5c      	ldr	r2, [pc, #368]	; (8005ebc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	f200 809e 	bhi.w	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d54:	f000 8091 	beq.w	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d5c:	f200 8096 	bhi.w	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d64:	f000 8089 	beq.w	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6c:	f200 808e 	bhi.w	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d74:	d03e      	beq.n	8005df4 <HAL_TIM_ConfigClockSource+0x124>
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7a:	f200 8087 	bhi.w	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	f000 8086 	beq.w	8005e92 <HAL_TIM_ConfigClockSource+0x1c2>
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8a:	d87f      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d8c:	2b70      	cmp	r3, #112	; 0x70
 8005d8e:	d01a      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0xf6>
 8005d90:	2b70      	cmp	r3, #112	; 0x70
 8005d92:	d87b      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d94:	2b60      	cmp	r3, #96	; 0x60
 8005d96:	d050      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0x16a>
 8005d98:	2b60      	cmp	r3, #96	; 0x60
 8005d9a:	d877      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d9c:	2b50      	cmp	r3, #80	; 0x50
 8005d9e:	d03c      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x14a>
 8005da0:	2b50      	cmp	r3, #80	; 0x50
 8005da2:	d873      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d058      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x18a>
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d86f      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005dac:	2b30      	cmp	r3, #48	; 0x30
 8005dae:	d064      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005db0:	2b30      	cmp	r3, #48	; 0x30
 8005db2:	d86b      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d060      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d867      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d05c      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d05a      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005dc4:	e062      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6899      	ldr	r1, [r3, #8]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f000 f9b3 	bl	8006140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	609a      	str	r2, [r3, #8]
      break;
 8005df2:	e04f      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	6899      	ldr	r1, [r3, #8]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f000 f99c 	bl	8006140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e16:	609a      	str	r2, [r3, #8]
      break;
 8005e18:	e03c      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	6859      	ldr	r1, [r3, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	461a      	mov	r2, r3
 8005e28:	f000 f90c 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2150      	movs	r1, #80	; 0x50
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 f966 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 8005e38:	e02c      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f000 f92b 	bl	80060a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2160      	movs	r1, #96	; 0x60
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 f956 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 8005e58:	e01c      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f000 f8ec 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2140      	movs	r1, #64	; 0x40
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f946 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 8005e78:	e00c      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f000 f93d 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 8005e8a:	e003      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e90:	e000      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	ffceff88 	.word	0xffceff88
 8005eb4:	00100040 	.word	0x00100040
 8005eb8:	00100030 	.word	0x00100030
 8005ebc:	00100020 	.word	0x00100020

08005ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a40      	ldr	r2, [pc, #256]	; (8006024 <TIM_Base_SetConfig+0x114>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2e:	d00f      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a3d      	ldr	r2, [pc, #244]	; (8006028 <TIM_Base_SetConfig+0x118>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a3c      	ldr	r2, [pc, #240]	; (800602c <TIM_Base_SetConfig+0x11c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a3b      	ldr	r2, [pc, #236]	; (8006030 <TIM_Base_SetConfig+0x120>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a3a      	ldr	r2, [pc, #232]	; (8006034 <TIM_Base_SetConfig+0x124>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d108      	bne.n	8005f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2f      	ldr	r2, [pc, #188]	; (8006024 <TIM_Base_SetConfig+0x114>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01f      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d01b      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2c      	ldr	r2, [pc, #176]	; (8006028 <TIM_Base_SetConfig+0x118>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d017      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a2b      	ldr	r2, [pc, #172]	; (800602c <TIM_Base_SetConfig+0x11c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <TIM_Base_SetConfig+0x120>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a29      	ldr	r2, [pc, #164]	; (8006034 <TIM_Base_SetConfig+0x124>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a28      	ldr	r2, [pc, #160]	; (8006038 <TIM_Base_SetConfig+0x128>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a27      	ldr	r2, [pc, #156]	; (800603c <TIM_Base_SetConfig+0x12c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_Base_SetConfig+0x9a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a26      	ldr	r2, [pc, #152]	; (8006040 <TIM_Base_SetConfig+0x130>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d108      	bne.n	8005fbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a10      	ldr	r2, [pc, #64]	; (8006024 <TIM_Base_SetConfig+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00f      	beq.n	8006008 <TIM_Base_SetConfig+0xf8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a12      	ldr	r2, [pc, #72]	; (8006034 <TIM_Base_SetConfig+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00b      	beq.n	8006008 <TIM_Base_SetConfig+0xf8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a11      	ldr	r2, [pc, #68]	; (8006038 <TIM_Base_SetConfig+0x128>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_Base_SetConfig+0xf8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a10      	ldr	r2, [pc, #64]	; (800603c <TIM_Base_SetConfig+0x12c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_Base_SetConfig+0xf8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <TIM_Base_SetConfig+0x130>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d103      	bne.n	8006010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	615a      	str	r2, [r3, #20]
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800

08006044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 030a 	bic.w	r3, r3, #10
 8006080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b087      	sub	sp, #28
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0210 	bic.w	r2, r3, #16
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	031b      	lsls	r3, r3, #12
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <TIM_ITRx_SetConfig+0x38>)
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	f043 0307 	orr.w	r3, r3, #7
 8006126:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	609a      	str	r2, [r3, #8]
}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	ffcfff8f 	.word	0xffcfff8f

08006140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	021a      	lsls	r2, r3, #8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	431a      	orrs	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006194:	2302      	movs	r3, #2
 8006196:	e06d      	b.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a30      	ldr	r2, [pc, #192]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a2f      	ldr	r2, [pc, #188]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d108      	bne.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a20      	ldr	r2, [pc, #128]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d022      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620a:	d01d      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1c      	ldr	r2, [pc, #112]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00e      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a15      	ldr	r2, [pc, #84]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a16      	ldr	r2, [pc, #88]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d10c      	bne.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40010000 	.word	0x40010000
 8006284:	40010400 	.word	0x40010400
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40001800 	.word	0x40001800
 8006298:	40014000 	.word	0x40014000

0800629c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e042      	b.n	8006370 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fa fe63 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2224      	movs	r2, #36	; 0x24
 8006306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fbea 	bl	8006af4 <UART_SetConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e022      	b.n	8006370 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 f946 	bl	80075c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 f9cd 	bl	8007708 <UART_CheckIdleState>
 800636e:	4603      	mov	r3, r0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b0ba      	sub	sp, #232	; 0xe8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800639e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80063a6:	4013      	ands	r3, r2
 80063a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80063ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11b      	bne.n	80063ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d015      	beq.n	80063ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 835a 	beq.w	8006a96 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
      }
      return;
 80063ea:	e354      	b.n	8006a96 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 811f 	beq.w	8006634 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80063f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80063fa:	4b8b      	ldr	r3, [pc, #556]	; (8006628 <HAL_UART_IRQHandler+0x2b0>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006402:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006406:	4b89      	ldr	r3, [pc, #548]	; (800662c <HAL_UART_IRQHandler+0x2b4>)
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8112 	beq.w	8006634 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d011      	beq.n	8006440 <HAL_UART_IRQHandler+0xc8>
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2201      	movs	r2, #1
 800642e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006436:	f043 0201 	orr.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d011      	beq.n	8006470 <HAL_UART_IRQHandler+0xf8>
 800644c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2202      	movs	r2, #2
 800645e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006466:	f043 0204 	orr.w	r2, r3, #4
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d011      	beq.n	80064a0 <HAL_UART_IRQHandler+0x128>
 800647c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2204      	movs	r2, #4
 800648e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006496:	f043 0202 	orr.w	r2, r3, #2
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d017      	beq.n	80064dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d105      	bne.n	80064c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064bc:	4b5a      	ldr	r3, [pc, #360]	; (8006628 <HAL_UART_IRQHandler+0x2b0>)
 80064be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2208      	movs	r2, #8
 80064ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d2:	f043 0208 	orr.w	r2, r3, #8
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <HAL_UART_IRQHandler+0x196>
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00c      	beq.n	800650e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 82c0 	beq.w	8006a9a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006554:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d005      	beq.n	8006572 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800656a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04f      	beq.n	8006612 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 f9dc 	bl	8007930 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d141      	bne.n	800660a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800659c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1d9      	bne.n	8006586 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d013      	beq.n	8006602 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065de:	4a14      	ldr	r2, [pc, #80]	; (8006630 <HAL_UART_IRQHandler+0x2b8>)
 80065e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fb fbd8 	bl	8001d9c <HAL_DMA_Abort_IT>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d017      	beq.n	8006622 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80065fc:	4610      	mov	r0, r2
 80065fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	e00f      	b.n	8006622 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa60 	bl	8006ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e00b      	b.n	8006622 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa5c 	bl	8006ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006610:	e007      	b.n	8006622 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa58 	bl	8006ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006620:	e23b      	b.n	8006a9a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006622:	bf00      	nop
    return;
 8006624:	e239      	b.n	8006a9a <HAL_UART_IRQHandler+0x722>
 8006626:	bf00      	nop
 8006628:	10000001 	.word	0x10000001
 800662c:	04000120 	.word	0x04000120
 8006630:	080079fd 	.word	0x080079fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006638:	2b01      	cmp	r3, #1
 800663a:	f040 81ce 	bne.w	80069da <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 81c7 	beq.w	80069da <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 81c0 	beq.w	80069da <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2210      	movs	r2, #16
 8006660:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	f040 813b 	bne.w	80068e8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a8b      	ldr	r2, [pc, #556]	; (80068a8 <HAL_UART_IRQHandler+0x530>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d059      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a89      	ldr	r2, [pc, #548]	; (80068ac <HAL_UART_IRQHandler+0x534>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d053      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a87      	ldr	r2, [pc, #540]	; (80068b0 <HAL_UART_IRQHandler+0x538>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d04d      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a85      	ldr	r2, [pc, #532]	; (80068b4 <HAL_UART_IRQHandler+0x53c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d047      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a83      	ldr	r2, [pc, #524]	; (80068b8 <HAL_UART_IRQHandler+0x540>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d041      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a81      	ldr	r2, [pc, #516]	; (80068bc <HAL_UART_IRQHandler+0x544>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d03b      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a7f      	ldr	r2, [pc, #508]	; (80068c0 <HAL_UART_IRQHandler+0x548>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d035      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a7d      	ldr	r2, [pc, #500]	; (80068c4 <HAL_UART_IRQHandler+0x54c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d02f      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7b      	ldr	r2, [pc, #492]	; (80068c8 <HAL_UART_IRQHandler+0x550>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d029      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a79      	ldr	r2, [pc, #484]	; (80068cc <HAL_UART_IRQHandler+0x554>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d023      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a77      	ldr	r2, [pc, #476]	; (80068d0 <HAL_UART_IRQHandler+0x558>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a75      	ldr	r2, [pc, #468]	; (80068d4 <HAL_UART_IRQHandler+0x55c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d017      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a73      	ldr	r2, [pc, #460]	; (80068d8 <HAL_UART_IRQHandler+0x560>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d011      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a71      	ldr	r2, [pc, #452]	; (80068dc <HAL_UART_IRQHandler+0x564>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00b      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a6f      	ldr	r2, [pc, #444]	; (80068e0 <HAL_UART_IRQHandler+0x568>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d005      	beq.n	8006732 <HAL_UART_IRQHandler+0x3ba>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a6d      	ldr	r2, [pc, #436]	; (80068e4 <HAL_UART_IRQHandler+0x56c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d105      	bne.n	800673e <HAL_UART_IRQHandler+0x3c6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	b29b      	uxth	r3, r3
 800673c:	e004      	b.n	8006748 <HAL_UART_IRQHandler+0x3d0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800674c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 81a4 	beq.w	8006a9e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800675c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006760:	429a      	cmp	r2, r3
 8006762:	f080 819c 	bcs.w	8006a9e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800676c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800677a:	f000 8086 	beq.w	800688a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800679a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1da      	bne.n	800677e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3308      	adds	r3, #8
 80067e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e1      	bne.n	80067c8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006828:	66fa      	str	r2, [r7, #108]	; 0x6c
 800682a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800682e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e3      	bne.n	8006804 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800686c:	65bb      	str	r3, [r7, #88]	; 0x58
 800686e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800687a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e4      	bne.n	800684a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006884:	4618      	mov	r0, r3
 8006886:	f7fa ff6b 	bl	8001760 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006896:	b29b      	uxth	r3, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	b29b      	uxth	r3, r3
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f91c 	bl	8006adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068a4:	e0fb      	b.n	8006a9e <HAL_UART_IRQHandler+0x726>
 80068a6:	bf00      	nop
 80068a8:	40020010 	.word	0x40020010
 80068ac:	40020028 	.word	0x40020028
 80068b0:	40020040 	.word	0x40020040
 80068b4:	40020058 	.word	0x40020058
 80068b8:	40020070 	.word	0x40020070
 80068bc:	40020088 	.word	0x40020088
 80068c0:	400200a0 	.word	0x400200a0
 80068c4:	400200b8 	.word	0x400200b8
 80068c8:	40020410 	.word	0x40020410
 80068cc:	40020428 	.word	0x40020428
 80068d0:	40020440 	.word	0x40020440
 80068d4:	40020458 	.word	0x40020458
 80068d8:	40020470 	.word	0x40020470
 80068dc:	40020488 	.word	0x40020488
 80068e0:	400204a0 	.word	0x400204a0
 80068e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80cc 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800690a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80c7 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006936:	647b      	str	r3, [r7, #68]	; 0x44
 8006938:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800693c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e4      	bne.n	8006914 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	623b      	str	r3, [r7, #32]
   return(result);
 800695a:	6a3a      	ldr	r2, [r7, #32]
 800695c:	4b54      	ldr	r3, [pc, #336]	; (8006ab0 <HAL_UART_IRQHandler+0x738>)
 800695e:	4013      	ands	r3, r2
 8006960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800696e:	633a      	str	r2, [r7, #48]	; 0x30
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e3      	bne.n	800694a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0310 	bic.w	r3, r3, #16
 80069aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	69b9      	ldr	r1, [r7, #24]
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	617b      	str	r3, [r7, #20]
   return(result);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e4      	bne.n	8006996 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f882 	bl	8006adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069d8:	e063      	b.n	8006aa2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <HAL_UART_IRQHandler+0x68c>
 80069e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f83e 	bl	8007a7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a02:	e051      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d014      	beq.n	8006a3a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d105      	bne.n	8006a28 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d03a      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
    }
    return;
 8006a38:	e035      	b.n	8006aa6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <HAL_UART_IRQHandler+0x6e2>
 8006a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 ffe8 	bl	8007a28 <UART_EndTransmit_IT>
    return;
 8006a58:	e026      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_UART_IRQHandler+0x702>
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 f817 	bl	8007aa6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a78:	e016      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d010      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x730>
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da0c      	bge.n	8006aa8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ffff 	bl	8007a92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a94:	e008      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
      return;
 8006a96:	bf00      	nop
 8006a98:	e006      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
    return;
 8006a9a:	bf00      	nop
 8006a9c:	e004      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
      return;
 8006a9e:	bf00      	nop
 8006aa0:	e002      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
      return;
 8006aa2:	bf00      	nop
 8006aa4:	e000      	b.n	8006aa8 <HAL_UART_IRQHandler+0x730>
    return;
 8006aa6:	bf00      	nop
  }
}
 8006aa8:	37e8      	adds	r7, #232	; 0xe8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	effffffe 	.word	0xeffffffe

08006ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af8:	b092      	sub	sp, #72	; 0x48
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4bbe      	ldr	r3, [pc, #760]	; (8006e1c <UART_SetConfig+0x328>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4ab3      	ldr	r2, [pc, #716]	; (8006e20 <UART_SetConfig+0x32c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	4baf      	ldr	r3, [pc, #700]	; (8006e24 <UART_SetConfig+0x330>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b70:	430b      	orrs	r3, r1
 8006b72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	f023 010f 	bic.w	r1, r3, #15
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4aa6      	ldr	r2, [pc, #664]	; (8006e28 <UART_SetConfig+0x334>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d177      	bne.n	8006c84 <UART_SetConfig+0x190>
 8006b94:	4ba5      	ldr	r3, [pc, #660]	; (8006e2c <UART_SetConfig+0x338>)
 8006b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b9c:	2b28      	cmp	r3, #40	; 0x28
 8006b9e:	d86d      	bhi.n	8006c7c <UART_SetConfig+0x188>
 8006ba0:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <UART_SetConfig+0xb4>)
 8006ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba6:	bf00      	nop
 8006ba8:	08006c4d 	.word	0x08006c4d
 8006bac:	08006c7d 	.word	0x08006c7d
 8006bb0:	08006c7d 	.word	0x08006c7d
 8006bb4:	08006c7d 	.word	0x08006c7d
 8006bb8:	08006c7d 	.word	0x08006c7d
 8006bbc:	08006c7d 	.word	0x08006c7d
 8006bc0:	08006c7d 	.word	0x08006c7d
 8006bc4:	08006c7d 	.word	0x08006c7d
 8006bc8:	08006c55 	.word	0x08006c55
 8006bcc:	08006c7d 	.word	0x08006c7d
 8006bd0:	08006c7d 	.word	0x08006c7d
 8006bd4:	08006c7d 	.word	0x08006c7d
 8006bd8:	08006c7d 	.word	0x08006c7d
 8006bdc:	08006c7d 	.word	0x08006c7d
 8006be0:	08006c7d 	.word	0x08006c7d
 8006be4:	08006c7d 	.word	0x08006c7d
 8006be8:	08006c5d 	.word	0x08006c5d
 8006bec:	08006c7d 	.word	0x08006c7d
 8006bf0:	08006c7d 	.word	0x08006c7d
 8006bf4:	08006c7d 	.word	0x08006c7d
 8006bf8:	08006c7d 	.word	0x08006c7d
 8006bfc:	08006c7d 	.word	0x08006c7d
 8006c00:	08006c7d 	.word	0x08006c7d
 8006c04:	08006c7d 	.word	0x08006c7d
 8006c08:	08006c65 	.word	0x08006c65
 8006c0c:	08006c7d 	.word	0x08006c7d
 8006c10:	08006c7d 	.word	0x08006c7d
 8006c14:	08006c7d 	.word	0x08006c7d
 8006c18:	08006c7d 	.word	0x08006c7d
 8006c1c:	08006c7d 	.word	0x08006c7d
 8006c20:	08006c7d 	.word	0x08006c7d
 8006c24:	08006c7d 	.word	0x08006c7d
 8006c28:	08006c6d 	.word	0x08006c6d
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c7d 	.word	0x08006c7d
 8006c38:	08006c7d 	.word	0x08006c7d
 8006c3c:	08006c7d 	.word	0x08006c7d
 8006c40:	08006c7d 	.word	0x08006c7d
 8006c44:	08006c7d 	.word	0x08006c7d
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c52:	e222      	b.n	800709a <UART_SetConfig+0x5a6>
 8006c54:	2304      	movs	r3, #4
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e21e      	b.n	800709a <UART_SetConfig+0x5a6>
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e21a      	b.n	800709a <UART_SetConfig+0x5a6>
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e216      	b.n	800709a <UART_SetConfig+0x5a6>
 8006c6c:	2320      	movs	r3, #32
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c72:	e212      	b.n	800709a <UART_SetConfig+0x5a6>
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7a:	e20e      	b.n	800709a <UART_SetConfig+0x5a6>
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c82:	e20a      	b.n	800709a <UART_SetConfig+0x5a6>
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a69      	ldr	r2, [pc, #420]	; (8006e30 <UART_SetConfig+0x33c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d130      	bne.n	8006cf0 <UART_SetConfig+0x1fc>
 8006c8e:	4b67      	ldr	r3, [pc, #412]	; (8006e2c <UART_SetConfig+0x338>)
 8006c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	2b05      	cmp	r3, #5
 8006c98:	d826      	bhi.n	8006ce8 <UART_SetConfig+0x1f4>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x1ac>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cb9 	.word	0x08006cb9
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	08006cc9 	.word	0x08006cc9
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cbe:	e1ec      	b.n	800709a <UART_SetConfig+0x5a6>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc6:	e1e8      	b.n	800709a <UART_SetConfig+0x5a6>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cce:	e1e4      	b.n	800709a <UART_SetConfig+0x5a6>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd6:	e1e0      	b.n	800709a <UART_SetConfig+0x5a6>
 8006cd8:	2320      	movs	r3, #32
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cde:	e1dc      	b.n	800709a <UART_SetConfig+0x5a6>
 8006ce0:	2340      	movs	r3, #64	; 0x40
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce6:	e1d8      	b.n	800709a <UART_SetConfig+0x5a6>
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cee:	e1d4      	b.n	800709a <UART_SetConfig+0x5a6>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a4f      	ldr	r2, [pc, #316]	; (8006e34 <UART_SetConfig+0x340>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d130      	bne.n	8006d5c <UART_SetConfig+0x268>
 8006cfa:	4b4c      	ldr	r3, [pc, #304]	; (8006e2c <UART_SetConfig+0x338>)
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b05      	cmp	r3, #5
 8006d04:	d826      	bhi.n	8006d54 <UART_SetConfig+0x260>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <UART_SetConfig+0x218>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d25 	.word	0x08006d25
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d35 	.word	0x08006d35
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d4d 	.word	0x08006d4d
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2a:	e1b6      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d32:	e1b2      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3a:	e1ae      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d42:	e1aa      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d44:	2320      	movs	r3, #32
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4a:	e1a6      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d4c:	2340      	movs	r3, #64	; 0x40
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d52:	e1a2      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d54:	2380      	movs	r3, #128	; 0x80
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5a:	e19e      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <UART_SetConfig+0x344>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d130      	bne.n	8006dc8 <UART_SetConfig+0x2d4>
 8006d66:	4b31      	ldr	r3, [pc, #196]	; (8006e2c <UART_SetConfig+0x338>)
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	d826      	bhi.n	8006dc0 <UART_SetConfig+0x2cc>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0x284>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006d91 	.word	0x08006d91
 8006d7c:	08006d99 	.word	0x08006d99
 8006d80:	08006da1 	.word	0x08006da1
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d96:	e180      	b.n	800709a <UART_SetConfig+0x5a6>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9e:	e17c      	b.n	800709a <UART_SetConfig+0x5a6>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da6:	e178      	b.n	800709a <UART_SetConfig+0x5a6>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dae:	e174      	b.n	800709a <UART_SetConfig+0x5a6>
 8006db0:	2320      	movs	r3, #32
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db6:	e170      	b.n	800709a <UART_SetConfig+0x5a6>
 8006db8:	2340      	movs	r3, #64	; 0x40
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e16c      	b.n	800709a <UART_SetConfig+0x5a6>
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e168      	b.n	800709a <UART_SetConfig+0x5a6>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	; (8006e3c <UART_SetConfig+0x348>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d142      	bne.n	8006e58 <UART_SetConfig+0x364>
 8006dd2:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <UART_SetConfig+0x338>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d838      	bhi.n	8006e50 <UART_SetConfig+0x35c>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x2f0>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e41 	.word	0x08006e41
 8006df8:	08006e49 	.word	0x08006e49
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e02:	e14a      	b.n	800709a <UART_SetConfig+0x5a6>
 8006e04:	2304      	movs	r3, #4
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0a:	e146      	b.n	800709a <UART_SetConfig+0x5a6>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e12:	e142      	b.n	800709a <UART_SetConfig+0x5a6>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e13e      	b.n	800709a <UART_SetConfig+0x5a6>
 8006e1c:	cfff69f3 	.word	0xcfff69f3
 8006e20:	58000c00 	.word	0x58000c00
 8006e24:	11fff4ff 	.word	0x11fff4ff
 8006e28:	40011000 	.word	0x40011000
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	40004400 	.word	0x40004400
 8006e34:	40004800 	.word	0x40004800
 8006e38:	40004c00 	.word	0x40004c00
 8006e3c:	40005000 	.word	0x40005000
 8006e40:	2320      	movs	r3, #32
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e128      	b.n	800709a <UART_SetConfig+0x5a6>
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e124      	b.n	800709a <UART_SetConfig+0x5a6>
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e56:	e120      	b.n	800709a <UART_SetConfig+0x5a6>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4acb      	ldr	r2, [pc, #812]	; (800718c <UART_SetConfig+0x698>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d176      	bne.n	8006f50 <UART_SetConfig+0x45c>
 8006e62:	4bcb      	ldr	r3, [pc, #812]	; (8007190 <UART_SetConfig+0x69c>)
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e6a:	2b28      	cmp	r3, #40	; 0x28
 8006e6c:	d86c      	bhi.n	8006f48 <UART_SetConfig+0x454>
 8006e6e:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <UART_SetConfig+0x380>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006f19 	.word	0x08006f19
 8006e78:	08006f49 	.word	0x08006f49
 8006e7c:	08006f49 	.word	0x08006f49
 8006e80:	08006f49 	.word	0x08006f49
 8006e84:	08006f49 	.word	0x08006f49
 8006e88:	08006f49 	.word	0x08006f49
 8006e8c:	08006f49 	.word	0x08006f49
 8006e90:	08006f49 	.word	0x08006f49
 8006e94:	08006f21 	.word	0x08006f21
 8006e98:	08006f49 	.word	0x08006f49
 8006e9c:	08006f49 	.word	0x08006f49
 8006ea0:	08006f49 	.word	0x08006f49
 8006ea4:	08006f49 	.word	0x08006f49
 8006ea8:	08006f49 	.word	0x08006f49
 8006eac:	08006f49 	.word	0x08006f49
 8006eb0:	08006f49 	.word	0x08006f49
 8006eb4:	08006f29 	.word	0x08006f29
 8006eb8:	08006f49 	.word	0x08006f49
 8006ebc:	08006f49 	.word	0x08006f49
 8006ec0:	08006f49 	.word	0x08006f49
 8006ec4:	08006f49 	.word	0x08006f49
 8006ec8:	08006f49 	.word	0x08006f49
 8006ecc:	08006f49 	.word	0x08006f49
 8006ed0:	08006f49 	.word	0x08006f49
 8006ed4:	08006f31 	.word	0x08006f31
 8006ed8:	08006f49 	.word	0x08006f49
 8006edc:	08006f49 	.word	0x08006f49
 8006ee0:	08006f49 	.word	0x08006f49
 8006ee4:	08006f49 	.word	0x08006f49
 8006ee8:	08006f49 	.word	0x08006f49
 8006eec:	08006f49 	.word	0x08006f49
 8006ef0:	08006f49 	.word	0x08006f49
 8006ef4:	08006f39 	.word	0x08006f39
 8006ef8:	08006f49 	.word	0x08006f49
 8006efc:	08006f49 	.word	0x08006f49
 8006f00:	08006f49 	.word	0x08006f49
 8006f04:	08006f49 	.word	0x08006f49
 8006f08:	08006f49 	.word	0x08006f49
 8006f0c:	08006f49 	.word	0x08006f49
 8006f10:	08006f49 	.word	0x08006f49
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1e:	e0bc      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f20:	2304      	movs	r3, #4
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f26:	e0b8      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f28:	2308      	movs	r3, #8
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2e:	e0b4      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f30:	2310      	movs	r3, #16
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f36:	e0b0      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f38:	2320      	movs	r3, #32
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3e:	e0ac      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f40:	2340      	movs	r3, #64	; 0x40
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f46:	e0a8      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4e:	e0a4      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a8f      	ldr	r2, [pc, #572]	; (8007194 <UART_SetConfig+0x6a0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d130      	bne.n	8006fbc <UART_SetConfig+0x4c8>
 8006f5a:	4b8d      	ldr	r3, [pc, #564]	; (8007190 <UART_SetConfig+0x69c>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b05      	cmp	r3, #5
 8006f64:	d826      	bhi.n	8006fb4 <UART_SetConfig+0x4c0>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <UART_SetConfig+0x478>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006f85 	.word	0x08006f85
 8006f70:	08006f8d 	.word	0x08006f8d
 8006f74:	08006f95 	.word	0x08006f95
 8006f78:	08006f9d 	.word	0x08006f9d
 8006f7c:	08006fa5 	.word	0x08006fa5
 8006f80:	08006fad 	.word	0x08006fad
 8006f84:	2300      	movs	r3, #0
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e086      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f92:	e082      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f94:	2308      	movs	r3, #8
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9a:	e07e      	b.n	800709a <UART_SetConfig+0x5a6>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa2:	e07a      	b.n	800709a <UART_SetConfig+0x5a6>
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006faa:	e076      	b.n	800709a <UART_SetConfig+0x5a6>
 8006fac:	2340      	movs	r3, #64	; 0x40
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb2:	e072      	b.n	800709a <UART_SetConfig+0x5a6>
 8006fb4:	2380      	movs	r3, #128	; 0x80
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fba:	e06e      	b.n	800709a <UART_SetConfig+0x5a6>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a75      	ldr	r2, [pc, #468]	; (8007198 <UART_SetConfig+0x6a4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d130      	bne.n	8007028 <UART_SetConfig+0x534>
 8006fc6:	4b72      	ldr	r3, [pc, #456]	; (8007190 <UART_SetConfig+0x69c>)
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d826      	bhi.n	8007020 <UART_SetConfig+0x52c>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <UART_SetConfig+0x4e4>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006ff1 	.word	0x08006ff1
 8006fdc:	08006ff9 	.word	0x08006ff9
 8006fe0:	08007001 	.word	0x08007001
 8006fe4:	08007009 	.word	0x08007009
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e050      	b.n	800709a <UART_SetConfig+0x5a6>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffe:	e04c      	b.n	800709a <UART_SetConfig+0x5a6>
 8007000:	2308      	movs	r3, #8
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007006:	e048      	b.n	800709a <UART_SetConfig+0x5a6>
 8007008:	2310      	movs	r3, #16
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700e:	e044      	b.n	800709a <UART_SetConfig+0x5a6>
 8007010:	2320      	movs	r3, #32
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007016:	e040      	b.n	800709a <UART_SetConfig+0x5a6>
 8007018:	2340      	movs	r3, #64	; 0x40
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701e:	e03c      	b.n	800709a <UART_SetConfig+0x5a6>
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e038      	b.n	800709a <UART_SetConfig+0x5a6>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a5b      	ldr	r2, [pc, #364]	; (800719c <UART_SetConfig+0x6a8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d130      	bne.n	8007094 <UART_SetConfig+0x5a0>
 8007032:	4b57      	ldr	r3, [pc, #348]	; (8007190 <UART_SetConfig+0x69c>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b05      	cmp	r3, #5
 800703c:	d826      	bhi.n	800708c <UART_SetConfig+0x598>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <UART_SetConfig+0x550>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	0800705d 	.word	0x0800705d
 8007048:	08007065 	.word	0x08007065
 800704c:	0800706d 	.word	0x0800706d
 8007050:	08007075 	.word	0x08007075
 8007054:	0800707d 	.word	0x0800707d
 8007058:	08007085 	.word	0x08007085
 800705c:	2302      	movs	r3, #2
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e01a      	b.n	800709a <UART_SetConfig+0x5a6>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e016      	b.n	800709a <UART_SetConfig+0x5a6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e012      	b.n	800709a <UART_SetConfig+0x5a6>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707a:	e00e      	b.n	800709a <UART_SetConfig+0x5a6>
 800707c:	2320      	movs	r3, #32
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e00a      	b.n	800709a <UART_SetConfig+0x5a6>
 8007084:	2340      	movs	r3, #64	; 0x40
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708a:	e006      	b.n	800709a <UART_SetConfig+0x5a6>
 800708c:	2380      	movs	r3, #128	; 0x80
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e002      	b.n	800709a <UART_SetConfig+0x5a6>
 8007094:	2380      	movs	r3, #128	; 0x80
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a3f      	ldr	r2, [pc, #252]	; (800719c <UART_SetConfig+0x6a8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	f040 80f8 	bne.w	8007296 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	dc46      	bgt.n	800713c <UART_SetConfig+0x648>
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	f2c0 8082 	blt.w	80071b8 <UART_SetConfig+0x6c4>
 80070b4:	3b02      	subs	r3, #2
 80070b6:	2b1e      	cmp	r3, #30
 80070b8:	d87e      	bhi.n	80071b8 <UART_SetConfig+0x6c4>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <UART_SetConfig+0x5cc>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	08007143 	.word	0x08007143
 80070c4:	080071b9 	.word	0x080071b9
 80070c8:	0800714b 	.word	0x0800714b
 80070cc:	080071b9 	.word	0x080071b9
 80070d0:	080071b9 	.word	0x080071b9
 80070d4:	080071b9 	.word	0x080071b9
 80070d8:	0800715b 	.word	0x0800715b
 80070dc:	080071b9 	.word	0x080071b9
 80070e0:	080071b9 	.word	0x080071b9
 80070e4:	080071b9 	.word	0x080071b9
 80070e8:	080071b9 	.word	0x080071b9
 80070ec:	080071b9 	.word	0x080071b9
 80070f0:	080071b9 	.word	0x080071b9
 80070f4:	080071b9 	.word	0x080071b9
 80070f8:	0800716b 	.word	0x0800716b
 80070fc:	080071b9 	.word	0x080071b9
 8007100:	080071b9 	.word	0x080071b9
 8007104:	080071b9 	.word	0x080071b9
 8007108:	080071b9 	.word	0x080071b9
 800710c:	080071b9 	.word	0x080071b9
 8007110:	080071b9 	.word	0x080071b9
 8007114:	080071b9 	.word	0x080071b9
 8007118:	080071b9 	.word	0x080071b9
 800711c:	080071b9 	.word	0x080071b9
 8007120:	080071b9 	.word	0x080071b9
 8007124:	080071b9 	.word	0x080071b9
 8007128:	080071b9 	.word	0x080071b9
 800712c:	080071b9 	.word	0x080071b9
 8007130:	080071b9 	.word	0x080071b9
 8007134:	080071b9 	.word	0x080071b9
 8007138:	080071ab 	.word	0x080071ab
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d037      	beq.n	80071b0 <UART_SetConfig+0x6bc>
 8007140:	e03a      	b.n	80071b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007142:	f7fd ff0b 	bl	8004f5c <HAL_RCCEx_GetD3PCLK1Freq>
 8007146:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007148:	e03c      	b.n	80071c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800714e:	4618      	mov	r0, r3
 8007150:	f7fd ff1a 	bl	8004f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007158:	e034      	b.n	80071c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800715a:	f107 0318 	add.w	r3, r7, #24
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe f866 	bl	8005230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007168:	e02c      	b.n	80071c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716a:	4b09      	ldr	r3, [pc, #36]	; (8007190 <UART_SetConfig+0x69c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d016      	beq.n	80071a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007176:	4b06      	ldr	r3, [pc, #24]	; (8007190 <UART_SetConfig+0x69c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	08db      	lsrs	r3, r3, #3
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	4a07      	ldr	r2, [pc, #28]	; (80071a0 <UART_SetConfig+0x6ac>)
 8007182:	fa22 f303 	lsr.w	r3, r2, r3
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007188:	e01c      	b.n	80071c4 <UART_SetConfig+0x6d0>
 800718a:	bf00      	nop
 800718c:	40011400 	.word	0x40011400
 8007190:	58024400 	.word	0x58024400
 8007194:	40007800 	.word	0x40007800
 8007198:	40007c00 	.word	0x40007c00
 800719c:	58000c00 	.word	0x58000c00
 80071a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80071a4:	4b9d      	ldr	r3, [pc, #628]	; (800741c <UART_SetConfig+0x928>)
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a8:	e00c      	b.n	80071c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071aa:	4b9d      	ldr	r3, [pc, #628]	; (8007420 <UART_SetConfig+0x92c>)
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ae:	e009      	b.n	80071c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b6:	e005      	b.n	80071c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 81de 	beq.w	8007588 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	4a94      	ldr	r2, [pc, #592]	; (8007424 <UART_SetConfig+0x930>)
 80071d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d6:	461a      	mov	r2, r3
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	fbb3 f3f2 	udiv	r3, r3, r2
 80071de:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	4413      	add	r3, r2
 80071ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d305      	bcc.n	80071fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d903      	bls.n	8007204 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007202:	e1c1      	b.n	8007588 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	2200      	movs	r2, #0
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	60fa      	str	r2, [r7, #12]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	4a84      	ldr	r2, [pc, #528]	; (8007424 <UART_SetConfig+0x930>)
 8007212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007216:	b29b      	uxth	r3, r3
 8007218:	2200      	movs	r2, #0
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007226:	f7f9 f857 	bl	80002d8 <__aeabi_uldivmod>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	020b      	lsls	r3, r1, #8
 800723c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007240:	0202      	lsls	r2, r0, #8
 8007242:	6979      	ldr	r1, [r7, #20]
 8007244:	6849      	ldr	r1, [r1, #4]
 8007246:	0849      	lsrs	r1, r1, #1
 8007248:	2000      	movs	r0, #0
 800724a:	460c      	mov	r4, r1
 800724c:	4605      	mov	r5, r0
 800724e:	eb12 0804 	adds.w	r8, r2, r4
 8007252:	eb43 0905 	adc.w	r9, r3, r5
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	469a      	mov	sl, r3
 800725e:	4693      	mov	fp, r2
 8007260:	4652      	mov	r2, sl
 8007262:	465b      	mov	r3, fp
 8007264:	4640      	mov	r0, r8
 8007266:	4649      	mov	r1, r9
 8007268:	f7f9 f836 	bl	80002d8 <__aeabi_uldivmod>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4613      	mov	r3, r2
 8007272:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800727a:	d308      	bcc.n	800728e <UART_SetConfig+0x79a>
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007282:	d204      	bcs.n	800728e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728a:	60da      	str	r2, [r3, #12]
 800728c:	e17c      	b.n	8007588 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007294:	e178      	b.n	8007588 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800729e:	f040 80c5 	bne.w	800742c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80072a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	dc48      	bgt.n	800733c <UART_SetConfig+0x848>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	db7b      	blt.n	80073a6 <UART_SetConfig+0x8b2>
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d879      	bhi.n	80073a6 <UART_SetConfig+0x8b2>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <UART_SetConfig+0x7c4>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	08007343 	.word	0x08007343
 80072bc:	0800734b 	.word	0x0800734b
 80072c0:	080073a7 	.word	0x080073a7
 80072c4:	080073a7 	.word	0x080073a7
 80072c8:	08007353 	.word	0x08007353
 80072cc:	080073a7 	.word	0x080073a7
 80072d0:	080073a7 	.word	0x080073a7
 80072d4:	080073a7 	.word	0x080073a7
 80072d8:	08007363 	.word	0x08007363
 80072dc:	080073a7 	.word	0x080073a7
 80072e0:	080073a7 	.word	0x080073a7
 80072e4:	080073a7 	.word	0x080073a7
 80072e8:	080073a7 	.word	0x080073a7
 80072ec:	080073a7 	.word	0x080073a7
 80072f0:	080073a7 	.word	0x080073a7
 80072f4:	080073a7 	.word	0x080073a7
 80072f8:	08007373 	.word	0x08007373
 80072fc:	080073a7 	.word	0x080073a7
 8007300:	080073a7 	.word	0x080073a7
 8007304:	080073a7 	.word	0x080073a7
 8007308:	080073a7 	.word	0x080073a7
 800730c:	080073a7 	.word	0x080073a7
 8007310:	080073a7 	.word	0x080073a7
 8007314:	080073a7 	.word	0x080073a7
 8007318:	080073a7 	.word	0x080073a7
 800731c:	080073a7 	.word	0x080073a7
 8007320:	080073a7 	.word	0x080073a7
 8007324:	080073a7 	.word	0x080073a7
 8007328:	080073a7 	.word	0x080073a7
 800732c:	080073a7 	.word	0x080073a7
 8007330:	080073a7 	.word	0x080073a7
 8007334:	080073a7 	.word	0x080073a7
 8007338:	08007399 	.word	0x08007399
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d02e      	beq.n	800739e <UART_SetConfig+0x8aa>
 8007340:	e031      	b.n	80073a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007342:	f7fc fe99 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 8007346:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007348:	e033      	b.n	80073b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800734a:	f7fc feab 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 800734e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007350:	e02f      	b.n	80073b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd fe16 	bl	8004f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007360:	e027      	b.n	80073b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007362:	f107 0318 	add.w	r3, r7, #24
 8007366:	4618      	mov	r0, r3
 8007368:	f7fd ff62 	bl	8005230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007370:	e01f      	b.n	80073b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007372:	4b2d      	ldr	r3, [pc, #180]	; (8007428 <UART_SetConfig+0x934>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800737e:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <UART_SetConfig+0x934>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	08db      	lsrs	r3, r3, #3
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	4a24      	ldr	r2, [pc, #144]	; (800741c <UART_SetConfig+0x928>)
 800738a:	fa22 f303 	lsr.w	r3, r2, r3
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007390:	e00f      	b.n	80073b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007392:	4b22      	ldr	r3, [pc, #136]	; (800741c <UART_SetConfig+0x928>)
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007396:	e00c      	b.n	80073b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007398:	4b21      	ldr	r3, [pc, #132]	; (8007420 <UART_SetConfig+0x92c>)
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739c:	e009      	b.n	80073b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a4:	e005      	b.n	80073b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80e7 	beq.w	8007588 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	4a19      	ldr	r2, [pc, #100]	; (8007424 <UART_SetConfig+0x930>)
 80073c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073cc:	005a      	lsls	r2, r3, #1
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	441a      	add	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	2b0f      	cmp	r3, #15
 80073e4:	d916      	bls.n	8007414 <UART_SetConfig+0x920>
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ec:	d212      	bcs.n	8007414 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f023 030f 	bic.w	r3, r3, #15
 80073f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	b29a      	uxth	r2, r3
 8007404:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007406:	4313      	orrs	r3, r2
 8007408:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007410:	60da      	str	r2, [r3, #12]
 8007412:	e0b9      	b.n	8007588 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800741a:	e0b5      	b.n	8007588 <UART_SetConfig+0xa94>
 800741c:	03d09000 	.word	0x03d09000
 8007420:	003d0900 	.word	0x003d0900
 8007424:	08008354 	.word	0x08008354
 8007428:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800742c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007430:	2b20      	cmp	r3, #32
 8007432:	dc49      	bgt.n	80074c8 <UART_SetConfig+0x9d4>
 8007434:	2b00      	cmp	r3, #0
 8007436:	db7c      	blt.n	8007532 <UART_SetConfig+0xa3e>
 8007438:	2b20      	cmp	r3, #32
 800743a:	d87a      	bhi.n	8007532 <UART_SetConfig+0xa3e>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x950>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	080074cf 	.word	0x080074cf
 8007448:	080074d7 	.word	0x080074d7
 800744c:	08007533 	.word	0x08007533
 8007450:	08007533 	.word	0x08007533
 8007454:	080074df 	.word	0x080074df
 8007458:	08007533 	.word	0x08007533
 800745c:	08007533 	.word	0x08007533
 8007460:	08007533 	.word	0x08007533
 8007464:	080074ef 	.word	0x080074ef
 8007468:	08007533 	.word	0x08007533
 800746c:	08007533 	.word	0x08007533
 8007470:	08007533 	.word	0x08007533
 8007474:	08007533 	.word	0x08007533
 8007478:	08007533 	.word	0x08007533
 800747c:	08007533 	.word	0x08007533
 8007480:	08007533 	.word	0x08007533
 8007484:	080074ff 	.word	0x080074ff
 8007488:	08007533 	.word	0x08007533
 800748c:	08007533 	.word	0x08007533
 8007490:	08007533 	.word	0x08007533
 8007494:	08007533 	.word	0x08007533
 8007498:	08007533 	.word	0x08007533
 800749c:	08007533 	.word	0x08007533
 80074a0:	08007533 	.word	0x08007533
 80074a4:	08007533 	.word	0x08007533
 80074a8:	08007533 	.word	0x08007533
 80074ac:	08007533 	.word	0x08007533
 80074b0:	08007533 	.word	0x08007533
 80074b4:	08007533 	.word	0x08007533
 80074b8:	08007533 	.word	0x08007533
 80074bc:	08007533 	.word	0x08007533
 80074c0:	08007533 	.word	0x08007533
 80074c4:	08007525 	.word	0x08007525
 80074c8:	2b40      	cmp	r3, #64	; 0x40
 80074ca:	d02e      	beq.n	800752a <UART_SetConfig+0xa36>
 80074cc:	e031      	b.n	8007532 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ce:	f7fc fdd3 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 80074d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074d4:	e033      	b.n	800753e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d6:	f7fc fde5 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 80074da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074dc:	e02f      	b.n	800753e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fd fd50 	bl	8004f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ec:	e027      	b.n	800753e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ee:	f107 0318 	add.w	r3, r7, #24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd fe9c 	bl	8005230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074fc:	e01f      	b.n	800753e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074fe:	4b2d      	ldr	r3, [pc, #180]	; (80075b4 <UART_SetConfig+0xac0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800750a:	4b2a      	ldr	r3, [pc, #168]	; (80075b4 <UART_SetConfig+0xac0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	08db      	lsrs	r3, r3, #3
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	4a28      	ldr	r2, [pc, #160]	; (80075b8 <UART_SetConfig+0xac4>)
 8007516:	fa22 f303 	lsr.w	r3, r2, r3
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800751c:	e00f      	b.n	800753e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800751e:	4b26      	ldr	r3, [pc, #152]	; (80075b8 <UART_SetConfig+0xac4>)
 8007520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007522:	e00c      	b.n	800753e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007524:	4b25      	ldr	r3, [pc, #148]	; (80075bc <UART_SetConfig+0xac8>)
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007528:	e009      	b.n	800753e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800752a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007530:	e005      	b.n	800753e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800753c:	bf00      	nop
    }

    if (pclk != 0U)
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d021      	beq.n	8007588 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <UART_SetConfig+0xacc>)
 800754a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800754e:	461a      	mov	r2, r3
 8007550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007552:	fbb3 f2f2 	udiv	r2, r3, r2
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	441a      	add	r2, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	fbb2 f3f3 	udiv	r3, r2, r3
 8007566:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	2b0f      	cmp	r3, #15
 800756c:	d909      	bls.n	8007582 <UART_SetConfig+0xa8e>
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007574:	d205      	bcs.n	8007582 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	b29a      	uxth	r2, r3
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60da      	str	r2, [r3, #12]
 8007580:	e002      	b.n	8007588 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2201      	movs	r2, #1
 800758c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2201      	movs	r2, #1
 8007594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2200      	movs	r2, #0
 800759c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3748      	adds	r7, #72	; 0x48
 80075ac:	46bd      	mov	sp, r7
 80075ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075b2:	bf00      	nop
 80075b4:	58024400 	.word	0x58024400
 80075b8:	03d09000 	.word	0x03d09000
 80075bc:	003d0900 	.word	0x003d0900
 80075c0:	08008354 	.word	0x08008354

080075c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01a      	beq.n	80076da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c2:	d10a      	bne.n	80076da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007718:	f7f9 fec2 	bl	80014a0 <HAL_GetTick>
 800771c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b08      	cmp	r3, #8
 800772a:	d10e      	bne.n	800774a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f82f 	bl	800779e <UART_WaitOnFlagUntilTimeout>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e025      	b.n	8007796 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b04      	cmp	r3, #4
 8007756:	d10e      	bne.n	8007776 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f819 	bl	800779e <UART_WaitOnFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e00f      	b.n	8007796 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b09c      	sub	sp, #112	; 0x70
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	603b      	str	r3, [r7, #0]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ae:	e0a9      	b.n	8007904 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	f000 80a5 	beq.w	8007904 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ba:	f7f9 fe71 	bl	80014a0 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80077ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d140      	bne.n	8007852 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077e4:	667b      	str	r3, [r7, #100]	; 0x64
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e6      	bne.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	663b      	str	r3, [r7, #96]	; 0x60
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007822:	64ba      	str	r2, [r7, #72]	; 0x48
 8007824:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e5      	bne.n	8007802 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e069      	b.n	8007926 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d051      	beq.n	8007904 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800786a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800786e:	d149      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007878:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800788e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
 800789a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800789e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e6      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	613b      	str	r3, [r7, #16]
   return(result);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078cc:	623a      	str	r2, [r7, #32]
 80078ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	69f9      	ldr	r1, [r7, #28]
 80078d2:	6a3a      	ldr	r2, [r7, #32]
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e5      	bne.n	80078ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e010      	b.n	8007926 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69da      	ldr	r2, [r3, #28]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4013      	ands	r3, r2
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	bf0c      	ite	eq
 8007914:	2301      	moveq	r3, #1
 8007916:	2300      	movne	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	461a      	mov	r2, r3
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	429a      	cmp	r2, r3
 8007920:	f43f af46 	beq.w	80077b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3770      	adds	r7, #112	; 0x70
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b095      	sub	sp, #84	; 0x54
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800794c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007956:	643b      	str	r3, [r7, #64]	; 0x40
 8007958:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800795c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	61fb      	str	r3, [r7, #28]
   return(result);
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <UART_EndRxTransfer+0xc8>)
 800797e:	4013      	ands	r3, r2
 8007980:	64bb      	str	r3, [r7, #72]	; 0x48
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800798a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d118      	bne.n	80079d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f023 0310 	bic.w	r3, r3, #16
 80079ba:	647b      	str	r3, [r7, #68]	; 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6979      	ldr	r1, [r7, #20]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	613b      	str	r3, [r7, #16]
   return(result);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	671a      	str	r2, [r3, #112]	; 0x70
}
 80079ec:	bf00      	nop
 80079ee:	3754      	adds	r7, #84	; 0x54
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	effffffe 	.word	0xeffffffe

080079fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff f854 	bl	8006ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	61bb      	str	r3, [r7, #24]
 8007a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6979      	ldr	r1, [r7, #20]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e6      	bne.n	8007a30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff f81f 	bl	8006ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a76:	bf00      	nop
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_UARTEx_DisableFifoMode+0x16>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e027      	b.n	8007b20 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2224      	movs	r2, #36	; 0x24
 8007adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007afe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e02d      	b.n	8007ba0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2224      	movs	r2, #36	; 0x24
 8007b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0201 	bic.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f84f 	bl	8007c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e02d      	b.n	8007c1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2224      	movs	r2, #36	; 0x24
 8007bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0201 	bic.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f811 	bl	8007c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c44:	e031      	b.n	8007caa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c46:	2310      	movs	r3, #16
 8007c48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c4a:	2310      	movs	r3, #16
 8007c4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	0e5b      	lsrs	r3, r3, #25
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	0f5b      	lsrs	r3, r3, #29
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	7b3a      	ldrb	r2, [r7, #12]
 8007c72:	4911      	ldr	r1, [pc, #68]	; (8007cb8 <UARTEx_SetNbDataToProcess+0x94>)
 8007c74:	5c8a      	ldrb	r2, [r1, r2]
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c7a:	7b3a      	ldrb	r2, [r7, #12]
 8007c7c:	490f      	ldr	r1, [pc, #60]	; (8007cbc <UARTEx_SetNbDataToProcess+0x98>)
 8007c7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	7b7a      	ldrb	r2, [r7, #13]
 8007c90:	4909      	ldr	r1, [pc, #36]	; (8007cb8 <UARTEx_SetNbDataToProcess+0x94>)
 8007c92:	5c8a      	ldrb	r2, [r1, r2]
 8007c94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c98:	7b7a      	ldrb	r2, [r7, #13]
 8007c9a:	4908      	ldr	r1, [pc, #32]	; (8007cbc <UARTEx_SetNbDataToProcess+0x98>)
 8007c9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	0800836c 	.word	0x0800836c
 8007cbc:	08008374 	.word	0x08008374

08007cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	f107 001c 	add.w	r0, r7, #28
 8007cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d120      	bne.n	8007d1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	4b2a      	ldr	r3, [pc, #168]	; (8007d94 <USB_CoreInit+0xd4>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d105      	bne.n	8007d0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 faac 	bl	800826c <USB_CoreReset>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]
 8007d18:	e01a      	b.n	8007d50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 faa0 	bl	800826c <USB_CoreReset>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
 8007d42:	e005      	b.n	8007d50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d116      	bne.n	8007d84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d64:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <USB_CoreInit+0xd8>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f043 0206 	orr.w	r2, r3, #6
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d90:	b004      	add	sp, #16
 8007d92:	4770      	bx	lr
 8007d94:	ffbdffbf 	.word	0xffbdffbf
 8007d98:	03ee0000 	.word	0x03ee0000

08007d9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f023 0201 	bic.w	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d115      	bne.n	8007e0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dec:	2001      	movs	r0, #1
 8007dee:	f7f9 fb63 	bl	80014b8 <HAL_Delay>
      ms++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa29 	bl	8008250 <USB_GetMode>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d01e      	beq.n	8007e42 <USB_SetCurrentMode+0x84>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b31      	cmp	r3, #49	; 0x31
 8007e08:	d9f0      	bls.n	8007dec <USB_SetCurrentMode+0x2e>
 8007e0a:	e01a      	b.n	8007e42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e0c:	78fb      	ldrb	r3, [r7, #3]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d115      	bne.n	8007e3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f7f9 fb4a 	bl	80014b8 <HAL_Delay>
      ms++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa10 	bl	8008250 <USB_GetMode>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <USB_SetCurrentMode+0x84>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b31      	cmp	r3, #49	; 0x31
 8007e3a:	d9f0      	bls.n	8007e1e <USB_SetCurrentMode+0x60>
 8007e3c:	e001      	b.n	8007e42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e005      	b.n	8007e4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b32      	cmp	r3, #50	; 0x32
 8007e46:	d101      	bne.n	8007e4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e58:	b084      	sub	sp, #16
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	e009      	b.n	8007e8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	3340      	adds	r3, #64	; 0x40
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	2200      	movs	r2, #0
 8007e84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b0e      	cmp	r3, #14
 8007e90:	d9f2      	bls.n	8007e78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d11c      	bne.n	8007ed2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea6:	f043 0302 	orr.w	r3, r3, #2
 8007eaa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	e005      	b.n	8007ede <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef8:	461a      	mov	r2, r3
 8007efa:	680b      	ldr	r3, [r1, #0]
 8007efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10c      	bne.n	8007f1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d104      	bne.n	8007f14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f965 	bl	80081dc <USB_SetDevSpeed>
 8007f12:	e008      	b.n	8007f26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f14:	2101      	movs	r1, #1
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f960 	bl	80081dc <USB_SetDevSpeed>
 8007f1c:	e003      	b.n	8007f26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f1e:	2103      	movs	r1, #3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f95b 	bl	80081dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f26:	2110      	movs	r1, #16
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f8f3 	bl	8008114 <USB_FlushTxFifo>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f91f 	bl	800817c <USB_FlushRxFifo>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	461a      	mov	r2, r3
 8007f50:	2300      	movs	r3, #0
 8007f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f66:	461a      	mov	r2, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	e043      	b.n	8007ffa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f88:	d118      	bne.n	8007fbc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	e013      	b.n	8007fce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e008      	b.n	8007fce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fec:	461a      	mov	r2, r3
 8007fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d3b7      	bcc.n	8007f72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008002:	2300      	movs	r3, #0
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	e043      	b.n	8008090 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800801a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800801e:	d118      	bne.n	8008052 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10a      	bne.n	800803c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008032:	461a      	mov	r2, r3
 8008034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	e013      	b.n	8008064 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	461a      	mov	r2, r3
 800804a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e008      	b.n	8008064 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805e:	461a      	mov	r2, r3
 8008060:	2300      	movs	r3, #0
 8008062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	461a      	mov	r2, r3
 8008072:	2300      	movs	r3, #0
 8008074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008082:	461a      	mov	r2, r3
 8008084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3301      	adds	r3, #1
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	d3b7      	bcc.n	8008008 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d105      	bne.n	80080cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f043 0210 	orr.w	r2, r3, #16
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	699a      	ldr	r2, [r3, #24]
 80080d0:	4b0e      	ldr	r3, [pc, #56]	; (800810c <USB_DevInit+0x2b4>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	f043 0208 	orr.w	r2, r3, #8
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d105      	bne.n	80080fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <USB_DevInit+0x2b8>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008108:	b004      	add	sp, #16
 800810a:	4770      	bx	lr
 800810c:	803c3800 	.word	0x803c3800
 8008110:	40000004 	.word	0x40000004

08008114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4a13      	ldr	r2, [pc, #76]	; (8008178 <USB_FlushTxFifo+0x64>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d901      	bls.n	8008134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e01b      	b.n	800816c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	daf2      	bge.n	8008122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	019b      	lsls	r3, r3, #6
 8008144:	f043 0220 	orr.w	r2, r3, #32
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3301      	adds	r3, #1
 8008150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4a08      	ldr	r2, [pc, #32]	; (8008178 <USB_FlushTxFifo+0x64>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d901      	bls.n	800815e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e006      	b.n	800816c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b20      	cmp	r3, #32
 8008168:	d0f0      	beq.n	800814c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	00030d40 	.word	0x00030d40

0800817c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3301      	adds	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4a11      	ldr	r2, [pc, #68]	; (80081d8 <USB_FlushRxFifo+0x5c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d901      	bls.n	800819a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e018      	b.n	80081cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	daf2      	bge.n	8008188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2210      	movs	r2, #16
 80081aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4a08      	ldr	r2, [pc, #32]	; (80081d8 <USB_FlushRxFifo+0x5c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d901      	bls.n	80081be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e006      	b.n	80081cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	2b10      	cmp	r3, #16
 80081c8:	d0f0      	beq.n	80081ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	00030d40 	.word	0x00030d40

080081dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081fc:	4313      	orrs	r3, r2
 80081fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800823c:	f043 0302 	orr.w	r3, r3, #2
 8008240:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	f003 0301 	and.w	r3, r3, #1
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a13      	ldr	r2, [pc, #76]	; (80082d0 <USB_CoreReset+0x64>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d901      	bls.n	800828a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e01b      	b.n	80082c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	daf2      	bge.n	8008278 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f043 0201 	orr.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <USB_CoreReset+0x64>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d901      	bls.n	80082b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e006      	b.n	80082c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d0f0      	beq.n	80082a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	00030d40 	.word	0x00030d40

080082d4 <__libc_init_array>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	4d0d      	ldr	r5, [pc, #52]	; (800830c <__libc_init_array+0x38>)
 80082d8:	4c0d      	ldr	r4, [pc, #52]	; (8008310 <__libc_init_array+0x3c>)
 80082da:	1b64      	subs	r4, r4, r5
 80082dc:	10a4      	asrs	r4, r4, #2
 80082de:	2600      	movs	r6, #0
 80082e0:	42a6      	cmp	r6, r4
 80082e2:	d109      	bne.n	80082f8 <__libc_init_array+0x24>
 80082e4:	4d0b      	ldr	r5, [pc, #44]	; (8008314 <__libc_init_array+0x40>)
 80082e6:	4c0c      	ldr	r4, [pc, #48]	; (8008318 <__libc_init_array+0x44>)
 80082e8:	f000 f820 	bl	800832c <_init>
 80082ec:	1b64      	subs	r4, r4, r5
 80082ee:	10a4      	asrs	r4, r4, #2
 80082f0:	2600      	movs	r6, #0
 80082f2:	42a6      	cmp	r6, r4
 80082f4:	d105      	bne.n	8008302 <__libc_init_array+0x2e>
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fc:	4798      	blx	r3
 80082fe:	3601      	adds	r6, #1
 8008300:	e7ee      	b.n	80082e0 <__libc_init_array+0xc>
 8008302:	f855 3b04 	ldr.w	r3, [r5], #4
 8008306:	4798      	blx	r3
 8008308:	3601      	adds	r6, #1
 800830a:	e7f2      	b.n	80082f2 <__libc_init_array+0x1e>
 800830c:	08008384 	.word	0x08008384
 8008310:	08008384 	.word	0x08008384
 8008314:	08008384 	.word	0x08008384
 8008318:	08008388 	.word	0x08008388

0800831c <memset>:
 800831c:	4402      	add	r2, r0
 800831e:	4603      	mov	r3, r0
 8008320:	4293      	cmp	r3, r2
 8008322:	d100      	bne.n	8008326 <memset+0xa>
 8008324:	4770      	bx	lr
 8008326:	f803 1b01 	strb.w	r1, [r3], #1
 800832a:	e7f9      	b.n	8008320 <memset+0x4>

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
