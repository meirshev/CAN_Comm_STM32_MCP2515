
CAN_COM_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac2c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800aecc  0800aecc  0001aecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b09c  0800b09c  0001b09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800b0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800b114  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800b174  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  24000134  0800b1d4  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000a20  0800b1d4  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023abe  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f8  00000000  00000000  00043c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00047518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  00048dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a831  00000000  00000000  0004a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ab6  00000000  00000000  00084d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001713b1  00000000  00000000  000a5817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00216bc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e74  00000000  00000000  00216c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aeb4 	.word	0x0800aeb4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800aeb4 	.word	0x0800aeb4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN */
bool CANSPI_Initialize(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 800068a:	2300      	movs	r3, #0
 800068c:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 800068e:	2300      	movs	r3, #0
 8000690:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 800069a:	2300      	movs	r3, #0
 800069c:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80006a2:	2300      	movs	r3, #0
 80006a4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80006a6:	2300      	movs	r3, #0
 80006a8:	70fb      	strb	r3, [r7, #3]
  
  /* Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80006aa:	2300      	movs	r3, #0
 80006ac:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;
 80006ae:	2300      	movs	r3, #0
 80006b0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80006ba:	2300      	movs	r3, #0
 80006bc:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;
 80006be:	2308      	movs	r3, #8
 80006c0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80006c2:	2300      	movs	r3, #0
 80006c4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80006c6:	2300      	movs	r3, #0
 80006c8:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80006da:	2300      	movs	r3, #0
 80006dc:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80006de:	2300      	movs	r3, #0
 80006e0:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80006ee:	2300      	movs	r3, #0
 80006f0:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80006f6:	2300      	movs	r3, #0
 80006f8:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 80006fa:	2300      	movs	r3, #0
 80006fc:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80006fe:	2308      	movs	r3, #8
 8000700:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000702:	2300      	movs	r3, #0
 8000704:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000706:	2300      	movs	r3, #0
 8000708:	72fb      	strb	r3, [r7, #11]
  
  /* MCP2515, SPI */
  if(!MCP2515_Initialize())
 800070a:	f000 f863 	bl	80007d4 <MCP2515_Initialize>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <CANSPI_Initialize+0x94>
    return false;
 8000714:	2300      	movs	r3, #0
 8000716:	e058      	b.n	80007ca <CANSPI_Initialize+0x146>
    
  /* Configuration */
  if(!MCP2515_SetConfigMode())
 8000718:	f000 f87e 	bl	8000818 <MCP2515_SetConfigMode>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <CANSPI_Initialize+0xa2>
    return false;
 8000722:	2300      	movs	r3, #0
 8000724:	e051      	b.n	80007ca <CANSPI_Initialize+0x146>
  
  /* Configure Filters & Masks */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	461a      	mov	r2, r3
 800072a:	2123      	movs	r1, #35	; 0x23
 800072c:	2020      	movs	r0, #32
 800072e:	f000 f8f5 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000732:	463b      	mov	r3, r7
 8000734:	461a      	mov	r2, r3
 8000736:	2127      	movs	r1, #39	; 0x27
 8000738:	2024      	movs	r0, #36	; 0x24
 800073a:	f000 f8ef 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	461a      	mov	r2, r3
 8000744:	2103      	movs	r1, #3
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f8e8 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	461a      	mov	r2, r3
 8000752:	2107      	movs	r1, #7
 8000754:	2004      	movs	r0, #4
 8000756:	f000 f8e1 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	461a      	mov	r2, r3
 8000760:	210b      	movs	r1, #11
 8000762:	2008      	movs	r0, #8
 8000764:	f000 f8da 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	461a      	mov	r2, r3
 800076e:	2113      	movs	r1, #19
 8000770:	2010      	movs	r0, #16
 8000772:	f000 f8d3 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	461a      	mov	r2, r3
 800077c:	2117      	movs	r1, #23
 800077e:	2014      	movs	r0, #20
 8000780:	f000 f8cc 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	461a      	mov	r2, r3
 800078a:	211b      	movs	r1, #27
 800078c:	2018      	movs	r0, #24
 800078e:	f000 f8c5 	bl	800091c <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000792:	2104      	movs	r1, #4
 8000794:	2060      	movs	r0, #96	; 0x60
 8000796:	f000 f89d 	bl	80008d4 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800079a:	2101      	movs	r1, #1
 800079c:	2070      	movs	r0, #112	; 0x70
 800079e:	f000 f899 	bl	80008d4 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 4us = 250kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x07);
 80007a2:	2107      	movs	r1, #7
 80007a4:	202a      	movs	r0, #42	; 0x2a
 80007a6:	f000 f895 	bl	80008d4 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80007aa:	21e5      	movs	r1, #229	; 0xe5
 80007ac:	2029      	movs	r0, #41	; 0x29
 80007ae:	f000 f891 	bl	80008d4 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80007b2:	2183      	movs	r1, #131	; 0x83
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f000 f88d 	bl	80008d4 <MCP2515_WriteByte>
  
  /* Normal */
  if(!MCP2515_SetNormalMode())
 80007ba:	f000 f84b 	bl	8000854 <MCP2515_SetNormalMode>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d101      	bne.n	80007c8 <CANSPI_Initialize+0x144>
    return false;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e000      	b.n	80007ca <CANSPI_Initialize+0x146>
  
  return true;
 80007c8:	2301      	movs	r3, #1
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <MCP2515_Initialize>:
static uint8_t 	SPI_Rx(void);
static void 	SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 Initialization*/
bool MCP2515_Initialize(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80007da:	2201      	movs	r2, #1
 80007dc:	2110      	movs	r1, #16
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <MCP2515_Initialize+0x3c>)
 80007e0:	f002 fe2a 	bl	8003438 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80007e4:	230a      	movs	r3, #10
 80007e6:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <MCP2515_Initialize+0x40>)
 80007ea:	f006 f9c9 	bl	8006b80 <HAL_SPI_GetState>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d101      	bne.n	80007f8 <MCP2515_Initialize+0x24>
      return true;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e006      	b.n	8000806 <MCP2515_Initialize+0x32>
    
    loop--;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1f1      	bne.n	80007e8 <MCP2515_Initialize+0x14>
      
  return false;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	58020000 	.word	0x58020000
 8000814:	24000274 	.word	0x24000274

08000818 <MCP2515_SetConfigMode>:

/* Set MCP2515 Chip to Configuration Mode*/
bool MCP2515_SetConfigMode(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	200f      	movs	r0, #15
 8000822:	f000 f857 	bl	80008d4 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	71fb      	strb	r3, [r7, #7]
  
  do {    

    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800082a:	200e      	movs	r0, #14
 800082c:	f000 f830 	bl	8000890 <MCP2515_ReadByte>
 8000830:	4603      	mov	r3, r0
 8000832:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000836:	2b80      	cmp	r3, #128	; 0x80
 8000838:	d101      	bne.n	800083e <MCP2515_SetConfigMode+0x26>
      return true;
 800083a:	2301      	movs	r3, #1
 800083c:	e006      	b.n	800084c <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3b01      	subs	r3, #1
 8000842:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1ef      	bne.n	800082a <MCP2515_SetConfigMode+0x12>
  
  return false;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <MCP2515_SetNormalMode>:

/* MCP2515 Normal */
bool MCP2515_SetNormalMode(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800085a:	2100      	movs	r1, #0
 800085c:	200f      	movs	r0, #15
 800085e:	f000 f839 	bl	80008d4 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000862:	230a      	movs	r3, #10
 8000864:	71fb      	strb	r3, [r7, #7]
  
  do {
	/* Read back MCP2515 status */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000866:	200e      	movs	r0, #14
 8000868:	f000 f812 	bl	8000890 <MCP2515_ReadByte>
 800086c:	4603      	mov	r3, r0
 800086e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <MCP2515_SetNormalMode+0x26>
      return true;
 8000876:	2301      	movs	r3, #1
 8000878:	e006      	b.n	8000888 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3b01      	subs	r3, #1
 800087e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1ef      	bne.n	8000866 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* Read a register from the MCP2515 unit */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800089a:	2200      	movs	r2, #0
 800089c:	2110      	movs	r1, #16
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MCP2515_ReadByte+0x40>)
 80008a0:	f002 fdca 	bl	8003438 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f88b 	bl	80009c0 <SPI_Tx>
  SPI_Tx(address);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f887 	bl	80009c0 <SPI_Tx>
  retVal = SPI_Rx();
 80008b2:	f000 f8ab 	bl	8000a0c <SPI_Rx>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80008ba:	2201      	movs	r2, #1
 80008bc:	2110      	movs	r1, #16
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MCP2515_ReadByte+0x40>)
 80008c0:	f002 fdba 	bl	8003438 <HAL_GPIO_WritePin>
  
  return retVal;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58020000 	.word	0x58020000

080008d4 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* Write a Single Byte to a registers in the MCP2515 unit */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80008e4:	2200      	movs	r2, #0
 80008e6:	2110      	movs	r1, #16
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MCP2515_WriteByte+0x44>)
 80008ea:	f002 fda5 	bl	8003438 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f000 f866 	bl	80009c0 <SPI_Tx>
  SPI_Tx(address);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f862 	bl	80009c0 <SPI_Tx>
  SPI_Tx(data);  
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f85e 	bl	80009c0 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000904:	2201      	movs	r2, #1
 8000906:	2110      	movs	r1, #16
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <MCP2515_WriteByte+0x44>)
 800090a:	f002 fd95 	bl	8003438 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	58020000 	.word	0x58020000

0800091c <MCP2515_WriteByteSequence>:

/* Write a sequence of Bytes to registers in the MCP2515 unit */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	603a      	str	r2, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	460b      	mov	r3, r1
 800092a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800092c:	2200      	movs	r2, #0
 800092e:	2110      	movs	r1, #16
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <MCP2515_WriteByteSequence+0x50>)
 8000932:	f002 fd81 	bl	8003438 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f842 	bl	80009c0 <SPI_Tx>
  SPI_Tx(startAddress);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f83e 	bl	80009c0 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3301      	adds	r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	6838      	ldr	r0, [r7, #0]
 8000954:	f000 f846 	bl	80009e4 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <MCP2515_WriteByteSequence+0x50>)
 800095e:	f002 fd6b 	bl	8003438 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	58020000 	.word	0x58020000

08000970 <MCP2515_BitModify>:
  return retVal;
}

/* Modify specific bits at a given address in MCP2515 unit*/
void MCP2515_BitModify(uint8_t address, uint8_t mask, uint8_t data)
{    
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	460b      	mov	r3, r1
 800097c:	71bb      	strb	r3, [r7, #6]
 800097e:	4613      	mov	r3, r2
 8000980:	717b      	strb	r3, [r7, #5]
  MCP2515_CS_LOW();
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MCP2515_BitModify+0x4c>)
 8000988:	f002 fd56 	bl	8003438 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_BIT_MOD);
 800098c:	2005      	movs	r0, #5
 800098e:	f000 f817 	bl	80009c0 <SPI_Tx>
  SPI_Tx(address);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f813 	bl	80009c0 <SPI_Tx>
  SPI_Tx(mask);
 800099a:	79bb      	ldrb	r3, [r7, #6]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f80f 	bl	80009c0 <SPI_Tx>
  SPI_Tx(data);
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f80b 	bl	80009c0 <SPI_Tx>
        
  MCP2515_CS_HIGH();
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <MCP2515_BitModify+0x4c>)
 80009b0:	f002 fd42 	bl	8003438 <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	58020000 	.word	0x58020000

080009c0 <SPI_Tx>:

/* SPI Tx Wrapper */
static void SPI_Tx(uint8_t data)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80009ca:	1df9      	adds	r1, r7, #7
 80009cc:	230a      	movs	r3, #10
 80009ce:	2201      	movs	r2, #1
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <SPI_Tx+0x20>)
 80009d2:	f005 fb1f 	bl	8006014 <HAL_SPI_Transmit>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	24000274 	.word	0x24000274

080009e4 <SPI_TxBuffer>:

/* SPI Tx Wrapper */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	230a      	movs	r3, #10
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <SPI_TxBuffer+0x24>)
 80009fa:	f005 fb0b 	bl	8006014 <HAL_SPI_Transmit>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	24000274 	.word	0x24000274

08000a0c <SPI_Rx>:

/* SPI Rx Wrapper */
static uint8_t SPI_Rx(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000a12:	1df9      	adds	r1, r7, #7
 8000a14:	230a      	movs	r3, #10
 8000a16:	2201      	movs	r2, #1
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <SPI_Rx+0x1c>)
 8000a1a:	f005 fced 	bl	80063f8 <HAL_SPI_Receive>
  return retVal;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000274 	.word	0x24000274

08000a2c <printToConsole>:
uint8_t uart_rx_buff_1[1];
char 	msg_buff[50];
int		msg_buff_len;

void printToConsole(UART_HandleTypeDef *huart, char msg[50])
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	msg_buff_len = sprintf(msg_buff, msg);
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <printToConsole+0x30>)
 8000a3a:	f009 fdcd 	bl	800a5d8 <siprintf>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <printToConsole+0x34>)
 8000a42:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huart, (uint8_t *)msg_buff, msg_buff_len, 100);
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <printToConsole+0x34>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	2364      	movs	r3, #100	; 0x64
 8000a4c:	4903      	ldr	r1, [pc, #12]	; (8000a5c <printToConsole+0x30>)
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f006 ff6e 	bl	8007930 <HAL_UART_Transmit>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	24000154 	.word	0x24000154
 8000a60:	24000188 	.word	0x24000188

08000a64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, uart_rx_buff_1, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4904      	ldr	r1, [pc, #16]	; (8000a80 <HAL_UART_RxCpltCallback+0x1c>)
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f006 fff3 	bl	8007a5c <HAL_UART_Receive_IT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24000150 	.word	0x24000150

08000a84 <block>:


void block(UART_HandleTypeDef *huart, int user_input)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	uart_rx_buff_1[0] = 0;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <block+0x38>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, uart_rx_buff_1, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	4909      	ldr	r1, [pc, #36]	; (8000abc <block+0x38>)
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f006 ffdf 	bl	8007a5c <HAL_UART_Receive_IT>
	while((uart_rx_buff_1[0] - 48) != user_input)
 8000a9e:	e002      	b.n	8000aa6 <block+0x22>
	{
		HAL_Delay(200);
 8000aa0:	20c8      	movs	r0, #200	; 0xc8
 8000aa2:	f001 f83d 	bl	8001b20 <HAL_Delay>
	while((uart_rx_buff_1[0] - 48) != user_input)
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <block+0x38>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3b30      	subs	r3, #48	; 0x30
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d1f6      	bne.n	8000aa0 <block+0x1c>
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24000150 	.word	0x24000150

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f000 ff9a 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f870 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f000 fa80 	bl	8000fd0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ad0:	f000 f8ec 	bl	8000cac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 f9fe 	bl	8000ed4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ad8:	f000 fa48 	bl	8000f6c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000adc:	f000 f932 	bl	8000d44 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ae0:	f000 f986 	bl	8000df0 <MX_TIM2_Init>
  MX_TIM13_Init();
 8000ae4:	f000 f9d2 	bl	8000e8c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  printToConsole(&huart3, "Program Started\r\n");
 8000ae8:	4924      	ldr	r1, [pc, #144]	; (8000b7c <main+0xbc>)
 8000aea:	4825      	ldr	r0, [pc, #148]	; (8000b80 <main+0xc0>)
 8000aec:	f7ff ff9e 	bl	8000a2c <printToConsole>
  printToConsole(&huart3, "Please press 1 to initialize MCP25135:\r\n");
 8000af0:	4924      	ldr	r1, [pc, #144]	; (8000b84 <main+0xc4>)
 8000af2:	4823      	ldr	r0, [pc, #140]	; (8000b80 <main+0xc0>)
 8000af4:	f7ff ff9a 	bl	8000a2c <printToConsole>

  block(&huart3, 1);
 8000af8:	2101      	movs	r1, #1
 8000afa:	4821      	ldr	r0, [pc, #132]	; (8000b80 <main+0xc0>)
 8000afc:	f7ff ffc2 	bl	8000a84 <block>

  if(CANSPI_Initialize())
 8000b00:	f7ff fdc0 	bl	8000684 <CANSPI_Initialize>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <main+0x54>
  {
	  printToConsole(&huart3, "MCP2515 Initialized Successfully\r\n");
 8000b0a:	491f      	ldr	r1, [pc, #124]	; (8000b88 <main+0xc8>)
 8000b0c:	481c      	ldr	r0, [pc, #112]	; (8000b80 <main+0xc0>)
 8000b0e:	f7ff ff8d 	bl	8000a2c <printToConsole>
 8000b12:	e003      	b.n	8000b1c <main+0x5c>
  }else
  {
	  printToConsole(&huart3, "MCP2515 Initialization Failed\r\n");
 8000b14:	491d      	ldr	r1, [pc, #116]	; (8000b8c <main+0xcc>)
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <main+0xc0>)
 8000b18:	f7ff ff88 	bl	8000a2c <printToConsole>
  }
  MCP2515_BitModify(MCP2515_CANINTE, MCP2515_INT_MASK, MCP2515_ENB_INT);
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	2103      	movs	r1, #3
 8000b20:	202b      	movs	r0, #43	; 0x2b
 8000b22:	f7ff ff25 	bl	8000970 <MCP2515_BitModify>

  printToConsole(&huart3, "Please press 1 to initialize the timer:\r\n");
 8000b26:	491a      	ldr	r1, [pc, #104]	; (8000b90 <main+0xd0>)
 8000b28:	4815      	ldr	r0, [pc, #84]	; (8000b80 <main+0xc0>)
 8000b2a:	f7ff ff7f 	bl	8000a2c <printToConsole>
  block(&huart3, 1);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4813      	ldr	r0, [pc, #76]	; (8000b80 <main+0xc0>)
 8000b32:	f7ff ffa7 	bl	8000a84 <block>
  if (HAL_TIM_Base_Start(&htim13) == 0)
 8000b36:	4817      	ldr	r0, [pc, #92]	; (8000b94 <main+0xd4>)
 8000b38:	f006 f970 	bl	8006e1c <HAL_TIM_Base_Start>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <main+0x8c>
  {
	  printToConsole(&huart3, "Timer initialized successfully:\r\n");
 8000b42:	4915      	ldr	r1, [pc, #84]	; (8000b98 <main+0xd8>)
 8000b44:	480e      	ldr	r0, [pc, #56]	; (8000b80 <main+0xc0>)
 8000b46:	f7ff ff71 	bl	8000a2c <printToConsole>
 8000b4a:	e003      	b.n	8000b54 <main+0x94>
  }else
  {
	  printToConsole(&huart3, "Timer initialization failed\r\n");
 8000b4c:	4913      	ldr	r1, [pc, #76]	; (8000b9c <main+0xdc>)
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <main+0xc0>)
 8000b50:	f7ff ff6c 	bl	8000a2c <printToConsole>
  }

  printToConsole(&huart3, "Please press 1 to start sending data:\r\n");
 8000b54:	4912      	ldr	r1, [pc, #72]	; (8000ba0 <main+0xe0>)
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <main+0xc0>)
 8000b58:	f7ff ff68 	bl	8000a2c <printToConsole>
  block(&huart3, 1);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <main+0xc0>)
 8000b60:	f7ff ff90 	bl	8000a84 <block>

  HAL_TIM_Base_Start_IT(&htim2);
 8000b64:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <main+0xe4>)
 8000b66:	f006 f9c9 	bl	8006efc <HAL_TIM_Base_Start_IT>

  printToConsole(&huart3, "MCU is currently sending data\r\n");
 8000b6a:	490f      	ldr	r1, [pc, #60]	; (8000ba8 <main+0xe8>)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <main+0xc0>)
 8000b6e:	f7ff ff5d 	bl	8000a2c <printToConsole>
	txMessage.frame.data5 = 5;
	txMessage.frame.data6 = 6;
	txMessage.frame.data7 = 7;
	CANSPI_Transmit(&txMessage);*/

	HAL_Delay(1000);
 8000b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b76:	f000 ffd3 	bl	8001b20 <HAL_Delay>
 8000b7a:	e7fa      	b.n	8000b72 <main+0xb2>
 8000b7c:	0800aecc 	.word	0x0800aecc
 8000b80:	24000394 	.word	0x24000394
 8000b84:	0800aee0 	.word	0x0800aee0
 8000b88:	0800af0c 	.word	0x0800af0c
 8000b8c:	0800af30 	.word	0x0800af30
 8000b90:	0800af50 	.word	0x0800af50
 8000b94:	24000348 	.word	0x24000348
 8000b98:	0800af7c 	.word	0x0800af7c
 8000b9c:	0800afa0 	.word	0x0800afa0
 8000ba0:	0800afc0 	.word	0x0800afc0
 8000ba4:	240002fc 	.word	0x240002fc
 8000ba8:	0800afe8 	.word	0x0800afe8

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	224c      	movs	r2, #76	; 0x4c
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f009 fd04 	bl	800a5c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f009 fcfe 	bl	800a5c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f002 fdaf 	bl	8003730 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemClock_Config+0xf8>)
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemClock_Config+0xf8>)
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemClock_Config+0xf8>)
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemClock_Config+0xfc>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf4:	4a2c      	ldr	r2, [pc, #176]	; (8000ca8 <SystemClock_Config+0xfc>)
 8000bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <SystemClock_Config+0xfc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c08:	bf00      	nop
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <SystemClock_Config+0xfc>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c16:	d1f8      	bne.n	8000c0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c26:	2340      	movs	r3, #64	; 0x40
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000c36:	2318      	movs	r3, #24
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c46:	230c      	movs	r3, #12
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fdb4 	bl	80037c4 <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c62:	f000 faeb 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	233f      	movs	r3, #63	; 0x3f
 8000c68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 f9c8 	bl	8004020 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c96:	f000 fad1 	bl	800123c <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3770      	adds	r7, #112	; 0x70
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	58000400 	.word	0x58000400
 8000ca8:	58024800 	.word	0x58024800

08000cac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cb4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cc4:	22e1      	movs	r2, #225	; 0xe1
 8000cc6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cdc:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cde:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_ETH_Init+0x80>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_ETH_Init+0x80>)
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <MX_ETH_Init+0x90>)
 8000cf0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cf4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cf8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cfc:	f001 fdc8 	bl	8002890 <HAL_ETH_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d06:	f000 fa99 	bl	800123c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d0a:	2238      	movs	r2, #56	; 0x38
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d10:	f009 fc5a 	bl	800a5c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d16:	2221      	movs	r2, #33	; 0x21
 8000d18:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d20:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	240001c4 	.word	0x240001c4
 8000d30:	40028000 	.word	0x40028000
 8000d34:	24000a00 	.word	0x24000a00
 8000d38:	240000d4 	.word	0x240000d4
 8000d3c:	24000074 	.word	0x24000074
 8000d40:	2400018c 	.word	0x2400018c

08000d44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d4a:	4a28      	ldr	r2, [pc, #160]	; (8000dec <MX_SPI1_Init+0xa8>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d5e:	2207      	movs	r2, #7
 8000d60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_SPI1_Init+0xa4>)
 8000dd4:	f005 f818 	bl	8005e08 <HAL_SPI_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000dde:	f000 fa2d 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000274 	.word	0x24000274
 8000dec:	40013000 	.word	0x40013000

08000df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1920;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e26:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000e2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e38:	4813      	ldr	r0, [pc, #76]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e3a:	f005 ff98 	bl	8006d6e <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 f9fa 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e56:	f006 fa17 	bl	8007288 <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e60:	f000 f9ec 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e72:	f006 fc61 	bl	8007738 <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e7c:	f000 f9de 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	240002fc 	.word	0x240002fc

08000e8c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_TIM13_Init+0x40>)
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <MX_TIM13_Init+0x44>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <MX_TIM13_Init+0x40>)
 8000e98:	223f      	movs	r2, #63	; 0x3f
 8000e9a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_TIM13_Init+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MX_TIM13_Init+0x40>)
 8000ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_TIM13_Init+0x40>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_TIM13_Init+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_TIM13_Init+0x40>)
 8000eb8:	f005 ff59 	bl	8006d6e <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000ec2:	f000 f9bb 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24000348 	.word	0x24000348
 8000ed0:	40001c00 	.word	0x40001c00

08000ed4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <MX_USART3_UART_Init+0x94>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f1e:	f006 fcb7 	bl	8007890 <HAL_UART_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f28:	f000 f988 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f30:	f008 ff4b 	bl	8009dca <HAL_UARTEx_SetTxFifoThreshold>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 f97f 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f42:	f008 ff80 	bl	8009e46 <HAL_UARTEx_SetRxFifoThreshold>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f000 f976 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f52:	f008 ff01 	bl	8009d58 <HAL_UARTEx_DisableFifoMode>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f5c:	f000 f96e 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	24000394 	.word	0x24000394
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f78:	2209      	movs	r2, #9
 8000f7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb4:	f002 fa73 	bl	800349e <HAL_PCD_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000fbe:	f000 f93d 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	24000424 	.word	0x24000424
 8000fcc:	40080000 	.word	0x40080000

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b6f      	ldr	r3, [pc, #444]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a6d      	ldr	r2, [pc, #436]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b6b      	ldr	r3, [pc, #428]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001004:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a66      	ldr	r2, [pc, #408]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	4a5e      	ldr	r2, [pc, #376]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001050:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106e:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800107c:	4b49      	ldr	r3, [pc, #292]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108c:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	4a40      	ldr	r2, [pc, #256]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010aa:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2110      	movs	r1, #16
 80010bc:	483a      	ldr	r0, [pc, #232]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 80010be:	f002 f9bb 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f244 0101 	movw	r1, #16385	; 0x4001
 80010c8:	4838      	ldr	r0, [pc, #224]	; (80011ac <MX_GPIO_Init+0x1dc>)
 80010ca:	f002 f9b5 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4836      	ldr	r0, [pc, #216]	; (80011b0 <MX_GPIO_Init+0x1e0>)
 80010d6:	f002 f9af 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2102      	movs	r1, #2
 80010de:	4835      	ldr	r0, [pc, #212]	; (80011b4 <MX_GPIO_Init+0x1e4>)
 80010e0:	f002 f9aa 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x1e8>)
 80010fa:	f001 ffed 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010fe:	2310      	movs	r3, #16
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4824      	ldr	r0, [pc, #144]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 8001116:	f001 ffdf 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800111a:	f244 0301 	movw	r3, #16385	; 0x4001
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	481e      	ldr	r0, [pc, #120]	; (80011ac <MX_GPIO_Init+0x1dc>)
 8001134:	f001 ffd0 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <MX_GPIO_Init+0x1e0>)
 8001152:	f001 ffc1 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800115a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_GPIO_Init+0x1e8>)
 800116c:	f001 ffb4 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_GPIO_Init+0x1e4>)
 8001188:	f001 ffa6 	bl	80030d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2017      	movs	r0, #23
 8001192:	f000 fde4 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001196:	2017      	movs	r0, #23
 8001198:	f000 fdfb 	bl	8001d92 <HAL_NVIC_EnableIRQ>

}
 800119c:	bf00      	nop
 800119e:	3730      	adds	r7, #48	; 0x30
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020000 	.word	0x58020000
 80011ac:	58020400 	.word	0x58020400
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	58021000 	.word	0x58021000
 80011b8:	58020800 	.word	0x58020800

080011bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]

}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	timer_val = __HAL_TIM_GET_COUNTER(&htim13) - timer_val;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011ee:	801a      	strh	r2, [r3, #0]
	timers_arr[sent_counter] = timer_val;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011f6:	8811      	ldrh	r1, [r2, #0]
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	printToConsole(&huart3, "Timer interrupts terminated");
 80011fe:	490c      	ldr	r1, [pc, #48]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001202:	f7ff fc13 	bl	8000a2c <printToConsole>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001208:	f005 fef0 	bl	8006fec <HAL_TIM_Base_Stop_IT>
	timer_val = __HAL_TIM_GET_COUNTER(&htim13);
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001216:	801a      	strh	r2, [r3, #0]

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000348 	.word	0x24000348
 8001224:	240009f8 	.word	0x240009f8
 8001228:	240009fc 	.word	0x240009fc
 800122c:	24000930 	.word	0x24000930
 8001230:	0800b008 	.word	0x0800b008
 8001234:	24000394 	.word	0x24000394
 8001238:	240002fc 	.word	0x240002fc

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_MspInit+0x4c>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_MspInit+0x4c>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_MspInit+0x4c>)
 8001260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2005      	movs	r0, #5
 8001272:	f000 fd74 	bl	8001d5e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001276:	2005      	movs	r0, #5
 8001278:	f000 fd8b 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2005      	movs	r0, #5
 8001282:	f000 fd6c 	bl	8001d5e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fd83 	bl	8001d92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58024400 	.word	0x58024400

08001298 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a59      	ldr	r2, [pc, #356]	; (800141c <HAL_ETH_MspInit+0x184>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	f040 80ab 	bne.w	8001412 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012bc:	4b58      	ldr	r3, [pc, #352]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c2:	4a57      	ldr	r2, [pc, #348]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012cc:	4b54      	ldr	r3, [pc, #336]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012f8:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_ETH_MspInit+0x188>)
 80012fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fe:	4a48      	ldr	r2, [pc, #288]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800130a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	4a40      	ldr	r2, [pc, #256]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	4a39      	ldr	r2, [pc, #228]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <HAL_ETH_MspInit+0x188>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_ETH_MspInit+0x188>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800138e:	2332      	movs	r3, #50	; 0x32
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139e:	230b      	movs	r3, #11
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <HAL_ETH_MspInit+0x18c>)
 80013aa:	f001 fe95 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80013ae:	2386      	movs	r3, #134	; 0x86
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013be:	230b      	movs	r3, #11
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <HAL_ETH_MspInit+0x190>)
 80013ca:	f001 fe85 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e0:	230b      	movs	r3, #11
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <HAL_ETH_MspInit+0x194>)
 80013ec:	f001 fe74 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001402:	230b      	movs	r3, #11
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <HAL_ETH_MspInit+0x198>)
 800140e:	f001 fe63 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3738      	adds	r7, #56	; 0x38
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40028000 	.word	0x40028000
 8001420:	58024400 	.word	0x58024400
 8001424:	58020800 	.word	0x58020800
 8001428:	58020000 	.word	0x58020000
 800142c:	58020400 	.word	0x58020400
 8001430:	58021800 	.word	0x58021800

08001434 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0ba      	sub	sp, #232	; 0xe8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	22bc      	movs	r2, #188	; 0xbc
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f009 f8b7 	bl	800a5c8 <memset>
  if(hspi->Instance==SPI1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a36      	ldr	r2, [pc, #216]	; (8001538 <HAL_SPI_MspInit+0x104>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d165      	bne.n	8001530 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800146a:	2300      	movs	r3, #0
 800146c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f960 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800147e:	f7ff fedd 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <HAL_SPI_MspInit+0x108>)
 8001484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001488:	4a2c      	ldr	r2, [pc, #176]	; (800153c <HAL_SPI_MspInit+0x108>)
 800148a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_SPI_MspInit+0x108>)
 8001494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_SPI_MspInit+0x108>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a25      	ldr	r2, [pc, #148]	; (800153c <HAL_SPI_MspInit+0x108>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_SPI_MspInit+0x108>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_SPI_MspInit+0x108>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_SPI_MspInit+0x108>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_SPI_MspInit+0x108>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014dc:	2360      	movs	r3, #96	; 0x60
 80014de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f4:	2305      	movs	r3, #5
 80014f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014fe:	4619      	mov	r1, r3
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <HAL_SPI_MspInit+0x10c>)
 8001502:	f001 fde9 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151e:	2305      	movs	r3, #5
 8001520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <HAL_SPI_MspInit+0x110>)
 800152c:	f001 fdd4 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	37e8      	adds	r7, #232	; 0xe8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013000 	.word	0x40013000
 800153c:	58024400 	.word	0x58024400
 8001540:	58020000 	.word	0x58020000
 8001544:	58020c00 	.word	0x58020c00

08001548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001558:	d117      	bne.n	800158a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_TIM_Base_MspInit+0x74>)
 800155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_TIM_Base_MspInit+0x74>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_TIM_Base_MspInit+0x74>)
 800156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	201c      	movs	r0, #28
 800157e:	f000 fbee 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001582:	201c      	movs	r0, #28
 8001584:	f000 fc05 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001588:	e013      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM13)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_TIM_Base_MspInit+0x78>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10e      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_TIM_Base_MspInit+0x74>)
 8001596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_TIM_Base_MspInit+0x74>)
 800159c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_TIM_Base_MspInit+0x74>)
 80015a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	58024400 	.word	0x58024400
 80015c0:	40001c00 	.word	0x40001c00

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0b8      	sub	sp, #224	; 0xe0
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	22bc      	movs	r2, #188	; 0xbc
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f008 ffef 	bl	800a5c8 <memset>
  if(huart->Instance==USART3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a29      	ldr	r2, [pc, #164]	; (8001694 <HAL_UART_MspInit+0xd0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d14a      	bne.n	800168a <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015f4:	2302      	movs	r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4618      	mov	r0, r3
 8001604:	f003 f898 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800160e:	f7ff fe15 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001618:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_UART_MspInit+0xd4>)
 800161a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800164e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001668:	2307      	movs	r3, #7
 800166a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001672:	4619      	mov	r1, r3
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <HAL_UART_MspInit+0xd8>)
 8001676:	f001 fd2f 	bl	80030d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2027      	movs	r0, #39	; 0x27
 8001680:	f000 fb6d 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001684:	2027      	movs	r0, #39	; 0x27
 8001686:	f000 fb84 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	37e0      	adds	r7, #224	; 0xe0
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40004800 	.word	0x40004800
 8001698:	58024400 	.word	0x58024400
 800169c:	58020c00 	.word	0x58020c00

080016a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0b8      	sub	sp, #224	; 0xe0
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	22bc      	movs	r2, #188	; 0xbc
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f008 ff81 	bl	800a5c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <HAL_PCD_MspInit+0xe8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d156      	bne.n	800177e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80016d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f828 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80016ee:	f7ff fda5 	bl	800123c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80016f2:	f002 f857 	bl	80037a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_PCD_MspInit+0xec>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PCD_MspInit+0xec>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_PCD_MspInit+0xec>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001714:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800172e:	230a      	movs	r3, #10
 8001730:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001738:	4619      	mov	r1, r3
 800173a:	4815      	ldr	r0, [pc, #84]	; (8001790 <HAL_PCD_MspInit+0xf0>)
 800173c:	f001 fccc 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001758:	4619      	mov	r1, r3
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <HAL_PCD_MspInit+0xf0>)
 800175c:	f001 fcbc 	bl	80030d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_PCD_MspInit+0xec>)
 8001762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_PCD_MspInit+0xec>)
 8001768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800176c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_PCD_MspInit+0xec>)
 8001772:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	37e0      	adds	r7, #224	; 0xe0
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40080000 	.word	0x40080000
 800178c:	58024400 	.word	0x58024400
 8001790:	58020000 	.word	0x58020000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f97e 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017fa:	2080      	movs	r0, #128	; 0x80
 80017fc:	f001 fe35 	bl	800346a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM2_IRQHandler+0x10>)
 800180a:	f005 fc1e 	bl	800704a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	240002fc 	.word	0x240002fc

08001818 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART3_IRQHandler+0x10>)
 800181e:	f006 f973 	bl	8007b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000394 	.word	0x24000394

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f008 fe8a 	bl	800a574 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	24080000 	.word	0x24080000
 800188c:	00000400 	.word	0x00000400
 8001890:	24000a08 	.word	0x24000a08
 8001894:	24000a20 	.word	0x24000a20

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <SystemInit+0xe4>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a36      	ldr	r2, [pc, #216]	; (800197c <SystemInit+0xe4>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <SystemInit+0xe8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d807      	bhi.n	80018c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <SystemInit+0xe8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 030f 	bic.w	r3, r3, #15
 80018c0:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <SystemInit+0xe8>)
 80018c2:	f043 0307 	orr.w	r3, r3, #7
 80018c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <SystemInit+0xec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <SystemInit+0xec>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <SystemInit+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <SystemInit+0xec>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4929      	ldr	r1, [pc, #164]	; (8001984 <SystemInit+0xec>)
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <SystemInit+0xf0>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <SystemInit+0xe8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <SystemInit+0xe8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <SystemInit+0xe8>)
 80018fc:	f043 0307 	orr.w	r3, r3, #7
 8001900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <SystemInit+0xec>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <SystemInit+0xec>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <SystemInit+0xec>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <SystemInit+0xec>)
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <SystemInit+0xf4>)
 8001918:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <SystemInit+0xec>)
 800191c:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <SystemInit+0xf8>)
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <SystemInit+0xec>)
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <SystemInit+0xfc>)
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <SystemInit+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <SystemInit+0xec>)
 800192e:	4a19      	ldr	r2, [pc, #100]	; (8001994 <SystemInit+0xfc>)
 8001930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <SystemInit+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <SystemInit+0xec>)
 800193a:	4a16      	ldr	r2, [pc, #88]	; (8001994 <SystemInit+0xfc>)
 800193c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <SystemInit+0xec>)
 8001940:	2200      	movs	r2, #0
 8001942:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <SystemInit+0xec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <SystemInit+0xec>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <SystemInit+0xec>)
 8001952:	2200      	movs	r2, #0
 8001954:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <SystemInit+0x100>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <SystemInit+0x104>)
 800195c:	4013      	ands	r3, r2
 800195e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001962:	d202      	bcs.n	800196a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <SystemInit+0x108>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <SystemInit+0x10c>)
 800196c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001970:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	52002000 	.word	0x52002000
 8001984:	58024400 	.word	0x58024400
 8001988:	eaf6ed7f 	.word	0xeaf6ed7f
 800198c:	02020200 	.word	0x02020200
 8001990:	01ff0000 	.word	0x01ff0000
 8001994:	01010280 	.word	0x01010280
 8001998:	5c001000 	.word	0x5c001000
 800199c:	ffff0000 	.word	0xffff0000
 80019a0:	51008108 	.word	0x51008108
 80019a4:	52004000 	.word	0x52004000

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019ac:	f7ff ff74 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f008 fdd3 	bl	800a580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff f871 	bl	8000ac0 <main>
  bx  lr
 80019de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019e8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80019ec:	0800b0a0 	.word	0x0800b0a0
  ldr r2, =_sbss
 80019f0:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80019f4:	24000a20 	.word	0x24000a20

080019f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC3_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a02:	2003      	movs	r0, #3
 8001a04:	f000 f9a0 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a08:	f002 fcc0 	bl	800438c <HAL_RCC_GetSysClockFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_Init+0x68>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	4913      	ldr	r1, [pc, #76]	; (8001a68 <HAL_Init+0x6c>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_Init+0x68>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_Init+0x6c>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_Init+0x70>)
 8001a3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_Init+0x74>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f814 	bl	8001a74 <HAL_InitTick>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e002      	b.n	8001a5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a56:	f7ff fbf7 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	58024400 	.word	0x58024400
 8001a68:	0800b024 	.word	0x0800b024
 8001a6c:	24000004 	.word	0x24000004
 8001a70:	24000000 	.word	0x24000000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_InitTick+0x60>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e021      	b.n	8001acc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_InitTick+0x64>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_InitTick+0x60>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f985 	bl	8001dae <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f000 f94f 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_InitTick+0x68>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2400000c 	.word	0x2400000c
 8001ad8:	24000000 	.word	0x24000000
 8001adc:	24000008 	.word	0x24000008

08001ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x20>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x24>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <HAL_IncTick+0x24>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2400000c 	.word	0x2400000c
 8001b04:	24000a0c 	.word	0x24000a0c

08001b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_GetTick+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	24000a0c 	.word	0x24000a0c

08001b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff ffee 	bl	8001b08 <HAL_GetTick>
 8001b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d005      	beq.n	8001b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_Delay+0x44>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b46:	bf00      	nop
 8001b48:	f7ff ffde 	bl	8001b08 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d8f7      	bhi.n	8001b48 <HAL_Delay+0x28>
  {
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2400000c 	.word	0x2400000c

08001b68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_GetREVID+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0c1b      	lsrs	r3, r3, #16
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	5c001000 	.word	0x5c001000

08001b80 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001b90:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	58000400 	.word	0x58000400

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00
 8001bec:	05fa0000 	.word	0x05fa0000

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff40 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff33 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa4 	bl	8001d04 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff fe9a 	bl	8001b08 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e2dc      	b.n	800239a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d008      	beq.n	8001dfe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e2cd      	b.n	800239a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a76      	ldr	r2, [pc, #472]	; (8001fdc <HAL_DMA_Abort+0x214>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d04a      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a74      	ldr	r2, [pc, #464]	; (8001fe0 <HAL_DMA_Abort+0x218>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d045      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a73      	ldr	r2, [pc, #460]	; (8001fe4 <HAL_DMA_Abort+0x21c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d040      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a71      	ldr	r2, [pc, #452]	; (8001fe8 <HAL_DMA_Abort+0x220>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d03b      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a70      	ldr	r2, [pc, #448]	; (8001fec <HAL_DMA_Abort+0x224>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d036      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a6e      	ldr	r2, [pc, #440]	; (8001ff0 <HAL_DMA_Abort+0x228>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d031      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6d      	ldr	r2, [pc, #436]	; (8001ff4 <HAL_DMA_Abort+0x22c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d02c      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6b      	ldr	r2, [pc, #428]	; (8001ff8 <HAL_DMA_Abort+0x230>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d027      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6a      	ldr	r2, [pc, #424]	; (8001ffc <HAL_DMA_Abort+0x234>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a68      	ldr	r2, [pc, #416]	; (8002000 <HAL_DMA_Abort+0x238>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a67      	ldr	r2, [pc, #412]	; (8002004 <HAL_DMA_Abort+0x23c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d018      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a65      	ldr	r2, [pc, #404]	; (8002008 <HAL_DMA_Abort+0x240>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a64      	ldr	r2, [pc, #400]	; (800200c <HAL_DMA_Abort+0x244>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00e      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a62      	ldr	r2, [pc, #392]	; (8002010 <HAL_DMA_Abort+0x248>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a61      	ldr	r2, [pc, #388]	; (8002014 <HAL_DMA_Abort+0x24c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d004      	beq.n	8001e9e <HAL_DMA_Abort+0xd6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a5f      	ldr	r2, [pc, #380]	; (8002018 <HAL_DMA_Abort+0x250>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DMA_Abort+0xda>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_DMA_Abort+0xdc>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 021e 	bic.w	r2, r2, #30
 8001eb6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e00a      	b.n	8001ee6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 020e 	bic.w	r2, r2, #14
 8001ede:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a3c      	ldr	r2, [pc, #240]	; (8001fdc <HAL_DMA_Abort+0x214>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d072      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <HAL_DMA_Abort+0x218>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d06d      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a39      	ldr	r2, [pc, #228]	; (8001fe4 <HAL_DMA_Abort+0x21c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d068      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a37      	ldr	r2, [pc, #220]	; (8001fe8 <HAL_DMA_Abort+0x220>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d063      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a36      	ldr	r2, [pc, #216]	; (8001fec <HAL_DMA_Abort+0x224>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d05e      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_DMA_Abort+0x228>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d059      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a33      	ldr	r2, [pc, #204]	; (8001ff4 <HAL_DMA_Abort+0x22c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d054      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <HAL_DMA_Abort+0x230>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d04f      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a30      	ldr	r2, [pc, #192]	; (8001ffc <HAL_DMA_Abort+0x234>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d04a      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <HAL_DMA_Abort+0x238>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d045      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <HAL_DMA_Abort+0x23c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d040      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2b      	ldr	r2, [pc, #172]	; (8002008 <HAL_DMA_Abort+0x240>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d03b      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2a      	ldr	r2, [pc, #168]	; (800200c <HAL_DMA_Abort+0x244>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d036      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a28      	ldr	r2, [pc, #160]	; (8002010 <HAL_DMA_Abort+0x248>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d031      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a27      	ldr	r2, [pc, #156]	; (8002014 <HAL_DMA_Abort+0x24c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d02c      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a25      	ldr	r2, [pc, #148]	; (8002018 <HAL_DMA_Abort+0x250>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d027      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <HAL_DMA_Abort+0x254>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a22      	ldr	r2, [pc, #136]	; (8002020 <HAL_DMA_Abort+0x258>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <HAL_DMA_Abort+0x25c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_DMA_Abort+0x260>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_DMA_Abort+0x264>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_DMA_Abort+0x268>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_DMA_Abort+0x26c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Abort+0x20e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_DMA_Abort+0x270>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d132      	bne.n	800203c <HAL_DMA_Abort+0x274>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e031      	b.n	800203e <HAL_DMA_Abort+0x276>
 8001fda:	bf00      	nop
 8001fdc:	40020010 	.word	0x40020010
 8001fe0:	40020028 	.word	0x40020028
 8001fe4:	40020040 	.word	0x40020040
 8001fe8:	40020058 	.word	0x40020058
 8001fec:	40020070 	.word	0x40020070
 8001ff0:	40020088 	.word	0x40020088
 8001ff4:	400200a0 	.word	0x400200a0
 8001ff8:	400200b8 	.word	0x400200b8
 8001ffc:	40020410 	.word	0x40020410
 8002000:	40020428 	.word	0x40020428
 8002004:	40020440 	.word	0x40020440
 8002008:	40020458 	.word	0x40020458
 800200c:	40020470 	.word	0x40020470
 8002010:	40020488 	.word	0x40020488
 8002014:	400204a0 	.word	0x400204a0
 8002018:	400204b8 	.word	0x400204b8
 800201c:	58025408 	.word	0x58025408
 8002020:	5802541c 	.word	0x5802541c
 8002024:	58025430 	.word	0x58025430
 8002028:	58025444 	.word	0x58025444
 800202c:	58025458 	.word	0x58025458
 8002030:	5802546c 	.word	0x5802546c
 8002034:	58025480 	.word	0x58025480
 8002038:	58025494 	.word	0x58025494
 800203c:	2300      	movs	r3, #0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002050:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6d      	ldr	r2, [pc, #436]	; (800220c <HAL_DMA_Abort+0x444>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d04a      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <HAL_DMA_Abort+0x448>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d045      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6a      	ldr	r2, [pc, #424]	; (8002214 <HAL_DMA_Abort+0x44c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d040      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a68      	ldr	r2, [pc, #416]	; (8002218 <HAL_DMA_Abort+0x450>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d03b      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_DMA_Abort+0x454>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d036      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_DMA_Abort+0x458>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d031      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a64      	ldr	r2, [pc, #400]	; (8002224 <HAL_DMA_Abort+0x45c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d02c      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a62      	ldr	r2, [pc, #392]	; (8002228 <HAL_DMA_Abort+0x460>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d027      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a61      	ldr	r2, [pc, #388]	; (800222c <HAL_DMA_Abort+0x464>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d022      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <HAL_DMA_Abort+0x468>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01d      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5e      	ldr	r2, [pc, #376]	; (8002234 <HAL_DMA_Abort+0x46c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d018      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a5c      	ldr	r2, [pc, #368]	; (8002238 <HAL_DMA_Abort+0x470>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <HAL_DMA_Abort+0x474>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a59      	ldr	r2, [pc, #356]	; (8002240 <HAL_DMA_Abort+0x478>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_DMA_Abort+0x47c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_DMA_Abort+0x32a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a56      	ldr	r2, [pc, #344]	; (8002248 <HAL_DMA_Abort+0x480>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <HAL_DMA_Abort+0x33c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e007      	b.n	8002114 <HAL_DMA_Abort+0x34c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002114:	e013      	b.n	800213e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002116:	f7ff fcf7 	bl	8001b08 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b05      	cmp	r3, #5
 8002122:	d90c      	bls.n	800213e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e12d      	b.n	800239a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e5      	bne.n	8002116 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2f      	ldr	r2, [pc, #188]	; (800220c <HAL_DMA_Abort+0x444>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d04a      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_DMA_Abort+0x448>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d045      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <HAL_DMA_Abort+0x44c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d040      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_DMA_Abort+0x450>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d03b      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_DMA_Abort+0x454>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d036      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <HAL_DMA_Abort+0x458>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d031      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a26      	ldr	r2, [pc, #152]	; (8002224 <HAL_DMA_Abort+0x45c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d02c      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a24      	ldr	r2, [pc, #144]	; (8002228 <HAL_DMA_Abort+0x460>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d027      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a23      	ldr	r2, [pc, #140]	; (800222c <HAL_DMA_Abort+0x464>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_DMA_Abort+0x468>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01d      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a20      	ldr	r2, [pc, #128]	; (8002234 <HAL_DMA_Abort+0x46c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d018      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_DMA_Abort+0x470>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_DMA_Abort+0x474>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00e      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_DMA_Abort+0x478>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_DMA_Abort+0x47c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d004      	beq.n	80021ea <HAL_DMA_Abort+0x422>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a18      	ldr	r2, [pc, #96]	; (8002248 <HAL_DMA_Abort+0x480>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_DMA_Abort+0x426>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_DMA_Abort+0x428>
 80021ee:	2300      	movs	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d02b      	beq.n	800224c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	223f      	movs	r2, #63	; 0x3f
 8002204:	409a      	lsls	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	e02a      	b.n	8002262 <HAL_DMA_Abort+0x49a>
 800220c:	40020010 	.word	0x40020010
 8002210:	40020028 	.word	0x40020028
 8002214:	40020040 	.word	0x40020040
 8002218:	40020058 	.word	0x40020058
 800221c:	40020070 	.word	0x40020070
 8002220:	40020088 	.word	0x40020088
 8002224:	400200a0 	.word	0x400200a0
 8002228:	400200b8 	.word	0x400200b8
 800222c:	40020410 	.word	0x40020410
 8002230:	40020428 	.word	0x40020428
 8002234:	40020440 	.word	0x40020440
 8002238:	40020458 	.word	0x40020458
 800223c:	40020470 	.word	0x40020470
 8002240:	40020488 	.word	0x40020488
 8002244:	400204a0 	.word	0x400204a0
 8002248:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2201      	movs	r2, #1
 800225c:	409a      	lsls	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <HAL_DMA_Abort+0x5dc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d072      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4d      	ldr	r2, [pc, #308]	; (80023a8 <HAL_DMA_Abort+0x5e0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d06d      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4c      	ldr	r2, [pc, #304]	; (80023ac <HAL_DMA_Abort+0x5e4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d068      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a4a      	ldr	r2, [pc, #296]	; (80023b0 <HAL_DMA_Abort+0x5e8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d063      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a49      	ldr	r2, [pc, #292]	; (80023b4 <HAL_DMA_Abort+0x5ec>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d05e      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a47      	ldr	r2, [pc, #284]	; (80023b8 <HAL_DMA_Abort+0x5f0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d059      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a46      	ldr	r2, [pc, #280]	; (80023bc <HAL_DMA_Abort+0x5f4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d054      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <HAL_DMA_Abort+0x5f8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04f      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a43      	ldr	r2, [pc, #268]	; (80023c4 <HAL_DMA_Abort+0x5fc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d04a      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a41      	ldr	r2, [pc, #260]	; (80023c8 <HAL_DMA_Abort+0x600>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d045      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a40      	ldr	r2, [pc, #256]	; (80023cc <HAL_DMA_Abort+0x604>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d040      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3e      	ldr	r2, [pc, #248]	; (80023d0 <HAL_DMA_Abort+0x608>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d03b      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a3d      	ldr	r2, [pc, #244]	; (80023d4 <HAL_DMA_Abort+0x60c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d036      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3b      	ldr	r2, [pc, #236]	; (80023d8 <HAL_DMA_Abort+0x610>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d031      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a3a      	ldr	r2, [pc, #232]	; (80023dc <HAL_DMA_Abort+0x614>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d02c      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a38      	ldr	r2, [pc, #224]	; (80023e0 <HAL_DMA_Abort+0x618>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d027      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a37      	ldr	r2, [pc, #220]	; (80023e4 <HAL_DMA_Abort+0x61c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d022      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a35      	ldr	r2, [pc, #212]	; (80023e8 <HAL_DMA_Abort+0x620>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01d      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a34      	ldr	r2, [pc, #208]	; (80023ec <HAL_DMA_Abort+0x624>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d018      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a32      	ldr	r2, [pc, #200]	; (80023f0 <HAL_DMA_Abort+0x628>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <HAL_DMA_Abort+0x62c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00e      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <HAL_DMA_Abort+0x630>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <HAL_DMA_Abort+0x634>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_DMA_Abort+0x58a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <HAL_DMA_Abort+0x638>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_DMA_Abort+0x58e>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_DMA_Abort+0x590>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002364:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002386:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40020010 	.word	0x40020010
 80023a8:	40020028 	.word	0x40020028
 80023ac:	40020040 	.word	0x40020040
 80023b0:	40020058 	.word	0x40020058
 80023b4:	40020070 	.word	0x40020070
 80023b8:	40020088 	.word	0x40020088
 80023bc:	400200a0 	.word	0x400200a0
 80023c0:	400200b8 	.word	0x400200b8
 80023c4:	40020410 	.word	0x40020410
 80023c8:	40020428 	.word	0x40020428
 80023cc:	40020440 	.word	0x40020440
 80023d0:	40020458 	.word	0x40020458
 80023d4:	40020470 	.word	0x40020470
 80023d8:	40020488 	.word	0x40020488
 80023dc:	400204a0 	.word	0x400204a0
 80023e0:	400204b8 	.word	0x400204b8
 80023e4:	58025408 	.word	0x58025408
 80023e8:	5802541c 	.word	0x5802541c
 80023ec:	58025430 	.word	0x58025430
 80023f0:	58025444 	.word	0x58025444
 80023f4:	58025458 	.word	0x58025458
 80023f8:	5802546c 	.word	0x5802546c
 80023fc:	58025480 	.word	0x58025480
 8002400:	58025494 	.word	0x58025494

08002404 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e237      	b.n	8002886 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d004      	beq.n	800242c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e22c      	b.n	8002886 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_DMA_Abort_IT+0x1a0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d04a      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5b      	ldr	r2, [pc, #364]	; (80025a8 <HAL_DMA_Abort_IT+0x1a4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d045      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a59      	ldr	r2, [pc, #356]	; (80025ac <HAL_DMA_Abort_IT+0x1a8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d040      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a58      	ldr	r2, [pc, #352]	; (80025b0 <HAL_DMA_Abort_IT+0x1ac>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d03b      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_DMA_Abort_IT+0x1b0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d036      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a55      	ldr	r2, [pc, #340]	; (80025b8 <HAL_DMA_Abort_IT+0x1b4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d031      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a53      	ldr	r2, [pc, #332]	; (80025bc <HAL_DMA_Abort_IT+0x1b8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02c      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_DMA_Abort_IT+0x1bc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d027      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a50      	ldr	r2, [pc, #320]	; (80025c4 <HAL_DMA_Abort_IT+0x1c0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d022      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4f      	ldr	r2, [pc, #316]	; (80025c8 <HAL_DMA_Abort_IT+0x1c4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d01d      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_DMA_Abort_IT+0x1c8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d018      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_DMA_Abort_IT+0x1cc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a4a      	ldr	r2, [pc, #296]	; (80025d4 <HAL_DMA_Abort_IT+0x1d0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_DMA_Abort_IT+0x1d4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d009      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a47      	ldr	r2, [pc, #284]	; (80025dc <HAL_DMA_Abort_IT+0x1d8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a46      	ldr	r2, [pc, #280]	; (80025e0 <HAL_DMA_Abort_IT+0x1dc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_DMA_Abort_IT+0xcc>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_DMA_Abort_IT+0xce>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8086 	beq.w	80025e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2f      	ldr	r2, [pc, #188]	; (80025a4 <HAL_DMA_Abort_IT+0x1a0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04a      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <HAL_DMA_Abort_IT+0x1a4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d045      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <HAL_DMA_Abort_IT+0x1a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d040      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_DMA_Abort_IT+0x1ac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d03b      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <HAL_DMA_Abort_IT+0x1b0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_DMA_Abort_IT+0x1b4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d031      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <HAL_DMA_Abort_IT+0x1b8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02c      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <HAL_DMA_Abort_IT+0x1bc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d027      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a23      	ldr	r2, [pc, #140]	; (80025c4 <HAL_DMA_Abort_IT+0x1c0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d022      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_DMA_Abort_IT+0x1c4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d01d      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a20      	ldr	r2, [pc, #128]	; (80025cc <HAL_DMA_Abort_IT+0x1c8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d018      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_DMA_Abort_IT+0x1cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <HAL_DMA_Abort_IT+0x1d0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_DMA_Abort_IT+0x1d4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1a      	ldr	r2, [pc, #104]	; (80025dc <HAL_DMA_Abort_IT+0x1d8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_DMA_Abort_IT+0x17c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_DMA_Abort_IT+0x1dc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d108      	bne.n	8002592 <HAL_DMA_Abort_IT+0x18e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e178      	b.n	8002884 <HAL_DMA_Abort_IT+0x480>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e16f      	b.n	8002884 <HAL_DMA_Abort_IT+0x480>
 80025a4:	40020010 	.word	0x40020010
 80025a8:	40020028 	.word	0x40020028
 80025ac:	40020040 	.word	0x40020040
 80025b0:	40020058 	.word	0x40020058
 80025b4:	40020070 	.word	0x40020070
 80025b8:	40020088 	.word	0x40020088
 80025bc:	400200a0 	.word	0x400200a0
 80025c0:	400200b8 	.word	0x400200b8
 80025c4:	40020410 	.word	0x40020410
 80025c8:	40020428 	.word	0x40020428
 80025cc:	40020440 	.word	0x40020440
 80025d0:	40020458 	.word	0x40020458
 80025d4:	40020470 	.word	0x40020470
 80025d8:	40020488 	.word	0x40020488
 80025dc:	400204a0 	.word	0x400204a0
 80025e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 020e 	bic.w	r2, r2, #14
 80025f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6c      	ldr	r2, [pc, #432]	; (80027ac <HAL_DMA_Abort_IT+0x3a8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d04a      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6b      	ldr	r2, [pc, #428]	; (80027b0 <HAL_DMA_Abort_IT+0x3ac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d045      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a69      	ldr	r2, [pc, #420]	; (80027b4 <HAL_DMA_Abort_IT+0x3b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d040      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a68      	ldr	r2, [pc, #416]	; (80027b8 <HAL_DMA_Abort_IT+0x3b4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d03b      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a66      	ldr	r2, [pc, #408]	; (80027bc <HAL_DMA_Abort_IT+0x3b8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d036      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a65      	ldr	r2, [pc, #404]	; (80027c0 <HAL_DMA_Abort_IT+0x3bc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d031      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_DMA_Abort_IT+0x3c0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d02c      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a62      	ldr	r2, [pc, #392]	; (80027c8 <HAL_DMA_Abort_IT+0x3c4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d027      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a60      	ldr	r2, [pc, #384]	; (80027cc <HAL_DMA_Abort_IT+0x3c8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d022      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5f      	ldr	r2, [pc, #380]	; (80027d0 <HAL_DMA_Abort_IT+0x3cc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d01d      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5d      	ldr	r2, [pc, #372]	; (80027d4 <HAL_DMA_Abort_IT+0x3d0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d018      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5c      	ldr	r2, [pc, #368]	; (80027d8 <HAL_DMA_Abort_IT+0x3d4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d013      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a5a      	ldr	r2, [pc, #360]	; (80027dc <HAL_DMA_Abort_IT+0x3d8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a59      	ldr	r2, [pc, #356]	; (80027e0 <HAL_DMA_Abort_IT+0x3dc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_DMA_Abort_IT+0x3e0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_DMA_Abort_IT+0x290>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a56      	ldr	r2, [pc, #344]	; (80027e8 <HAL_DMA_Abort_IT+0x3e4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d108      	bne.n	80026a6 <HAL_DMA_Abort_IT+0x2a2>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_DMA_Abort_IT+0x2b2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3c      	ldr	r2, [pc, #240]	; (80027ac <HAL_DMA_Abort_IT+0x3a8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d072      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3a      	ldr	r2, [pc, #232]	; (80027b0 <HAL_DMA_Abort_IT+0x3ac>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d06d      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <HAL_DMA_Abort_IT+0x3b0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d068      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a37      	ldr	r2, [pc, #220]	; (80027b8 <HAL_DMA_Abort_IT+0x3b4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d063      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a36      	ldr	r2, [pc, #216]	; (80027bc <HAL_DMA_Abort_IT+0x3b8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d05e      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <HAL_DMA_Abort_IT+0x3bc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d059      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <HAL_DMA_Abort_IT+0x3c0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d054      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a31      	ldr	r2, [pc, #196]	; (80027c8 <HAL_DMA_Abort_IT+0x3c4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04f      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a30      	ldr	r2, [pc, #192]	; (80027cc <HAL_DMA_Abort_IT+0x3c8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d04a      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <HAL_DMA_Abort_IT+0x3cc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d045      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <HAL_DMA_Abort_IT+0x3d0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d040      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <HAL_DMA_Abort_IT+0x3d4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d03b      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <HAL_DMA_Abort_IT+0x3d8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d036      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_DMA_Abort_IT+0x3dc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <HAL_DMA_Abort_IT+0x3e0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d02c      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <HAL_DMA_Abort_IT+0x3e4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d027      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a24      	ldr	r2, [pc, #144]	; (80027ec <HAL_DMA_Abort_IT+0x3e8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_DMA_Abort_IT+0x3ec>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01d      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <HAL_DMA_Abort_IT+0x3f0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d018      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_DMA_Abort_IT+0x3f4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_DMA_Abort_IT+0x3f8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00e      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_DMA_Abort_IT+0x3fc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d009      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_DMA_Abort_IT+0x400>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d004      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x3a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_DMA_Abort_IT+0x404>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d132      	bne.n	800280c <HAL_DMA_Abort_IT+0x408>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e031      	b.n	800280e <HAL_DMA_Abort_IT+0x40a>
 80027aa:	bf00      	nop
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
 80027ec:	58025408 	.word	0x58025408
 80027f0:	5802541c 	.word	0x5802541c
 80027f4:	58025430 	.word	0x58025430
 80027f8:	58025444 	.word	0x58025444
 80027fc:	58025458 	.word	0x58025458
 8002800:	5802546c 	.word	0x5802546c
 8002804:	58025480 	.word	0x58025480
 8002808:	58025494 	.word	0x58025494
 800280c:	2300      	movs	r3, #0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d028      	beq.n	8002864 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002820:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2201      	movs	r2, #1
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002840:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002858:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002862:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop

08002890 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0cf      	b.n	8002a42 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2223      	movs	r2, #35	; 0x23
 80028b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fcef 	bl	8001298 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <HAL_ETH_Init+0x1bc>)
 80028bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028c0:	4a62      	ldr	r2, [pc, #392]	; (8002a4c <HAL_ETH_Init+0x1bc>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028ca:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <HAL_ETH_Init+0x1bc>)
 80028cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7a1b      	ldrb	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7ff f94d 	bl	8001b80 <HAL_SYSCFG_ETHInterfaceSelect>
 80028e6:	e003      	b.n	80028f0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80028e8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80028ec:	f7ff f948 	bl	8001b80 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80028f0:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_ETH_Init+0x1c0>)
 80028f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800290a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800290c:	f7ff f8fc 	bl	8001b08 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002912:	e011      	b.n	8002938 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002914:	f7ff f8f8 	bl	8001b08 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002922:	d909      	bls.n	8002938 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	22e0      	movs	r2, #224	; 0xe0
 8002930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e084      	b.n	8002a42 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e4      	bne.n	8002914 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f886 	bl	8002a5c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002950:	f001 fe96 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 8002954:	4603      	mov	r3, r0
 8002956:	4a3f      	ldr	r2, [pc, #252]	; (8002a54 <HAL_ETH_Init+0x1c4>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	0c9a      	lsrs	r2, r3, #18
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3a01      	subs	r2, #1
 8002964:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fa71 	bl	8002e50 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002976:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800297a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002986:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800298a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	22e0      	movs	r2, #224	; 0xe0
 80029a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e049      	b.n	8002a42 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_ETH_Init+0x1c8>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6952      	ldr	r2, [r2, #20]
 80029c2:	0051      	lsls	r1, r2, #1
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ce:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fad9 	bl	8002f8a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fb1f 	bl	800301c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	3305      	adds	r3, #5
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4619      	mov	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	3303      	adds	r3, #3
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	061a      	lsls	r2, r3, #24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3301      	adds	r3, #1
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a1c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a2a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	58000400 	.word	0x58000400
 8002a54:	431bde83 	.word	0x431bde83
 8002a58:	ffff8001 	.word	0xffff8001

08002a5c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a76:	f001 fe03 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 8002a7a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d908      	bls.n	8002a96 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d804      	bhi.n	8002a96 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e027      	b.n	8002ae6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d908      	bls.n	8002ab0 <HAL_ETH_SetMDIOClockRange+0x54>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d204      	bcs.n	8002ab0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e01a      	b.n	8002ae6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d303      	bcc.n	8002ac0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d911      	bls.n	8002ae4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d908      	bls.n	8002ada <HAL_ETH_SetMDIOClockRange+0x7e>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d804      	bhi.n	8002ada <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e005      	b.n	8002ae6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e000      	b.n	8002ae6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ae4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	01312cff 	.word	0x01312cff
 8002afc:	02160ebf 	.word	0x02160ebf
 8002b00:	03938700 	.word	0x03938700
 8002b04:	05f5e0ff 	.word	0x05f5e0ff
 8002b08:	08f0d17f 	.word	0x08f0d17f

08002b0c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002b1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	791b      	ldrb	r3, [r3, #4]
 8002b24:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002b26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	7b1b      	ldrb	r3, [r3, #12]
 8002b2c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002b2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	7b5b      	ldrb	r3, [r3, #13]
 8002b34:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	7b9b      	ldrb	r3, [r3, #14]
 8002b3c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002b3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	7bdb      	ldrb	r3, [r3, #15]
 8002b44:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002b46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	7c12      	ldrb	r2, [r2, #16]
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d102      	bne.n	8002b56 <ETH_SetMACConfig+0x4a>
 8002b50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b54:	e000      	b.n	8002b58 <ETH_SetMACConfig+0x4c>
 8002b56:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002b58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	7c52      	ldrb	r2, [r2, #17]
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d102      	bne.n	8002b68 <ETH_SetMACConfig+0x5c>
 8002b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b66:	e000      	b.n	8002b6a <ETH_SetMACConfig+0x5e>
 8002b68:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	7c9b      	ldrb	r3, [r3, #18]
 8002b70:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b72:	431a      	orrs	r2, r3
               macconf->Speed |
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b78:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	7f1b      	ldrb	r3, [r3, #28]
 8002b84:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	7f5b      	ldrb	r3, [r3, #29]
 8002b8c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	7f92      	ldrb	r2, [r2, #30]
 8002b94:	2a00      	cmp	r2, #0
 8002b96:	d102      	bne.n	8002b9e <ETH_SetMACConfig+0x92>
 8002b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9c:	e000      	b.n	8002ba0 <ETH_SetMACConfig+0x94>
 8002b9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002ba0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	7fdb      	ldrb	r3, [r3, #31]
 8002ba6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ba8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d102      	bne.n	8002bba <ETH_SetMACConfig+0xae>
 8002bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb8:	e000      	b.n	8002bbc <ETH_SetMACConfig+0xb0>
 8002bba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002bbc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002bc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002bcc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b56      	ldr	r3, [pc, #344]	; (8002d38 <ETH_SetMACConfig+0x22c>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bf8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c00:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002c02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002c0a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002c0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	d102      	bne.n	8002c1e <ETH_SetMACConfig+0x112>
 8002c18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c1c:	e000      	b.n	8002c20 <ETH_SetMACConfig+0x114>
 8002c1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002c20:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <ETH_SetMACConfig+0x230>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c44:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <ETH_SetMACConfig+0x234>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c68:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d101      	bne.n	8002c7e <ETH_SetMACConfig+0x172>
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	e000      	b.n	8002c80 <ETH_SetMACConfig+0x174>
 8002c7e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002c80:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c86:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c92:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002c96:	4013      	ands	r3, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002ca8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002cb0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f023 0103 	bic.w	r1, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002cd6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002cf2:	2a00      	cmp	r2, #0
 8002cf4:	d101      	bne.n	8002cfa <ETH_SetMACConfig+0x1ee>
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	e000      	b.n	8002cfc <ETH_SetMACConfig+0x1f0>
 8002cfa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002cfc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002d04:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002d06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002d0e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d1c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	00048083 	.word	0x00048083
 8002d3c:	c0f88000 	.word	0xc0f88000
 8002d40:	fffffef0 	.word	0xfffffef0

08002d44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b38      	ldr	r3, [pc, #224]	; (8002e3c <ETH_SetDMAConfig+0xf8>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	6811      	ldr	r1, [r2, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d6a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	791b      	ldrb	r3, [r3, #4]
 8002d70:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	7b1b      	ldrb	r3, [r3, #12]
 8002d7c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <ETH_SetDMAConfig+0xfc>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d9c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7b5b      	ldrb	r3, [r3, #13]
 8002da2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <ETH_SetDMAConfig+0x100>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dc8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	7d1b      	ldrb	r3, [r3, #20]
 8002dd4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002dd6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7f5b      	ldrb	r3, [r3, #29]
 8002ddc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <ETH_SetDMAConfig+0x104>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	68f9      	ldr	r1, [r7, #12]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dfe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	7f1b      	ldrb	r3, [r3, #28]
 8002e06:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e18:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <ETH_SetDMAConfig+0x108>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	430b      	orrs	r3, r1
 8002e28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e2c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	ffff87fd 	.word	0xffff87fd
 8002e40:	ffff2ffe 	.word	0xffff2ffe
 8002e44:	fffec000 	.word	0xfffec000
 8002e48:	ffc0efef 	.word	0xffc0efef
 8002e4c:	7fc0ffff 	.word	0x7fc0ffff

08002e50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b0a4      	sub	sp, #144	; 0x90
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e90:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002ea8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002eac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002efa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f04:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fde6 	bl	8002b0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f44:	2301      	movs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002f70:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f76:	f107 0308 	add.w	r3, r7, #8
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fee1 	bl	8002d44 <ETH_SetDMAConfig>
}
 8002f82:	bf00      	nop
 8002f84:	3790      	adds	r7, #144	; 0x90
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e01d      	b.n	8002fd4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68d9      	ldr	r1, [r3, #12]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	3206      	adds	r2, #6
 8002fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d9de      	bls.n	8002f98 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2303      	movs	r3, #3
 8002fec:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800300c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e023      	b.n	8003072 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6919      	ldr	r1, [r3, #16]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	3212      	adds	r2, #18
 8003068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d9d8      	bls.n	800302a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309e:	461a      	mov	r2, r3
 80030a0:	2303      	movs	r3, #3
 80030a2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <HAL_GPIO_Init+0x234>)
 80030e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030ea:	e194      	b.n	8003416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8186 	beq.w	8003410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d005      	beq.n	800311c <HAL_GPIO_Init+0x44>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d130      	bne.n	800317e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003152:	2201      	movs	r2, #1
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0201 	and.w	r2, r3, #1
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d017      	beq.n	80031ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d123      	bne.n	800320e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	69b9      	ldr	r1, [r7, #24]
 800320a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80e0 	beq.w	8003410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003250:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_GPIO_Init+0x238>)
 8003252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003256:	4a2e      	ldr	r2, [pc, #184]	; (8003310 <HAL_GPIO_Init+0x238>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_GPIO_Init+0x238>)
 8003262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a29      	ldr	r2, [pc, #164]	; (8003314 <HAL_GPIO_Init+0x23c>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_GPIO_Init+0x240>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d052      	beq.n	8003340 <HAL_GPIO_Init+0x268>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_GPIO_Init+0x244>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d031      	beq.n	8003306 <HAL_GPIO_Init+0x22e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_GPIO_Init+0x248>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02b      	beq.n	8003302 <HAL_GPIO_Init+0x22a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_GPIO_Init+0x24c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d025      	beq.n	80032fe <HAL_GPIO_Init+0x226>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_GPIO_Init+0x250>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01f      	beq.n	80032fa <HAL_GPIO_Init+0x222>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_GPIO_Init+0x254>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d019      	beq.n	80032f6 <HAL_GPIO_Init+0x21e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_GPIO_Init+0x258>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_GPIO_Init+0x21a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_GPIO_Init+0x25c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00d      	beq.n	80032ee <HAL_GPIO_Init+0x216>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_GPIO_Init+0x260>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x212>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <HAL_GPIO_Init+0x264>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_GPIO_Init+0x20e>
 80032e2:	2309      	movs	r3, #9
 80032e4:	e02d      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 80032e6:	230a      	movs	r3, #10
 80032e8:	e02b      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 80032ea:	2308      	movs	r3, #8
 80032ec:	e029      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 80032ee:	2307      	movs	r3, #7
 80032f0:	e027      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 80032f2:	2306      	movs	r3, #6
 80032f4:	e025      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e023      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e021      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 80032fe:	2303      	movs	r3, #3
 8003300:	e01f      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 8003302:	2302      	movs	r3, #2
 8003304:	e01d      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 8003306:	2301      	movs	r3, #1
 8003308:	e01b      	b.n	8003342 <HAL_GPIO_Init+0x26a>
 800330a:	bf00      	nop
 800330c:	58000080 	.word	0x58000080
 8003310:	58024400 	.word	0x58024400
 8003314:	58000400 	.word	0x58000400
 8003318:	58020000 	.word	0x58020000
 800331c:	58020400 	.word	0x58020400
 8003320:	58020800 	.word	0x58020800
 8003324:	58020c00 	.word	0x58020c00
 8003328:	58021000 	.word	0x58021000
 800332c:	58021400 	.word	0x58021400
 8003330:	58021800 	.word	0x58021800
 8003334:	58021c00 	.word	0x58021c00
 8003338:	58022000 	.word	0x58022000
 800333c:	58022400 	.word	0x58022400
 8003340:	2300      	movs	r3, #0
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	f002 0203 	and.w	r2, r2, #3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4093      	lsls	r3, r2
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003352:	4938      	ldr	r1, [pc, #224]	; (8003434 <HAL_GPIO_Init+0x35c>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	f47f ae63 	bne.w	80030ec <HAL_GPIO_Init+0x14>
  }
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	3724      	adds	r7, #36	; 0x24
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	58000400 	.word	0x58000400

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	4603      	mov	r3, r0
 8003472:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003478:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fe93 	bl	80011bc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800349e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a0:	b08f      	sub	sp, #60	; 0x3c
 80034a2:	af0a      	add	r7, sp, #40	; 0x28
 80034a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e116      	b.n	80036de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe f8e8 	bl	80016a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2203      	movs	r2, #3
 80034d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f006 fda4 	bl	800a03c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	687e      	ldr	r6, [r7, #4]
 80034fc:	466d      	mov	r5, sp
 80034fe:	f106 0410 	add.w	r4, r6, #16
 8003502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800350e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003512:	1d33      	adds	r3, r6, #4
 8003514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003516:	6838      	ldr	r0, [r7, #0]
 8003518:	f006 fd22 	bl	8009f60 <USB_CoreInit>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0d7      	b.n	80036de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f006 fd92 	bl	800a05e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	e04a      	b.n	80035d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	333d      	adds	r3, #61	; 0x3d
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	333c      	adds	r3, #60	; 0x3c
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	b298      	uxth	r0, r3
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3344      	adds	r3, #68	; 0x44
 800357c:	4602      	mov	r2, r0
 800357e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3340      	adds	r3, #64	; 0x40
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3348      	adds	r3, #72	; 0x48
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334c      	adds	r3, #76	; 0x4c
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3354      	adds	r3, #84	; 0x54
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	3301      	adds	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3af      	bcc.n	8003540 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e044      	b.n	8003670 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	3301      	adds	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	d3b5      	bcc.n	80035e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	687e      	ldr	r6, [r7, #4]
 8003682:	466d      	mov	r5, sp
 8003684:	f106 0410 	add.w	r4, r6, #16
 8003688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003690:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003694:	e885 0003 	stmia.w	r5, {r0, r1}
 8003698:	1d33      	adds	r3, r6, #4
 800369a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369c:	6838      	ldr	r0, [r7, #0]
 800369e:	f006 fd2b 	bl	800a0f8 <USB_DevInit>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e014      	b.n	80036de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d102      	bne.n	80036d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f80b 	bl	80036e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f006 fee9 	bl	800a4ae <USB_DevDisconnect>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_PCDEx_ActivateLPM+0x44>)
 8003718:	4313      	orrs	r3, r2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	10000003 	.word	0x10000003

08003730 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_PWREx_ConfigSupply+0x70>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	d00a      	beq.n	800375a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_PWREx_ConfigSupply+0x70>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e01f      	b.n	8003796 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e01d      	b.n	8003796 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_PWREx_ConfigSupply+0x70>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	490f      	ldr	r1, [pc, #60]	; (80037a0 <HAL_PWREx_ConfigSupply+0x70>)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4313      	orrs	r3, r2
 8003768:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800376a:	f7fe f9cd 	bl	8001b08 <HAL_GetTick>
 800376e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003770:	e009      	b.n	8003786 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003772:	f7fe f9c9 	bl	8001b08 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003780:	d901      	bls.n	8003786 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e007      	b.n	8003796 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_PWREx_ConfigSupply+0x70>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003792:	d1ee      	bne.n	8003772 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	58024800 	.word	0x58024800

080037a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b2:	60d3      	str	r3, [r2, #12]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	58024800 	.word	0x58024800

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08c      	sub	sp, #48	; 0x30
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f000 bc1d 	b.w	8004012 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8087 	beq.w	80038f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e6:	4b99      	ldr	r3, [pc, #612]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037f0:	4b96      	ldr	r3, [pc, #600]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d007      	beq.n	800380c <HAL_RCC_OscConfig+0x48>
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	2b18      	cmp	r3, #24
 8003800:	d110      	bne.n	8003824 <HAL_RCC_OscConfig+0x60>
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b8f      	ldr	r3, [pc, #572]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d06c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x12e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d168      	bne.n	80038f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e3f6      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x78>
 800382e:	4b87      	ldr	r3, [pc, #540]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a86      	ldr	r2, [pc, #536]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e02e      	b.n	800389a <HAL_RCC_OscConfig+0xd6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10c      	bne.n	800385e <HAL_RCC_OscConfig+0x9a>
 8003844:	4b81      	ldr	r3, [pc, #516]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a80      	ldr	r2, [pc, #512]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b7e      	ldr	r3, [pc, #504]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7d      	ldr	r2, [pc, #500]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	e01d      	b.n	800389a <HAL_RCC_OscConfig+0xd6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003866:	d10c      	bne.n	8003882 <HAL_RCC_OscConfig+0xbe>
 8003868:	4b78      	ldr	r3, [pc, #480]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a77      	ldr	r2, [pc, #476]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800386e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b75      	ldr	r3, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a74      	ldr	r2, [pc, #464]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800387a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	e00b      	b.n	800389a <HAL_RCC_OscConfig+0xd6>
 8003882:	4b72      	ldr	r3, [pc, #456]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a71      	ldr	r2, [pc, #452]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003898:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe f931 	bl	8001b08 <HAL_GetTick>
 80038a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038aa:	f7fe f92d 	bl	8001b08 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e3aa      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038bc:	4b63      	ldr	r3, [pc, #396]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0xe6>
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fe f91d 	bl	8001b08 <HAL_GetTick>
 80038ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d2:	f7fe f919 	bl	8001b08 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e396      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038e4:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x10e>
 80038f0:	e000      	b.n	80038f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80cb 	beq.w	8003a98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800390a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800390c:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_RCC_OscConfig+0x164>
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2b18      	cmp	r3, #24
 800391c:	d156      	bne.n	80039cc <HAL_RCC_OscConfig+0x208>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d151      	bne.n	80039cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003928:	4b48      	ldr	r3, [pc, #288]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_OscConfig+0x17c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e368      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003940:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 0219 	bic.w	r2, r3, #25
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	493f      	ldr	r1, [pc, #252]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003952:	f7fe f8d9 	bl	8001b08 <HAL_GetTick>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe f8d5 	bl	8001b08 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e352      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800396c:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	f7fe f8f6 	bl	8001b68 <HAL_GetREVID>
 800397c:	4603      	mov	r3, r0
 800397e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003982:	4293      	cmp	r3, r2
 8003984:	d817      	bhi.n	80039b6 <HAL_RCC_OscConfig+0x1f2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d108      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1dc>
 800398e:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003996:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800399e:	e07b      	b.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	4927      	ldr	r1, [pc, #156]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b4:	e070      	b.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	4921      	ldr	r1, [pc, #132]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ca:	e065      	b.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d048      	beq.n	8003a66 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 0219 	bic.w	r2, r3, #25
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	491a      	ldr	r1, [pc, #104]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fe f88f 	bl	8001b08 <HAL_GetTick>
 80039ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ee:	f7fe f88b 	bl	8001b08 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e308      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0c:	f7fe f8ac 	bl	8001b68 <HAL_GetREVID>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d81a      	bhi.n	8003a50 <HAL_RCC_OscConfig+0x28c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d108      	bne.n	8003a34 <HAL_RCC_OscConfig+0x270>
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a30:	6053      	str	r3, [r2, #4]
 8003a32:	e031      	b.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	4902      	ldr	r1, [pc, #8]	; (8003a4c <HAL_RCC_OscConfig+0x288>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
 8003a48:	e026      	b.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
 8003a4a:	bf00      	nop
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	4b9a      	ldr	r3, [pc, #616]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	4997      	ldr	r1, [pc, #604]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
 8003a64:	e018      	b.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b95      	ldr	r3, [pc, #596]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a94      	ldr	r2, [pc, #592]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fe f849 	bl	8001b08 <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7fe f845 	bl	8001b08 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e2c2      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a8c:	4b8b      	ldr	r3, [pc, #556]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f0      	bne.n	8003a7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a9 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa6:	4b85      	ldr	r3, [pc, #532]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ab0:	4b82      	ldr	r3, [pc, #520]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d007      	beq.n	8003acc <HAL_RCC_OscConfig+0x308>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b18      	cmp	r3, #24
 8003ac0:	d13a      	bne.n	8003b38 <HAL_RCC_OscConfig+0x374>
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d135      	bne.n	8003b38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003acc:	4b7b      	ldr	r3, [pc, #492]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x320>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e296      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ae4:	f7fe f840 	bl	8001b68 <HAL_GetREVID>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f241 0203 	movw	r2, #4099	; 0x1003
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d817      	bhi.n	8003b22 <HAL_RCC_OscConfig+0x35e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d108      	bne.n	8003b0c <HAL_RCC_OscConfig+0x348>
 8003afa:	4b70      	ldr	r3, [pc, #448]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b02:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b0a:	e075      	b.n	8003bf8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	069b      	lsls	r3, r3, #26
 8003b1a:	4968      	ldr	r1, [pc, #416]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b20:	e06a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b22:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	4962      	ldr	r1, [pc, #392]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b36:	e05f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d042      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b40:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5d      	ldr	r2, [pc, #372]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd ffdc 	bl	8001b08 <HAL_GetTick>
 8003b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b54:	f7fd ffd8 	bl	8001b08 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e255      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b66:	4b55      	ldr	r3, [pc, #340]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b72:	f7fd fff9 	bl	8001b68 <HAL_GetREVID>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d817      	bhi.n	8003bb0 <HAL_RCC_OscConfig+0x3ec>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d108      	bne.n	8003b9a <HAL_RCC_OscConfig+0x3d6>
 8003b88:	4b4c      	ldr	r3, [pc, #304]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b90:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b96:	6053      	str	r3, [r2, #4]
 8003b98:	e02e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x434>
 8003b9a:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	069b      	lsls	r3, r3, #26
 8003ba8:	4944      	ldr	r1, [pc, #272]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
 8003bae:	e023      	b.n	8003bf8 <HAL_RCC_OscConfig+0x434>
 8003bb0:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	493f      	ldr	r1, [pc, #252]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60cb      	str	r3, [r1, #12]
 8003bc4:	e018      	b.n	8003bf8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3c      	ldr	r2, [pc, #240]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd2:	f7fd ff99 	bl	8001b08 <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003bda:	f7fd ff95 	bl	8001b08 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e212      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bec:	4b33      	ldr	r3, [pc, #204]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d036      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d019      	beq.n	8003c40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c10:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd ff76 	bl	8001b08 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fd ff72 	bl	8001b08 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1ef      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x45c>
 8003c3e:	e018      	b.n	8003c72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd ff5c 	bl	8001b08 <HAL_GetTick>
 8003c50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c54:	f7fd ff58 	bl	8001b08 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1d5      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d039      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01c      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c92:	f7fd ff39 	bl	8001b08 <HAL_GetTick>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c9a:	f7fd ff35 	bl	8001b08 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1b2      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_OscConfig+0x4f8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x4d6>
 8003cb8:	e01b      	b.n	8003cf2 <HAL_RCC_OscConfig+0x52e>
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cc0:	4b9b      	ldr	r3, [pc, #620]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a9a      	ldr	r2, [pc, #616]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ccc:	f7fd ff1c 	bl	8001b08 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cd4:	f7fd ff18 	bl	8001b08 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e195      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ce6:	4b92      	ldr	r3, [pc, #584]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8081 	beq.w	8003e02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d00:	4b8c      	ldr	r3, [pc, #560]	; (8003f34 <HAL_RCC_OscConfig+0x770>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a8b      	ldr	r2, [pc, #556]	; (8003f34 <HAL_RCC_OscConfig+0x770>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fefc 	bl	8001b08 <HAL_GetTick>
 8003d10:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d14:	f7fd fef8 	bl	8001b08 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e175      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d26:	4b83      	ldr	r3, [pc, #524]	; (8003f34 <HAL_RCC_OscConfig+0x770>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d106      	bne.n	8003d48 <HAL_RCC_OscConfig+0x584>
 8003d3a:	4b7d      	ldr	r3, [pc, #500]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	4a7c      	ldr	r2, [pc, #496]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6713      	str	r3, [r2, #112]	; 0x70
 8003d46:	e02d      	b.n	8003da4 <HAL_RCC_OscConfig+0x5e0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCC_OscConfig+0x5a6>
 8003d50:	4b77      	ldr	r3, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a76      	ldr	r2, [pc, #472]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	4b74      	ldr	r3, [pc, #464]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d62:	f023 0304 	bic.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	e01c      	b.n	8003da4 <HAL_RCC_OscConfig+0x5e0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x5c8>
 8003d72:	4b6f      	ldr	r3, [pc, #444]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a6e      	ldr	r2, [pc, #440]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a6b      	ldr	r2, [pc, #428]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0x5e0>
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a67      	ldr	r2, [pc, #412]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a64      	ldr	r2, [pc, #400]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd feac 	bl	8001b08 <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fd fea8 	bl	8001b08 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e123      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dca:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <HAL_RCC_OscConfig+0x5f0>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fd fe96 	bl	8001b08 <HAL_GetTick>
 8003ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fd fe92 	bl	8001b08 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e10d      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ee      	bne.n	8003de0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8102 	beq.w	8004010 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e0c:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e14:	2b18      	cmp	r3, #24
 8003e16:	f000 80bd 	beq.w	8003f94 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	f040 809e 	bne.w	8003f60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e24:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd fe6a 	bl	8001b08 <HAL_GetTick>
 8003e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd fe66 	bl	8001b08 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0e3      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5a:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <HAL_RCC_OscConfig+0x774>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	4931      	ldr	r1, [pc, #196]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	3b01      	subs	r3, #1
 8003e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	025b      	lsls	r3, r3, #9
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ea0:	4923      	ldr	r1, [pc, #140]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb6:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <HAL_RCC_OscConfig+0x778>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ebe:	00d2      	lsls	r2, r2, #3
 8003ec0:	491b      	ldr	r1, [pc, #108]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	f023 020c 	bic.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4917      	ldr	r1, [pc, #92]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f023 0202 	bic.w	r2, r3, #2
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	4912      	ldr	r1, [pc, #72]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <HAL_RCC_OscConfig+0x76c>)
 8003f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd fdef 	bl	8001b08 <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f2c:	e011      	b.n	8003f52 <HAL_RCC_OscConfig+0x78e>
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
 8003f34:	58024800 	.word	0x58024800
 8003f38:	fffffc0c 	.word	0xfffffc0c
 8003f3c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd fde2 	bl	8001b08 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e05f      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f52:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_OscConfig+0x858>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x77c>
 8003f5e:	e057      	b.n	8004010 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_RCC_OscConfig+0x858>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <HAL_RCC_OscConfig+0x858>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fdcc 	bl	8001b08 <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fd fdc8 	bl	8001b08 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e045      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f86:	4b25      	ldr	r3, [pc, #148]	; (800401c <HAL_RCC_OscConfig+0x858>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x7b0>
 8003f92:	e03d      	b.n	8004010 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <HAL_RCC_OscConfig+0x858>)
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCC_OscConfig+0x858>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d031      	beq.n	800400c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f003 0203 	and.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d12a      	bne.n	800400c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d122      	bne.n	800400c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d11a      	bne.n	800400c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0a5b      	lsrs	r3, r3, #9
 8003fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d111      	bne.n	800400c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	0c1b      	lsrs	r3, r3, #16
 8003fec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d108      	bne.n	800400c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0e1b      	lsrs	r3, r3, #24
 8003ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3730      	adds	r7, #48	; 0x30
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	58024400 	.word	0x58024400

08004020 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e19c      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b8a      	ldr	r3, [pc, #552]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d910      	bls.n	8004064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b87      	ldr	r3, [pc, #540]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 020f 	bic.w	r2, r3, #15
 800404a:	4985      	ldr	r1, [pc, #532]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b83      	ldr	r3, [pc, #524]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e184      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800407c:	429a      	cmp	r2, r3
 800407e:	d908      	bls.n	8004092 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004080:	4b78      	ldr	r3, [pc, #480]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4975      	ldr	r1, [pc, #468]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 800408e:	4313      	orrs	r3, r2
 8004090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	4b70      	ldr	r3, [pc, #448]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d908      	bls.n	80040c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ae:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	496a      	ldr	r1, [pc, #424]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	4b64      	ldr	r3, [pc, #400]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040d8:	429a      	cmp	r2, r3
 80040da:	d908      	bls.n	80040ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040dc:	4b61      	ldr	r3, [pc, #388]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	495e      	ldr	r1, [pc, #376]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004106:	429a      	cmp	r2, r3
 8004108:	d908      	bls.n	800411c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800410a:	4b56      	ldr	r3, [pc, #344]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4953      	ldr	r1, [pc, #332]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004118:	4313      	orrs	r3, r2
 800411a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4b4d      	ldr	r3, [pc, #308]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	429a      	cmp	r2, r3
 8004136:	d908      	bls.n	800414a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b4a      	ldr	r3, [pc, #296]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f023 020f 	bic.w	r2, r3, #15
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4947      	ldr	r1, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004146:	4313      	orrs	r3, r2
 8004148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d055      	beq.n	8004202 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	4940      	ldr	r1, [pc, #256]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004164:	4313      	orrs	r3, r2
 8004166:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d107      	bne.n	8004180 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004170:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d121      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0f6      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d107      	bne.n	8004198 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d115      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0ea      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0de      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041b0:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0d6      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041c0:	4b28      	ldr	r3, [pc, #160]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f023 0207 	bic.w	r2, r3, #7
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4925      	ldr	r1, [pc, #148]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d2:	f7fd fc99 	bl	8001b08 <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041da:	f7fd fc95 	bl	8001b08 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e0be      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	429a      	cmp	r2, r3
 8004200:	d1eb      	bne.n	80041da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	429a      	cmp	r2, r3
 800421c:	d208      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f023 020f 	bic.w	r2, r3, #15
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x244>)
 800422c:	4313      	orrs	r3, r2
 800422e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d214      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 020f 	bic.w	r2, r3, #15
 8004246:	4906      	ldr	r1, [pc, #24]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_RCC_ClockConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e086      	b.n	800436e <HAL_RCC_ClockConfig+0x34e>
 8004260:	52002000 	.word	0x52002000
 8004264:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004280:	429a      	cmp	r2, r3
 8004282:	d208      	bcs.n	8004296 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004284:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	4939      	ldr	r1, [pc, #228]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 8004292:	4313      	orrs	r3, r2
 8004294:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d208      	bcs.n	80042c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	492e      	ldr	r1, [pc, #184]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	4b28      	ldr	r3, [pc, #160]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042dc:	429a      	cmp	r2, r3
 80042de:	d208      	bcs.n	80042f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	4922      	ldr	r1, [pc, #136]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d010      	beq.n	8004320 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800430a:	429a      	cmp	r2, r3
 800430c:	d208      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	4917      	ldr	r1, [pc, #92]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 800431c:	4313      	orrs	r3, r2
 800431e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004320:	f000 f834 	bl	800438c <HAL_RCC_GetSysClockFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	4912      	ldr	r1, [pc, #72]	; (800437c <HAL_RCC_ClockConfig+0x35c>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_RCC_ClockConfig+0x358>)
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	4a0d      	ldr	r2, [pc, #52]	; (800437c <HAL_RCC_ClockConfig+0x35c>)
 8004348:	5cd3      	ldrb	r3, [r2, r3]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <HAL_RCC_ClockConfig+0x360>)
 8004356:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004358:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <HAL_RCC_ClockConfig+0x364>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <HAL_RCC_ClockConfig+0x368>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd fb86 	bl	8001a74 <HAL_InitTick>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	58024400 	.word	0x58024400
 800437c:	0800b024 	.word	0x0800b024
 8004380:	24000004 	.word	0x24000004
 8004384:	24000000 	.word	0x24000000
 8004388:	24000008 	.word	0x24000008

0800438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004392:	4bb3      	ldr	r3, [pc, #716]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800439a:	2b18      	cmp	r3, #24
 800439c:	f200 8155 	bhi.w	800464a <HAL_RCC_GetSysClockFreq+0x2be>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	0800440d 	.word	0x0800440d
 80043ac:	0800464b 	.word	0x0800464b
 80043b0:	0800464b 	.word	0x0800464b
 80043b4:	0800464b 	.word	0x0800464b
 80043b8:	0800464b 	.word	0x0800464b
 80043bc:	0800464b 	.word	0x0800464b
 80043c0:	0800464b 	.word	0x0800464b
 80043c4:	0800464b 	.word	0x0800464b
 80043c8:	08004433 	.word	0x08004433
 80043cc:	0800464b 	.word	0x0800464b
 80043d0:	0800464b 	.word	0x0800464b
 80043d4:	0800464b 	.word	0x0800464b
 80043d8:	0800464b 	.word	0x0800464b
 80043dc:	0800464b 	.word	0x0800464b
 80043e0:	0800464b 	.word	0x0800464b
 80043e4:	0800464b 	.word	0x0800464b
 80043e8:	08004439 	.word	0x08004439
 80043ec:	0800464b 	.word	0x0800464b
 80043f0:	0800464b 	.word	0x0800464b
 80043f4:	0800464b 	.word	0x0800464b
 80043f8:	0800464b 	.word	0x0800464b
 80043fc:	0800464b 	.word	0x0800464b
 8004400:	0800464b 	.word	0x0800464b
 8004404:	0800464b 	.word	0x0800464b
 8004408:	0800443f 	.word	0x0800443f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800440c:	4b94      	ldr	r3, [pc, #592]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004418:	4b91      	ldr	r3, [pc, #580]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	08db      	lsrs	r3, r3, #3
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	4a90      	ldr	r2, [pc, #576]	; (8004664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800442a:	e111      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800442c:	4b8d      	ldr	r3, [pc, #564]	; (8004664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800442e:	61bb      	str	r3, [r7, #24]
    break;
 8004430:	e10e      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004432:	4b8d      	ldr	r3, [pc, #564]	; (8004668 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004434:	61bb      	str	r3, [r7, #24]
    break;
 8004436:	e10b      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004438:	4b8c      	ldr	r3, [pc, #560]	; (800466c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800443a:	61bb      	str	r3, [r7, #24]
    break;
 800443c:	e108      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004448:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004452:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004454:	4b82      	ldr	r3, [pc, #520]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800445e:	4b80      	ldr	r3, [pc, #512]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	08db      	lsrs	r3, r3, #3
 8004464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80e1 	beq.w	8004644 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b02      	cmp	r3, #2
 8004486:	f000 8083 	beq.w	8004590 <HAL_RCC_GetSysClockFreq+0x204>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b02      	cmp	r3, #2
 800448e:	f200 80a1 	bhi.w	80045d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d056      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x1c0>
 800449e:	e099      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02d      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044ac:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	08db      	lsrs	r3, r3, #3
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	4a6b      	ldr	r2, [pc, #428]	; (8004664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004506:	e087      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004674 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a02 	vldr	s12, [r7, #8]
 800452e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004670 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454a:	e065      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004678 <HAL_RCC_GetSysClockFreq+0x2ec>
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004572:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004670 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458e:	e043      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800467c <HAL_RCC_GetSysClockFreq+0x2f0>
 800459e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a2:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045d2:	e021      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004678 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004616:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	0a5b      	lsrs	r3, r3, #9
 800461e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004622:	3301      	adds	r3, #1
 8004624:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004630:	edd7 6a07 	vldr	s13, [r7, #28]
 8004634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463c:	ee17 3a90 	vmov	r3, s15
 8004640:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004642:	e005      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
    break;
 8004648:	e002      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800464c:	61bb      	str	r3, [r7, #24]
    break;
 800464e:	bf00      	nop
  }

  return sysclockfreq;
 8004650:	69bb      	ldr	r3, [r7, #24]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3724      	adds	r7, #36	; 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
 8004664:	03d09000 	.word	0x03d09000
 8004668:	003d0900 	.word	0x003d0900
 800466c:	007a1200 	.word	0x007a1200
 8004670:	46000000 	.word	0x46000000
 8004674:	4c742400 	.word	0x4c742400
 8004678:	4a742400 	.word	0x4a742400
 800467c:	4af42400 	.word	0x4af42400

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004686:	f7ff fe81 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800468a:	4602      	mov	r2, r0
 800468c:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	490f      	ldr	r1, [pc, #60]	; (80046d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004698:	5ccb      	ldrb	r3, [r1, r3]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80046bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046be:	4a07      	ldr	r2, [pc, #28]	; (80046dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	58024400 	.word	0x58024400
 80046d4:	0800b024 	.word	0x0800b024
 80046d8:	24000004 	.word	0x24000004
 80046dc:	24000000 	.word	0x24000000

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80046e4:	f7ff ffcc 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	58024400 	.word	0x58024400
 8004708:	0800b024 	.word	0x0800b024

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004710:	f7ff ffb6 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	58024400 	.word	0x58024400
 8004734:	0800b024 	.word	0x0800b024

08004738 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004740:	2300      	movs	r3, #0
 8004742:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004744:	2300      	movs	r3, #0
 8004746:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d03f      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800475c:	d02a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800475e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004762:	d824      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004768:	d018      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800476a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476e:	d81e      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004778:	d007      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800477a:	e018      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800477c:	4ba3      	ldr	r3, [pc, #652]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	4aa2      	ldr	r2, [pc, #648]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004788:	e015      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3304      	adds	r3, #4
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f001 f9d5 	bl	8005b40 <RCCEx_PLL2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800479a:	e00c      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3324      	adds	r3, #36	; 0x24
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fa7e 	bl	8005ca4 <RCCEx_PLL3_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047ac:	e003      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
      break;
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047bc:	4b93      	ldr	r3, [pc, #588]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c8:	4990      	ldr	r1, [pc, #576]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	650b      	str	r3, [r1, #80]	; 0x50
 80047ce:	e001      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
 80047d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d03d      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d826      	bhi.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004805 	.word	0x08004805
 80047f4:	08004813 	.word	0x08004813
 80047f8:	08004825 	.word	0x08004825
 80047fc:	0800483d 	.word	0x0800483d
 8004800:	0800483d 	.word	0x0800483d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004804:	4b81      	ldr	r3, [pc, #516]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	4a80      	ldr	r2, [pc, #512]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800480a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004810:	e015      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f001 f991 	bl	8005b40 <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004822:	e00c      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fa3a 	bl	8005ca4 <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004834:	e003      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
      break;
 800483a:	e000      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800483c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004844:	4b71      	ldr	r3, [pc, #452]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	f023 0207 	bic.w	r2, r3, #7
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	496e      	ldr	r1, [pc, #440]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	650b      	str	r3, [r1, #80]	; 0x50
 8004856:	e001      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004864:	2b00      	cmp	r3, #0
 8004866:	d042      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004870:	d02b      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d825      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004878:	2bc0      	cmp	r3, #192	; 0xc0
 800487a:	d028      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800487c:	2bc0      	cmp	r3, #192	; 0xc0
 800487e:	d821      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d016      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d81d      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d007      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004890:	e018      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004892:	4b5e      	ldr	r3, [pc, #376]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4a5d      	ldr	r2, [pc, #372]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800489e:	e017      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f94a 	bl	8005b40 <RCCEx_PLL2_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048b0:	e00e      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3324      	adds	r3, #36	; 0x24
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 f9f3 	bl	8005ca4 <RCCEx_PLL3_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048c2:	e005      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
      break;
 80048c8:	e002      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80048ca:	bf00      	nop
 80048cc:	e000      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80048ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80048d6:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	494a      	ldr	r1, [pc, #296]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	650b      	str	r3, [r1, #80]	; 0x50
 80048e8:	e001      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d049      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004904:	d030      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800490a:	d82a      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800490c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004910:	d02c      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004912:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004916:	d824      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800491c:	d018      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800491e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004922:	d81e      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492c:	d007      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800492e:	e018      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004930:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800493c:	e017      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3304      	adds	r3, #4
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f8fb 	bl	8005b40 <RCCEx_PLL2_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800494e:	e00e      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3324      	adds	r3, #36	; 0x24
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f001 f9a4 	bl	8005ca4 <RCCEx_PLL3_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004960:	e005      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
      break;
 8004966:	e002      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004968:	bf00      	nop
 800496a:	e000      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800496c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004982:	4922      	ldr	r1, [pc, #136]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	658b      	str	r3, [r1, #88]	; 0x58
 8004988:	e001      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04b      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a4:	d030      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80049a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049aa:	d82a      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049b0:	d02e      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80049b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049b6:	d824      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049bc:	d018      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80049be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c2:	d81e      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80049c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049cc:	d007      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80049ce:	e018      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049dc:	e019      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 f8ab 	bl	8005b40 <RCCEx_PLL2_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049ee:	e010      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3324      	adds	r3, #36	; 0x24
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 f954 	bl	8005ca4 <RCCEx_PLL3_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a00:	e007      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
      break;
 8004a06:	e004      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004a08:	bf00      	nop
 8004a0a:	e002      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004a0c:	58024400 	.word	0x58024400
      break;
 8004a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a18:	4b99      	ldr	r3, [pc, #612]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a26:	4996      	ldr	r1, [pc, #600]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	658b      	str	r3, [r1, #88]	; 0x58
 8004a2c:	e001      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d032      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	2b30      	cmp	r3, #48	; 0x30
 8004a44:	d01c      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004a46:	2b30      	cmp	r3, #48	; 0x30
 8004a48:	d817      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d00c      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d813      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d10f      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5a:	4b89      	ldr	r3, [pc, #548]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a88      	ldr	r2, [pc, #544]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a66:	e00e      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f866 	bl	8005b40 <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a78:	e005      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a80:	bf00      	nop
 8004a82:	e000      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a98:	4979      	ldr	r1, [pc, #484]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a9e:	e001      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d047      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab8:	d030      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004abe:	d82a      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004ac0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ac4:	d02c      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aca:	d824      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d018      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad6:	d81e      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004ae2:	e018      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4b66      	ldr	r3, [pc, #408]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a65      	ldr	r2, [pc, #404]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004af0:	e017      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f001 f821 	bl	8005b40 <RCCEx_PLL2_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b02:	e00e      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3324      	adds	r3, #36	; 0x24
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 f8ca 	bl	8005ca4 <RCCEx_PLL3_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b14:	e005      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b28:	4b55      	ldr	r3, [pc, #340]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	4952      	ldr	r1, [pc, #328]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	650b      	str	r3, [r1, #80]	; 0x50
 8004b3a:	e001      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d049      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b54:	d02e      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b5a:	d828      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b60:	d02a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b66:	d822      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b6c:	d026      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004b6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b72:	d81c      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b78:	d010      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b7e:	d816      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01d      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d111      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 ffd5 	bl	8005b40 <RCCEx_PLL2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b9a:	e012      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3324      	adds	r3, #36	; 0x24
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 f87e 	bl	8005ca4 <RCCEx_PLL3_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bac:	e009      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb2:	e006      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bb4:	bf00      	nop
 8004bb6:	e004      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bb8:	bf00      	nop
 8004bba:	e002      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bcc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd4:	492a      	ldr	r1, [pc, #168]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d04d      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bf6:	d02e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bfc:	d828      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c02:	d02a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d822      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004c0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c0e:	d026      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004c10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c14:	d81c      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1a:	d010      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c20:	d816      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01d      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2a:	d111      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	2101      	movs	r1, #1
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 ff84 	bl	8005b40 <RCCEx_PLL2_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c3c:	e012      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3324      	adds	r3, #36	; 0x24
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 f82d 	bl	8005ca4 <RCCEx_PLL3_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c4e:	e009      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	75fb      	strb	r3, [r7, #23]
      break;
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c56:	bf00      	nop
 8004c58:	e004      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c78:	4901      	ldr	r1, [pc, #4]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c7e:	e003      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02f      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9c:	d00e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca2:	d814      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cac:	d10f      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cae:	4baf      	ldr	r3, [pc, #700]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4aae      	ldr	r2, [pc, #696]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cba:	e00c      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 ff3c 	bl	8005b40 <RCCEx_PLL2_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ccc:	e003      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cdc:	4ba3      	ldr	r3, [pc, #652]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce8:	49a0      	ldr	r1, [pc, #640]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	650b      	str	r3, [r1, #80]	; 0x50
 8004cee:	e001      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
 8004cf2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d032      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d81b      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d47 	.word	0x08004d47
 8004d14:	08004d21 	.word	0x08004d21
 8004d18:	08004d2f 	.word	0x08004d2f
 8004d1c:	08004d47 	.word	0x08004d47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d20:	4b92      	ldr	r3, [pc, #584]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a91      	ldr	r2, [pc, #580]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d2c:	e00c      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3304      	adds	r3, #4
 8004d32:	2102      	movs	r1, #2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 ff03 	bl	8005b40 <RCCEx_PLL2_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
      break;
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d4e:	4b87      	ldr	r3, [pc, #540]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	4984      	ldr	r1, [pc, #528]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d60:	e001      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8086 	beq.w	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d74:	4b7e      	ldr	r3, [pc, #504]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7d      	ldr	r2, [pc, #500]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d80:	f7fc fec2 	bl	8001b08 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d86:	e009      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d88:	f7fc febe 	bl	8001b08 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d902      	bls.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	75fb      	strb	r3, [r7, #23]
        break;
 8004d9a:	e005      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d9c:	4b74      	ldr	r3, [pc, #464]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ef      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d166      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004dae:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004db8:	4053      	eors	r3, r2
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d013      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dcc:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a66      	ldr	r2, [pc, #408]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd8:	4b64      	ldr	r3, [pc, #400]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	4a63      	ldr	r2, [pc, #396]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004de4:	4a61      	ldr	r2, [pc, #388]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df4:	d115      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df6:	f7fc fe87 	bl	8001b08 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fc fe83 	bl	8001b08 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d902      	bls.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	75fb      	strb	r3, [r7, #23]
            break;
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e16:	4b55      	ldr	r3, [pc, #340]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ed      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d126      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e36:	d10d      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004e38:	4b4c      	ldr	r3, [pc, #304]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e46:	0919      	lsrs	r1, r3, #4
 8004e48:	4b4a      	ldr	r3, [pc, #296]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	4947      	ldr	r1, [pc, #284]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	610b      	str	r3, [r1, #16]
 8004e52:	e005      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004e54:	4b45      	ldr	r3, [pc, #276]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4a44      	ldr	r2, [pc, #272]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e5e:	6113      	str	r3, [r2, #16]
 8004e60:	4b42      	ldr	r3, [pc, #264]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6e:	493f      	ldr	r1, [pc, #252]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	670b      	str	r3, [r1, #112]	; 0x70
 8004e74:	e004      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	75bb      	strb	r3, [r7, #22]
 8004e7a:	e001      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8085 	beq.w	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e92:	2b28      	cmp	r3, #40	; 0x28
 8004e94:	d866      	bhi.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004f79 	.word	0x08004f79
 8004ea0:	08004f65 	.word	0x08004f65
 8004ea4:	08004f65 	.word	0x08004f65
 8004ea8:	08004f65 	.word	0x08004f65
 8004eac:	08004f65 	.word	0x08004f65
 8004eb0:	08004f65 	.word	0x08004f65
 8004eb4:	08004f65 	.word	0x08004f65
 8004eb8:	08004f65 	.word	0x08004f65
 8004ebc:	08004f41 	.word	0x08004f41
 8004ec0:	08004f65 	.word	0x08004f65
 8004ec4:	08004f65 	.word	0x08004f65
 8004ec8:	08004f65 	.word	0x08004f65
 8004ecc:	08004f65 	.word	0x08004f65
 8004ed0:	08004f65 	.word	0x08004f65
 8004ed4:	08004f65 	.word	0x08004f65
 8004ed8:	08004f65 	.word	0x08004f65
 8004edc:	08004f53 	.word	0x08004f53
 8004ee0:	08004f65 	.word	0x08004f65
 8004ee4:	08004f65 	.word	0x08004f65
 8004ee8:	08004f65 	.word	0x08004f65
 8004eec:	08004f65 	.word	0x08004f65
 8004ef0:	08004f65 	.word	0x08004f65
 8004ef4:	08004f65 	.word	0x08004f65
 8004ef8:	08004f65 	.word	0x08004f65
 8004efc:	08004f79 	.word	0x08004f79
 8004f00:	08004f65 	.word	0x08004f65
 8004f04:	08004f65 	.word	0x08004f65
 8004f08:	08004f65 	.word	0x08004f65
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f65 	.word	0x08004f65
 8004f14:	08004f65 	.word	0x08004f65
 8004f18:	08004f65 	.word	0x08004f65
 8004f1c:	08004f79 	.word	0x08004f79
 8004f20:	08004f65 	.word	0x08004f65
 8004f24:	08004f65 	.word	0x08004f65
 8004f28:	08004f65 	.word	0x08004f65
 8004f2c:	08004f65 	.word	0x08004f65
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08004f65 	.word	0x08004f65
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	08004f79 	.word	0x08004f79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	2101      	movs	r1, #1
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fdfa 	bl	8005b40 <RCCEx_PLL2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f50:	e013      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3324      	adds	r3, #36	; 0x24
 8004f56:	2101      	movs	r1, #1
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fea3 	bl	8005ca4 <RCCEx_PLL3_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f62:	e00a      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
      break;
 8004f68:	e007      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f6a:	bf00      	nop
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	58024800 	.word	0x58024800
 8004f74:	00ffffcf 	.word	0x00ffffcf
      break;
 8004f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f80:	4b96      	ldr	r3, [pc, #600]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8c:	4993      	ldr	r1, [pc, #588]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	654b      	str	r3, [r1, #84]	; 0x54
 8004f92:	e001      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d038      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d821      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004ff7 	.word	0x08004ff7
 8004fb8:	08004fcd 	.word	0x08004fcd
 8004fbc:	08004fdf 	.word	0x08004fdf
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	08004ff7 	.word	0x08004ff7
 8004fc8:	08004ff7 	.word	0x08004ff7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fdb4 	bl	8005b40 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004fdc:	e00c      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3324      	adds	r3, #36	; 0x24
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fe5d 	bl	8005ca4 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ffe:	4b77      	ldr	r3, [pc, #476]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	f023 0207 	bic.w	r2, r3, #7
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500a:	4974      	ldr	r1, [pc, #464]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	654b      	str	r3, [r1, #84]	; 0x54
 8005010:	e001      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d03a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	2b05      	cmp	r3, #5
 800502a:	d821      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005077 	.word	0x08005077
 8005038:	0800504d 	.word	0x0800504d
 800503c:	0800505f 	.word	0x0800505f
 8005040:	08005077 	.word	0x08005077
 8005044:	08005077 	.word	0x08005077
 8005048:	08005077 	.word	0x08005077
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd74 	bl	8005b40 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800505c:	e00c      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	2101      	movs	r1, #1
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fe1d 	bl	8005ca4 <RCCEx_PLL3_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800506e:	e003      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
      break;
 8005074:	e000      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507e:	4b57      	ldr	r3, [pc, #348]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	f023 0207 	bic.w	r2, r3, #7
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	4953      	ldr	r1, [pc, #332]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	658b      	str	r3, [r1, #88]	; 0x58
 8005092:	e001      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d04b      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ae:	d02e      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80050b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050b4:	d828      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d02a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d822      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80050c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050c6:	d026      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80050c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050cc:	d81c      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80050ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d2:	d010      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80050d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d8:	d816      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01d      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80050de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050e2:	d111      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fd28 	bl	8005b40 <RCCEx_PLL2_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80050f4:	e012      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3324      	adds	r3, #36	; 0x24
 80050fa:	2102      	movs	r1, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fdd1 	bl	8005ca4 <RCCEx_PLL3_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005106:	e009      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
      break;
 800510c:	e006      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800510e:	bf00      	nop
 8005110:	e004      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800511a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511c:	7dfb      	ldrb	r3, [r7, #23]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005122:	4b2e      	ldr	r3, [pc, #184]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005130:	492a      	ldr	r1, [pc, #168]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	654b      	str	r3, [r1, #84]	; 0x54
 8005136:	e001      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d04d      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800514e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005152:	d02e      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005154:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005158:	d828      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515e:	d02a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005164:	d822      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800516a:	d026      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800516c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005170:	d81c      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005176:	d010      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800517c:	d816      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01d      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005186:	d111      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	2100      	movs	r1, #0
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fcd6 	bl	8005b40 <RCCEx_PLL2_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005198:	e012      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3324      	adds	r3, #36	; 0x24
 800519e:	2102      	movs	r1, #2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fd7f 	bl	8005ca4 <RCCEx_PLL3_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051aa:	e009      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	75fb      	strb	r3, [r7, #23]
      break;
 80051b0:	e006      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051b2:	bf00      	nop
 80051b4:	e004      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d4:	4901      	ldr	r1, [pc, #4]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	658b      	str	r3, [r1, #88]	; 0x58
 80051da:	e003      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80051dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d04b      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051fa:	d02e      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80051fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005200:	d828      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005206:	d02a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520c:	d822      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800520e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005212:	d026      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005214:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005218:	d81c      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800521e:	d010      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005224:	d816      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01d      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800522a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522e:	d111      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fc82 	bl	8005b40 <RCCEx_PLL2_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005240:	e012      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3324      	adds	r3, #36	; 0x24
 8005246:	2102      	movs	r1, #2
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fd2b 	bl	8005ca4 <RCCEx_PLL3_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005252:	e009      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
      break;
 8005258:	e006      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800525a:	bf00      	nop
 800525c:	e004      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800525e:	bf00      	nop
 8005260:	e002      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800526e:	4b9d      	ldr	r3, [pc, #628]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800527c:	4999      	ldr	r1, [pc, #612]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800527e:	4313      	orrs	r3, r2
 8005280:	658b      	str	r3, [r1, #88]	; 0x58
 8005282:	e001      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	d10a      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	2102      	movs	r1, #2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fcfc 	bl	8005ca4 <RCCEx_PLL3_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052b6:	4b8b      	ldr	r3, [pc, #556]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c4:	4987      	ldr	r1, [pc, #540]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e0:	d10a      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3324      	adds	r3, #36	; 0x24
 80052e6:	2102      	movs	r1, #2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fcdb 	bl	8005ca4 <RCCEx_PLL3_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052f8:	4b7a      	ldr	r3, [pc, #488]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005306:	4977      	ldr	r1, [pc, #476]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005308:	4313      	orrs	r3, r2
 800530a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d034      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800531e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005322:	d01d      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005328:	d817      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005332:	d009      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005334:	e011      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fbff 	bl	8005b40 <RCCEx_PLL2_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005346:	e00c      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3324      	adds	r3, #36	; 0x24
 800534c:	2102      	movs	r1, #2
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fca8 	bl	8005ca4 <RCCEx_PLL3_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
      break;
 800535e:	e000      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005368:	4b5e      	ldr	r3, [pc, #376]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005376:	495b      	ldr	r1, [pc, #364]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005378:	4313      	orrs	r3, r2
 800537a:	658b      	str	r3, [r1, #88]	; 0x58
 800537c:	e001      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d033      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005398:	d01c      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800539a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800539e:	d816      	bhi.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80053a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a4:	d003      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80053a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053aa:	d007      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80053ac:	e00f      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ae:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4a4c      	ldr	r2, [pc, #304]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80053ba:	e00c      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3324      	adds	r3, #36	; 0x24
 80053c0:	2101      	movs	r1, #1
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fc6e 	bl	8005ca4 <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80053cc:	e003      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
      break;
 80053d2:	e000      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80053d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053dc:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ea:	493e      	ldr	r1, [pc, #248]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	654b      	str	r3, [r1, #84]	; 0x54
 80053f0:	e001      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d029      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800540a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540e:	d007      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005410:	e00f      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005412:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	4a33      	ldr	r2, [pc, #204]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800541e:	e00b      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	2102      	movs	r1, #2
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fb8a 	bl	8005b40 <RCCEx_PLL2_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005430:	e002      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]
      break;
 8005436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544a:	4926      	ldr	r1, [pc, #152]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800544c:	4313      	orrs	r3, r2
 800544e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005450:	e001      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	2102      	movs	r1, #2
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fc1b 	bl	8005ca4 <RCCEx_PLL3_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d033      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800548c:	d017      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800548e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005492:	d811      	bhi.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005498:	d013      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800549a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800549e:	d80b      	bhi.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d010      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80054a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a8:	d106      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054aa:	4b0e      	ldr	r3, [pc, #56]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	4a0d      	ldr	r2, [pc, #52]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80054b6:	e007      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
      break;
 80054bc:	e004      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80054c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054da:	4902      	ldr	r1, [pc, #8]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	654b      	str	r3, [r1, #84]	; 0x54
 80054e0:	e004      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054f8:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	492e      	ldr	r1, [pc, #184]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005506:	4313      	orrs	r3, r2
 8005508:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005516:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005524:	4926      	ldr	r1, [pc, #152]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005526:	4313      	orrs	r3, r2
 8005528:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005536:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005542:	491f      	ldr	r1, [pc, #124]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005544:	4313      	orrs	r3, r2
 8005546:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005554:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800555a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800555e:	6113      	str	r3, [r2, #16]
 8005560:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800556a:	4915      	ldr	r1, [pc, #84]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800556c:	4313      	orrs	r3, r2
 800556e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da08      	bge.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800557a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005584:	490e      	ldr	r1, [pc, #56]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005586:	4313      	orrs	r3, r2
 8005588:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	4906      	ldr	r1, [pc, #24]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80055aa:	7dbb      	ldrb	r3, [r7, #22]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e000      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400

080055c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80055c8:	f7ff f85a 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4904      	ldr	r1, [pc, #16]	; (80055ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	58024400 	.word	0x58024400
 80055ec:	0800b024 	.word	0x0800b024

080055f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	; 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055f8:	4ba1      	ldr	r3, [pc, #644]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005602:	4b9f      	ldr	r3, [pc, #636]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	0b1b      	lsrs	r3, r3, #12
 8005608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800560c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800560e:	4b9c      	ldr	r3, [pc, #624]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800561a:	4b99      	ldr	r3, [pc, #612]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8111 	beq.w	8005860 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b02      	cmp	r3, #2
 8005642:	f000 8083 	beq.w	800574c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b02      	cmp	r3, #2
 800564a:	f200 80a1 	bhi.w	8005790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d056      	beq.n	8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800565a:	e099      	b.n	8005790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800565c:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02d      	beq.n	80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005668:	4b85      	ldr	r3, [pc, #532]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	4a84      	ldr	r2, [pc, #528]	; (8005884 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005692:	4b7b      	ldr	r3, [pc, #492]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056c2:	e087      	b.n	80057d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800588c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b6a      	ldr	r3, [pc, #424]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005706:	e065      	b.n	80057d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571a:	4b59      	ldr	r3, [pc, #356]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a03 	vldr	s12, [r7, #12]
 800572e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800574a:	e043      	b.n	80057d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800575a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800575e:	4b48      	ldr	r3, [pc, #288]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005772:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800578e:	e021      	b.n	80057d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a2:	4b37      	ldr	r3, [pc, #220]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80057d4:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	0a5b      	lsrs	r3, r3, #9
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 2a90 	vmov	r2, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005802:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	0c1b      	lsrs	r3, r3, #16
 8005808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800581c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005828:	ee17 2a90 	vmov	r2, s15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	0e1b      	lsrs	r3, r3, #24
 8005836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800584a:	edd7 6a07 	vldr	s13, [r7, #28]
 800584e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005856:	ee17 2a90 	vmov	r2, s15
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800585e:	e008      	b.n	8005872 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	609a      	str	r2, [r3, #8]
}
 8005872:	bf00      	nop
 8005874:	3724      	adds	r7, #36	; 0x24
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	58024400 	.word	0x58024400
 8005884:	03d09000 	.word	0x03d09000
 8005888:	46000000 	.word	0x46000000
 800588c:	4c742400 	.word	0x4c742400
 8005890:	4a742400 	.word	0x4a742400
 8005894:	4af42400 	.word	0x4af42400

08005898 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058a0:	4ba1      	ldr	r3, [pc, #644]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80058aa:	4b9f      	ldr	r3, [pc, #636]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	0d1b      	lsrs	r3, r3, #20
 80058b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058b6:	4b9c      	ldr	r3, [pc, #624]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80058c2:	4b99      	ldr	r3, [pc, #612]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	08db      	lsrs	r3, r3, #3
 80058c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8111 	beq.w	8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	f000 8083 	beq.w	80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	f200 80a1 	bhi.w	8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d056      	beq.n	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005902:	e099      	b.n	8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005904:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02d      	beq.n	800596c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005910:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	4a84      	ldr	r2, [pc, #528]	; (8005b2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593a:	4b7b      	ldr	r3, [pc, #492]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594a:	ed97 6a03 	vldr	s12, [r7, #12]
 800594e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800595e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005966:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800596a:	e087      	b.n	8005a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800597a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597e:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005992:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ae:	e065      	b.n	8005a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c2:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059f2:	e043      	b.n	8005a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a06:	4b48      	ldr	r3, [pc, #288]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a36:	e021      	b.n	8005a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4a:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005a7c:	4b2a      	ldr	r3, [pc, #168]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	0a5b      	lsrs	r3, r3, #9
 8005a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa2:	ee17 2a90 	vmov	r2, s15
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005aaa:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	0c1b      	lsrs	r3, r3, #16
 8005ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad0:	ee17 2a90 	vmov	r2, s15
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005ad8:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	0e1b      	lsrs	r3, r3, #24
 8005ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afe:	ee17 2a90 	vmov	r2, s15
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b06:	e008      	b.n	8005b1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	609a      	str	r2, [r3, #8]
}
 8005b1a:	bf00      	nop
 8005b1c:	3724      	adds	r7, #36	; 0x24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	03d09000 	.word	0x03d09000
 8005b30:	46000000 	.word	0x46000000
 8005b34:	4c742400 	.word	0x4c742400
 8005b38:	4a742400 	.word	0x4a742400
 8005b3c:	4af42400 	.word	0x4af42400

08005b40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b4e:	4b53      	ldr	r3, [pc, #332]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d101      	bne.n	8005b5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e099      	b.n	8005c92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b5e:	4b4f      	ldr	r3, [pc, #316]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a4e      	ldr	r2, [pc, #312]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005b64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6a:	f7fb ffcd 	bl	8001b08 <HAL_GetTick>
 8005b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b70:	e008      	b.n	8005b84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b72:	f7fb ffc9 	bl	8001b08 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e086      	b.n	8005c92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b84:	4b45      	ldr	r3, [pc, #276]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b90:	4b42      	ldr	r3, [pc, #264]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	493f      	ldr	r1, [pc, #252]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	025b      	lsls	r3, r3, #9
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	061b      	lsls	r3, r3, #24
 8005bd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bd4:	4931      	ldr	r1, [pc, #196]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005bda:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	492d      	ldr	r1, [pc, #180]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005bec:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	f023 0220 	bic.w	r2, r3, #32
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	4928      	ldr	r1, [pc, #160]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005bfe:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	4a26      	ldr	r2, [pc, #152]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c04:	f023 0310 	bic.w	r3, r3, #16
 8005c08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c0a:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <RCCEx_PLL2_Config+0x160>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	69d2      	ldr	r2, [r2, #28]
 8005c16:	00d2      	lsls	r2, r2, #3
 8005c18:	4920      	ldr	r1, [pc, #128]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c1e:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	4a1e      	ldr	r2, [pc, #120]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c24:	f043 0310 	orr.w	r3, r3, #16
 8005c28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c30:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	4a19      	ldr	r2, [pc, #100]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c3c:	e00f      	b.n	8005c5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d106      	bne.n	8005c52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c44:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c50:	e005      	b.n	8005c5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6a:	f7fb ff4d 	bl	8001b08 <HAL_GetTick>
 8005c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c70:	e008      	b.n	8005c84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c72:	f7fb ff49 	bl	8001b08 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e006      	b.n	8005c92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <RCCEx_PLL2_Config+0x15c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	58024400 	.word	0x58024400
 8005ca0:	ffff0007 	.word	0xffff0007

08005ca4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cb2:	4b53      	ldr	r3, [pc, #332]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d101      	bne.n	8005cc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e099      	b.n	8005df6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005cc2:	4b4f      	ldr	r3, [pc, #316]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a4e      	ldr	r2, [pc, #312]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cce:	f7fb ff1b 	bl	8001b08 <HAL_GetTick>
 8005cd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005cd4:	e008      	b.n	8005ce8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cd6:	f7fb ff17 	bl	8001b08 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e086      	b.n	8005df6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ce8:	4b45      	ldr	r3, [pc, #276]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f0      	bne.n	8005cd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005cf4:	4b42      	ldr	r3, [pc, #264]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	051b      	lsls	r3, r3, #20
 8005d02:	493f      	ldr	r1, [pc, #252]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	628b      	str	r3, [r1, #40]	; 0x28
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	025b      	lsls	r3, r3, #9
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	061b      	lsls	r3, r3, #24
 8005d34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d38:	4931      	ldr	r1, [pc, #196]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d3e:	4b30      	ldr	r3, [pc, #192]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	492d      	ldr	r1, [pc, #180]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d50:	4b2b      	ldr	r3, [pc, #172]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	4928      	ldr	r1, [pc, #160]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d62:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	4a26      	ldr	r2, [pc, #152]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <RCCEx_PLL3_Config+0x160>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	69d2      	ldr	r2, [r2, #28]
 8005d7a:	00d2      	lsls	r2, r2, #3
 8005d7c:	4920      	ldr	r1, [pc, #128]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d82:	4b1f      	ldr	r3, [pc, #124]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d94:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005da0:	e00f      	b.n	8005dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d106      	bne.n	8005db6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005da8:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4a14      	ldr	r2, [pc, #80]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005dae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005db4:	e005      	b.n	8005dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005db6:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a0e      	ldr	r2, [pc, #56]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dce:	f7fb fe9b 	bl	8001b08 <HAL_GetTick>
 8005dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005dd4:	e008      	b.n	8005de8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dd6:	f7fb fe97 	bl	8001b08 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e006      	b.n	8005df6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <RCCEx_PLL3_Config+0x15c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0f0      	beq.n	8005dd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	58024400 	.word	0x58024400
 8005e04:	ffff0007 	.word	0xffff0007

08005e08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e0f1      	b.n	8005ffe <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a78      	ldr	r2, [pc, #480]	; (8006008 <HAL_SPI_Init+0x200>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <HAL_SPI_Init+0x42>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a77      	ldr	r2, [pc, #476]	; (800600c <HAL_SPI_Init+0x204>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00a      	beq.n	8005e4a <HAL_SPI_Init+0x42>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a75      	ldr	r2, [pc, #468]	; (8006010 <HAL_SPI_Init+0x208>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d005      	beq.n	8005e4a <HAL_SPI_Init+0x42>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b0f      	cmp	r3, #15
 8005e44:	d901      	bls.n	8005e4a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e0d9      	b.n	8005ffe <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 ff74 	bl	8006d38 <SPI_GetPacketSize>
 8005e50:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a6c      	ldr	r2, [pc, #432]	; (8006008 <HAL_SPI_Init+0x200>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00c      	beq.n	8005e76 <HAL_SPI_Init+0x6e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a6a      	ldr	r2, [pc, #424]	; (800600c <HAL_SPI_Init+0x204>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <HAL_SPI_Init+0x6e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a69      	ldr	r2, [pc, #420]	; (8006010 <HAL_SPI_Init+0x208>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d002      	beq.n	8005e76 <HAL_SPI_Init+0x6e>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d811      	bhi.n	8005e9a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005e7a:	4a63      	ldr	r2, [pc, #396]	; (8006008 <HAL_SPI_Init+0x200>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a61      	ldr	r2, [pc, #388]	; (800600c <HAL_SPI_Init+0x204>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_SPI_Init+0x8c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a60      	ldr	r2, [pc, #384]	; (8006010 <HAL_SPI_Init+0x208>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d104      	bne.n	8005e9e <HAL_SPI_Init+0x96>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d901      	bls.n	8005e9e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e0af      	b.n	8005ffe <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fb fabe 	bl	8001434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005eda:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ee4:	d119      	bne.n	8005f1a <HAL_SPI_Init+0x112>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eee:	d103      	bne.n	8005ef8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10c      	bne.n	8005f1a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f08:	d107      	bne.n	8005f1a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	431a      	orrs	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	ea42 0103 	orr.w	r1, r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7a:	ea42 0103 	orr.w	r1, r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d113      	bne.n	8005fba <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fa4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40013000 	.word	0x40013000
 800600c:	40003800 	.word	0x40003800
 8006010:	40003c00 	.word	0x40003c00

08006014 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	4613      	mov	r3, r2
 8006022:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3320      	adds	r3, #32
 800602a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_SPI_Transmit+0x2a>
 800603a:	2302      	movs	r3, #2
 800603c:	e1d7      	b.n	80063ee <HAL_SPI_Transmit+0x3da>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006046:	f7fb fd5f 	bl	8001b08 <HAL_GetTick>
 800604a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d007      	beq.n	8006068 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006058:	2302      	movs	r3, #2
 800605a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006064:	7efb      	ldrb	r3, [r7, #27]
 8006066:	e1c2      	b.n	80063ee <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_SPI_Transmit+0x60>
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d107      	bne.n	8006084 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006080:	7efb      	ldrb	r3, [r7, #27]
 8006082:	e1b4      	b.n	80063ee <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2203      	movs	r2, #3
 8006088:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	88fa      	ldrh	r2, [r7, #6]
 800609e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80060d4:	d107      	bne.n	80060e6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	4b96      	ldr	r3, [pc, #600]	; (8006348 <HAL_SPI_Transmit+0x334>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	88f9      	ldrh	r1, [r7, #6]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	430b      	orrs	r3, r1
 80060f8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0201 	orr.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006112:	d107      	bne.n	8006124 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b0f      	cmp	r3, #15
 800612a:	d947      	bls.n	80061bc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800612c:	e03f      	b.n	80061ae <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b02      	cmp	r3, #2
 800613a:	d114      	bne.n	8006166 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006164:	e023      	b.n	80061ae <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006166:	f7fb fccf 	bl	8001b08 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d803      	bhi.n	800617e <HAL_SPI_Transmit+0x16a>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d102      	bne.n	8006184 <HAL_SPI_Transmit+0x170>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d114      	bne.n	80061ae <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 fd09 	bl	8006b9c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e11f      	b.n	80063ee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1b9      	bne.n	800612e <HAL_SPI_Transmit+0x11a>
 80061ba:	e0f2      	b.n	80063a2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b07      	cmp	r3, #7
 80061c2:	f240 80e7 	bls.w	8006394 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80061c6:	e05d      	b.n	8006284 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d132      	bne.n	800623c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d918      	bls.n	8006214 <HAL_SPI_Transmit+0x200>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d014      	beq.n	8006214 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fa:	1d1a      	adds	r2, r3, #4
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b02      	subs	r3, #2
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006212:	e037      	b.n	8006284 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006218:	881a      	ldrh	r2, [r3, #0]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	1c9a      	adds	r2, r3, #2
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800623a:	e023      	b.n	8006284 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800623c:	f7fb fc64 	bl	8001b08 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d803      	bhi.n	8006254 <HAL_SPI_Transmit+0x240>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d102      	bne.n	800625a <HAL_SPI_Transmit+0x246>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d114      	bne.n	8006284 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fc9e 	bl	8006b9c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e0b4      	b.n	80063ee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d19b      	bne.n	80061c8 <HAL_SPI_Transmit+0x1b4>
 8006290:	e087      	b.n	80063a2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d155      	bne.n	800634c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d918      	bls.n	80062de <HAL_SPI_Transmit+0x2ca>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d914      	bls.n	80062de <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	1d1a      	adds	r2, r3, #4
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b04      	subs	r3, #4
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80062dc:	e05a      	b.n	8006394 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d917      	bls.n	800631a <HAL_SPI_Transmit+0x306>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f6:	881a      	ldrh	r2, [r3, #0]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	1c9a      	adds	r2, r3, #2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b02      	subs	r3, #2
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006318:	e03c      	b.n	8006394 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3320      	adds	r3, #32
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006344:	e026      	b.n	8006394 <HAL_SPI_Transmit+0x380>
 8006346:	bf00      	nop
 8006348:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800634c:	f7fb fbdc 	bl	8001b08 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d803      	bhi.n	8006364 <HAL_SPI_Transmit+0x350>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d102      	bne.n	800636a <HAL_SPI_Transmit+0x356>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d114      	bne.n	8006394 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fc16 	bl	8006b9c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e02c      	b.n	80063ee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	f47f af78 	bne.w	8006292 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2108      	movs	r1, #8
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fc95 	bl	8006cdc <SPI_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063be:	f043 0220 	orr.w	r2, r3, #32
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fbe7 	bl	8006b9c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80063ec:	7efb      	ldrb	r3, [r7, #27]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop

080063f8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	; 0x28
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3330      	adds	r3, #48	; 0x30
 8006412:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641c:	d112      	bne.n	8006444 <HAL_SPI_Receive+0x4c>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10e      	bne.n	8006444 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2204      	movs	r2, #4
 800642a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f978 	bl	8006730 <HAL_SPI_TransmitReceive>
 8006440:	4603      	mov	r3, r0
 8006442:	e16f      	b.n	8006724 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_SPI_Receive+0x5a>
 800644e:	2302      	movs	r3, #2
 8006450:	e168      	b.n	8006724 <HAL_SPI_Receive+0x32c>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800645a:	f7fb fb55 	bl	8001b08 <HAL_GetTick>
 800645e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d007      	beq.n	800647c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800646c:	2302      	movs	r3, #2
 800646e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006478:	7ffb      	ldrb	r3, [r7, #31]
 800647a:	e153      	b.n	8006724 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Receive+0x90>
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006494:	7ffb      	ldrb	r3, [r7, #31]
 8006496:	e145      	b.n	8006724 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2204      	movs	r2, #4
 800649c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	88fa      	ldrh	r2, [r7, #6]
 80064b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80064e8:	d107      	bne.n	80064fa <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	4b8a      	ldr	r3, [pc, #552]	; (800672c <HAL_SPI_Receive+0x334>)
 8006502:	4013      	ands	r3, r2
 8006504:	88f9      	ldrh	r1, [r7, #6]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	430b      	orrs	r3, r1
 800650c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006526:	d107      	bne.n	8006538 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006536:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b0f      	cmp	r3, #15
 800653e:	d948      	bls.n	80065d2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006540:	e040      	b.n	80065c4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695a      	ldr	r2, [r3, #20]
 8006548:	f248 0308 	movw	r3, #32776	; 0x8008
 800654c:	4013      	ands	r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d014      	beq.n	800657c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800655c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006562:	1d1a      	adds	r2, r3, #4
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800657a:	e023      	b.n	80065c4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657c:	f7fb fac4 	bl	8001b08 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d803      	bhi.n	8006594 <HAL_SPI_Receive+0x19c>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d102      	bne.n	800659a <HAL_SPI_Receive+0x1a2>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d114      	bne.n	80065c4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fafe 	bl	8006b9c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0af      	b.n	8006724 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1b8      	bne.n	8006542 <HAL_SPI_Receive+0x14a>
 80065d0:	e095      	b.n	80066fe <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b07      	cmp	r3, #7
 80065d8:	f240 808b 	bls.w	80066f2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80065dc:	e03f      	b.n	800665e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d114      	bne.n	8006616 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	8812      	ldrh	r2, [r2, #0]
 80065f4:	b292      	uxth	r2, r2
 80065f6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006614:	e023      	b.n	800665e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006616:	f7fb fa77 	bl	8001b08 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d803      	bhi.n	800662e <HAL_SPI_Receive+0x236>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662c:	d102      	bne.n	8006634 <HAL_SPI_Receive+0x23c>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d114      	bne.n	800665e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fab1 	bl	8006b9c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e062      	b.n	8006724 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1b9      	bne.n	80065de <HAL_SPI_Receive+0x1e6>
 800666a:	e048      	b.n	80066fe <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b01      	cmp	r3, #1
 8006678:	d117      	bne.n	80066aa <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80066a8:	e023      	b.n	80066f2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066aa:	f7fb fa2d 	bl	8001b08 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d803      	bhi.n	80066c2 <HAL_SPI_Receive+0x2ca>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d102      	bne.n	80066c8 <HAL_SPI_Receive+0x2d0>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d114      	bne.n	80066f2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fa67 	bl	8006b9c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e018      	b.n	8006724 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1b6      	bne.n	800666c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 fa4c 	bl	8006b9c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006722:	7ffb      	ldrb	r3, [r7, #31]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	ffff0000 	.word	0xffff0000

08006730 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	; 0x38
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3320      	adds	r3, #32
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3330      	adds	r3, #48	; 0x30
 8006752:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x32>
 800675e:	2302      	movs	r3, #2
 8006760:	e209      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x446>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800676a:	f7fb f9cd 	bl	8001b08 <HAL_GetTick>
 800676e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006770:	887b      	ldrh	r3, [r7, #2]
 8006772:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800677e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006786:	7efb      	ldrb	r3, [r7, #27]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d014      	beq.n	80067b6 <HAL_SPI_TransmitReceive+0x86>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006792:	d106      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800679c:	7efb      	ldrb	r3, [r7, #27]
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d009      	beq.n	80067b6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
 80067a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80067b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067b4:	e1df      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_SPI_TransmitReceive+0x98>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_SPI_TransmitReceive+0x98>
 80067c2:	887b      	ldrh	r3, [r7, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80067d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067da:	e1cc      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d003      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2205      	movs	r2, #5
 80067ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	887a      	ldrh	r2, [r7, #2]
 8006802:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	887a      	ldrh	r2, [r7, #2]
 800680a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	887a      	ldrh	r2, [r7, #2]
 8006818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	887a      	ldrh	r2, [r7, #2]
 8006820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	4b82      	ldr	r3, [pc, #520]	; (8006a40 <HAL_SPI_TransmitReceive+0x310>)
 8006838:	4013      	ands	r3, r2
 800683a:	8879      	ldrh	r1, [r7, #2]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	430b      	orrs	r3, r1
 8006842:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685c:	d107      	bne.n	800686e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b0f      	cmp	r3, #15
 8006874:	d970      	bls.n	8006958 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006876:	e068      	b.n	800694a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b02      	cmp	r3, #2
 8006884:	d11a      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x18c>
 8006886:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006888:	2b00      	cmp	r3, #0
 800688a:	d017      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689c:	1d1a      	adds	r2, r3, #4
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695a      	ldr	r2, [r3, #20]
 80068c2:	f248 0308 	movw	r3, #32776	; 0x8008
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <HAL_SPI_TransmitReceive+0x1d2>
 80068cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d017      	beq.n	8006902 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068dc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e2:	1d1a      	adds	r2, r3, #4
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006900:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006902:	f7fb f901 	bl	8001b08 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800690e:	429a      	cmp	r2, r3
 8006910:	d803      	bhi.n	800691a <HAL_SPI_TransmitReceive+0x1ea>
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d102      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x1f0>
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2b00      	cmp	r3, #0
 800691e:	d114      	bne.n	800694a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f93b 	bl	8006b9c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e115      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800694a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800694c:	2b00      	cmp	r3, #0
 800694e:	d193      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x148>
 8006950:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d190      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x148>
 8006956:	e0e7      	b.n	8006b28 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b07      	cmp	r3, #7
 800695e:	f240 80dd 	bls.w	8006b1c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006962:	e066      	b.n	8006a32 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d119      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x276>
 8006972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006974:	2b00      	cmp	r3, #0
 8006976:	d016      	beq.n	80069a6 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	1c9a      	adds	r2, r3, #2
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d11a      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x2ba>
 80069b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069be:	6a3a      	ldr	r2, [r7, #32]
 80069c0:	8812      	ldrh	r2, [r2, #0]
 80069c2:	b292      	uxth	r2, r2
 80069c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ca:	1c9a      	adds	r2, r3, #2
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ea:	f7fb f88d 	bl	8001b08 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d803      	bhi.n	8006a02 <HAL_SPI_TransmitReceive+0x2d2>
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a00:	d102      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x2d8>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d114      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f8c7 	bl	8006b9c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e0a1      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d195      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x234>
 8006a38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d192      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x234>
 8006a3e:	e073      	b.n	8006b28 <HAL_SPI_TransmitReceive+0x3f8>
 8006a40:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d11b      	bne.n	8006a8a <HAL_SPI_TransmitReceive+0x35a>
 8006a52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d018      	beq.n	8006a8a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3320      	adds	r3, #32
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a88:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d11d      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x3a4>
 8006a98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01a      	beq.n	8006ad4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ad2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ad4:	f7fb f818 	bl	8001b08 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d803      	bhi.n	8006aec <HAL_SPI_TransmitReceive+0x3bc>
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d102      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x3c2>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d114      	bne.n	8006b1c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f852 	bl	8006b9c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e02c      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d190      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x314>
 8006b22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d18d      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2108      	movs	r1, #8
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f8d2 	bl	8006cdc <SPI_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f824 	bl	8006b9c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e001      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3730      	adds	r7, #48	; 0x30
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop

08006b80 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b8e:	b2db      	uxtb	r3, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0208 	orr.w	r2, r2, #8
 8006bba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0210 	orr.w	r2, r2, #16
 8006bca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6919      	ldr	r1, [r3, #16]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b3c      	ldr	r3, [pc, #240]	; (8006cd8 <SPI_CloseTransfer+0x13c>)
 8006be8:	400b      	ands	r3, r1
 8006bea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006bfa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d014      	beq.n	8006c32 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00f      	beq.n	8006c32 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0220 	orr.w	r2, r2, #32
 8006c30:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d014      	beq.n	8006c68 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00f      	beq.n	8006c68 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c4e:	f043 0204 	orr.w	r2, r3, #4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c66:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00f      	beq.n	8006c92 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c78:	f043 0201 	orr.w	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c90:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00f      	beq.n	8006cbc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca2:	f043 0208 	orr.w	r2, r3, #8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	fffffc90 	.word	0xfffffc90

08006cdc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cec:	e010      	b.n	8006d10 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cee:	f7fa ff0b 	bl	8001b08 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d803      	bhi.n	8006d06 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d102      	bne.n	8006d0c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e00f      	b.n	8006d30 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d0df      	beq.n	8006cee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	3307      	adds	r3, #7
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e049      	b.n	8006e14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fa fbd7 	bl	8001548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f000 fb8b 	bl	80074c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d001      	beq.n	8006e34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e04c      	b.n	8006ece <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a26      	ldr	r2, [pc, #152]	; (8006edc <HAL_TIM_Base_Start+0xc0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d022      	beq.n	8006e8c <HAL_TIM_Base_Start+0x70>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4e:	d01d      	beq.n	8006e8c <HAL_TIM_Base_Start+0x70>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a22      	ldr	r2, [pc, #136]	; (8006ee0 <HAL_TIM_Base_Start+0xc4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d018      	beq.n	8006e8c <HAL_TIM_Base_Start+0x70>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <HAL_TIM_Base_Start+0xc8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d013      	beq.n	8006e8c <HAL_TIM_Base_Start+0x70>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <HAL_TIM_Base_Start+0xcc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00e      	beq.n	8006e8c <HAL_TIM_Base_Start+0x70>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <HAL_TIM_Base_Start+0xd0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d009      	beq.n	8006e8c <HAL_TIM_Base_Start+0x70>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <HAL_TIM_Base_Start+0xd4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_TIM_Base_Start+0x70>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <HAL_TIM_Base_Start+0xd8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d115      	bne.n	8006eb8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <HAL_TIM_Base_Start+0xdc>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b06      	cmp	r3, #6
 8006e9c:	d015      	beq.n	8006eca <HAL_TIM_Base_Start+0xae>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d011      	beq.n	8006eca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0201 	orr.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb6:	e008      	b.n	8006eca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	e000      	b.n	8006ecc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40010400 	.word	0x40010400
 8006ef0:	40001800 	.word	0x40001800
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	00010007 	.word	0x00010007

08006efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d001      	beq.n	8006f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e054      	b.n	8006fbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a26      	ldr	r2, [pc, #152]	; (8006fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d022      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d01d      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d018      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a21      	ldr	r2, [pc, #132]	; (8006fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00e      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <HAL_TIM_Base_Start_IT+0xe0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d009      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d115      	bne.n	8006fa8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	4b19      	ldr	r3, [pc, #100]	; (8006fe8 <HAL_TIM_Base_Start_IT+0xec>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b06      	cmp	r3, #6
 8006f8c:	d015      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0xbe>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d011      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0201 	orr.w	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa6:	e008      	b.n	8006fba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e000      	b.n	8006fbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40001800 	.word	0x40001800
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	00010007 	.word	0x00010007

08006fec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6a1a      	ldr	r2, [r3, #32]
 800700a:	f241 1311 	movw	r3, #4369	; 0x1111
 800700e:	4013      	ands	r3, r2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10f      	bne.n	8007034 <HAL_TIM_Base_Stop_IT+0x48>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6a1a      	ldr	r2, [r3, #32]
 800701a:	f240 4344 	movw	r3, #1092	; 0x444
 800701e:	4013      	ands	r3, r2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <HAL_TIM_Base_Stop_IT+0x48>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0201 	bic.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b02      	cmp	r3, #2
 800705e:	d122      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b02      	cmp	r3, #2
 800706c:	d11b      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f06f 0202 	mvn.w	r2, #2
 8007076:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9fd 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8007092:	e005      	b.n	80070a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f9ef 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa00 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d122      	bne.n	80070fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d11b      	bne.n	80070fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0204 	mvn.w	r2, #4
 80070ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9d3 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 80070e6:	e005      	b.n	80070f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9c5 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9d6 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b08      	cmp	r3, #8
 8007106:	d122      	bne.n	800714e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b08      	cmp	r3, #8
 8007114:	d11b      	bne.n	800714e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f06f 0208 	mvn.w	r2, #8
 800711e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2204      	movs	r2, #4
 8007124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f9a9 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 800713a:	e005      	b.n	8007148 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f99b 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9ac 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b10      	cmp	r3, #16
 800715a:	d122      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b10      	cmp	r3, #16
 8007168:	d11b      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0210 	mvn.w	r2, #16
 8007172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2208      	movs	r2, #8
 8007178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f97f 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 800718e:	e005      	b.n	800719c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f971 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f982 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10e      	bne.n	80071ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d107      	bne.n	80071ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f06f 0201 	mvn.w	r2, #1
 80071c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fa f803 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d8:	2b80      	cmp	r3, #128	; 0x80
 80071da:	d10e      	bne.n	80071fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b80      	cmp	r3, #128	; 0x80
 80071e8:	d107      	bne.n	80071fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb37 	bl	8007868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007208:	d10e      	bne.n	8007228 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007214:	2b80      	cmp	r3, #128	; 0x80
 8007216:	d107      	bne.n	8007228 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb2a 	bl	800787c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	d10e      	bne.n	8007254 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d107      	bne.n	8007254 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800724c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f930 	bl	80074b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b20      	cmp	r3, #32
 8007260:	d10e      	bne.n	8007280 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b20      	cmp	r3, #32
 800726e:	d107      	bne.n	8007280 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0220 	mvn.w	r2, #32
 8007278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 faea 	bl	8007854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIM_ConfigClockSource+0x1c>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e0dc      	b.n	800745e <HAL_TIM_ConfigClockSource+0x1d6>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4b6a      	ldr	r3, [pc, #424]	; (8007468 <HAL_TIM_ConfigClockSource+0x1e0>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a64      	ldr	r2, [pc, #400]	; (800746c <HAL_TIM_ConfigClockSource+0x1e4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f000 80a9 	beq.w	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 80072e0:	4a62      	ldr	r2, [pc, #392]	; (800746c <HAL_TIM_ConfigClockSource+0x1e4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	f200 80ae 	bhi.w	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 80072e8:	4a61      	ldr	r2, [pc, #388]	; (8007470 <HAL_TIM_ConfigClockSource+0x1e8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f000 80a1 	beq.w	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 80072f0:	4a5f      	ldr	r2, [pc, #380]	; (8007470 <HAL_TIM_ConfigClockSource+0x1e8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	f200 80a6 	bhi.w	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 80072f8:	4a5e      	ldr	r2, [pc, #376]	; (8007474 <HAL_TIM_ConfigClockSource+0x1ec>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	f000 8099 	beq.w	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 8007300:	4a5c      	ldr	r2, [pc, #368]	; (8007474 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007302:	4293      	cmp	r3, r2
 8007304:	f200 809e 	bhi.w	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007308:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800730c:	f000 8091 	beq.w	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 8007310:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007314:	f200 8096 	bhi.w	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800731c:	f000 8089 	beq.w	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 8007320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007324:	f200 808e 	bhi.w	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732c:	d03e      	beq.n	80073ac <HAL_TIM_ConfigClockSource+0x124>
 800732e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007332:	f200 8087 	bhi.w	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	f000 8086 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1c2>
 800733e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007342:	d87f      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007344:	2b70      	cmp	r3, #112	; 0x70
 8007346:	d01a      	beq.n	800737e <HAL_TIM_ConfigClockSource+0xf6>
 8007348:	2b70      	cmp	r3, #112	; 0x70
 800734a:	d87b      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 800734c:	2b60      	cmp	r3, #96	; 0x60
 800734e:	d050      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x16a>
 8007350:	2b60      	cmp	r3, #96	; 0x60
 8007352:	d877      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007354:	2b50      	cmp	r3, #80	; 0x50
 8007356:	d03c      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x14a>
 8007358:	2b50      	cmp	r3, #80	; 0x50
 800735a:	d873      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d058      	beq.n	8007412 <HAL_TIM_ConfigClockSource+0x18a>
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d86f      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007364:	2b30      	cmp	r3, #48	; 0x30
 8007366:	d064      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 8007368:	2b30      	cmp	r3, #48	; 0x30
 800736a:	d86b      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 800736c:	2b20      	cmp	r3, #32
 800736e:	d060      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 8007370:	2b20      	cmp	r3, #32
 8007372:	d867      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d05c      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 8007378:	2b10      	cmp	r3, #16
 800737a:	d05a      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x1aa>
 800737c:	e062      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6899      	ldr	r1, [r3, #8]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f000 f9b3 	bl	80076f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	609a      	str	r2, [r3, #8]
      break;
 80073aa:	e04f      	b.n	800744c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	6899      	ldr	r1, [r3, #8]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f000 f99c 	bl	80076f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ce:	609a      	str	r2, [r3, #8]
      break;
 80073d0:	e03c      	b.n	800744c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6859      	ldr	r1, [r3, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	461a      	mov	r2, r3
 80073e0:	f000 f90c 	bl	80075fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2150      	movs	r1, #80	; 0x50
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f966 	bl	80076bc <TIM_ITRx_SetConfig>
      break;
 80073f0:	e02c      	b.n	800744c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	6859      	ldr	r1, [r3, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	461a      	mov	r2, r3
 8007400:	f000 f92b 	bl	800765a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2160      	movs	r1, #96	; 0x60
 800740a:	4618      	mov	r0, r3
 800740c:	f000 f956 	bl	80076bc <TIM_ITRx_SetConfig>
      break;
 8007410:	e01c      	b.n	800744c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6859      	ldr	r1, [r3, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	461a      	mov	r2, r3
 8007420:	f000 f8ec 	bl	80075fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2140      	movs	r1, #64	; 0x40
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f946 	bl	80076bc <TIM_ITRx_SetConfig>
      break;
 8007430:	e00c      	b.n	800744c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f000 f93d 	bl	80076bc <TIM_ITRx_SetConfig>
      break;
 8007442:	e003      	b.n	800744c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
      break;
 8007448:	e000      	b.n	800744c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800744a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	ffceff88 	.word	0xffceff88
 800746c:	00100040 	.word	0x00100040
 8007470:	00100030 	.word	0x00100030
 8007474:	00100020 	.word	0x00100020

08007478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a40      	ldr	r2, [pc, #256]	; (80075dc <TIM_Base_SetConfig+0x114>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d013      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e6:	d00f      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a3d      	ldr	r2, [pc, #244]	; (80075e0 <TIM_Base_SetConfig+0x118>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a3c      	ldr	r2, [pc, #240]	; (80075e4 <TIM_Base_SetConfig+0x11c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3b      	ldr	r2, [pc, #236]	; (80075e8 <TIM_Base_SetConfig+0x120>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3a      	ldr	r2, [pc, #232]	; (80075ec <TIM_Base_SetConfig+0x124>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d108      	bne.n	800751a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2f      	ldr	r2, [pc, #188]	; (80075dc <TIM_Base_SetConfig+0x114>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01f      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007528:	d01b      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2c      	ldr	r2, [pc, #176]	; (80075e0 <TIM_Base_SetConfig+0x118>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d017      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2b      	ldr	r2, [pc, #172]	; (80075e4 <TIM_Base_SetConfig+0x11c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <TIM_Base_SetConfig+0x120>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00f      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a29      	ldr	r2, [pc, #164]	; (80075ec <TIM_Base_SetConfig+0x124>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00b      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a28      	ldr	r2, [pc, #160]	; (80075f0 <TIM_Base_SetConfig+0x128>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d007      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a27      	ldr	r2, [pc, #156]	; (80075f4 <TIM_Base_SetConfig+0x12c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <TIM_Base_SetConfig+0x130>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d108      	bne.n	8007574 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <TIM_Base_SetConfig+0x114>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00f      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a12      	ldr	r2, [pc, #72]	; (80075ec <TIM_Base_SetConfig+0x124>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a11      	ldr	r2, [pc, #68]	; (80075f0 <TIM_Base_SetConfig+0x128>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <TIM_Base_SetConfig+0x12c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <TIM_Base_SetConfig+0x130>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d103      	bne.n	80075c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	615a      	str	r2, [r3, #20]
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40010400 	.word	0x40010400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800

080075fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f023 0201 	bic.w	r2, r3, #1
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4313      	orrs	r3, r2
 8007630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f023 030a 	bic.w	r3, r3, #10
 8007638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	621a      	str	r2, [r3, #32]
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800765a:	b480      	push	{r7}
 800765c:	b087      	sub	sp, #28
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f023 0210 	bic.w	r2, r3, #16
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	031b      	lsls	r3, r3, #12
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	621a      	str	r2, [r3, #32]
}
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <TIM_ITRx_SetConfig+0x38>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	f043 0307 	orr.w	r3, r3, #7
 80076de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	609a      	str	r2, [r3, #8]
}
 80076e6:	bf00      	nop
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	ffcfff8f 	.word	0xffcfff8f

080076f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	021a      	lsls	r2, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	431a      	orrs	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	609a      	str	r2, [r3, #8]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800774c:	2302      	movs	r3, #2
 800774e:	e06d      	b.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a30      	ldr	r2, [pc, #192]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d004      	beq.n	8007784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a2f      	ldr	r2, [pc, #188]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d108      	bne.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800778a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a20      	ldr	r2, [pc, #128]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d022      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d01d      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1d      	ldr	r2, [pc, #116]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1a      	ldr	r2, [pc, #104]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a15      	ldr	r2, [pc, #84]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a16      	ldr	r2, [pc, #88]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a15      	ldr	r2, [pc, #84]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10c      	bne.n	800781a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007806:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	4313      	orrs	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	40010000 	.word	0x40010000
 800783c:	40010400 	.word	0x40010400
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40001800 	.word	0x40001800
 8007850:	40014000 	.word	0x40014000

08007854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e042      	b.n	8007928 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d106      	bne.n	80078ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7f9 fe85 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2224      	movs	r2, #36	; 0x24
 80078be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fcd6 	bl	8008284 <UART_SetConfig>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e022      	b.n	8007928 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 fa32 	bl	8008d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800790e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0201 	orr.w	r2, r2, #1
 800791e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 fab9 	bl	8008e98 <UART_CheckIdleState>
 8007926:	4603      	mov	r3, r0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007946:	2b20      	cmp	r3, #32
 8007948:	f040 8083 	bne.w	8007a52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_UART_Transmit+0x28>
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e07b      	b.n	8007a54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_UART_Transmit+0x3a>
 8007966:	2302      	movs	r3, #2
 8007968:	e074      	b.n	8007a54 <HAL_UART_Transmit+0x124>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2221      	movs	r2, #33	; 0x21
 800797e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007982:	f7fa f8c1 	bl	8001b08 <HAL_GetTick>
 8007986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	88fa      	ldrh	r2, [r7, #6]
 800798c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a0:	d108      	bne.n	80079b4 <HAL_UART_Transmit+0x84>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e003      	b.n	80079bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80079c4:	e02c      	b.n	8007a20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2200      	movs	r2, #0
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 faac 	bl	8008f2e <UART_WaitOnFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e039      	b.n	8007a54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10b      	bne.n	80079fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	3302      	adds	r3, #2
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	e007      	b.n	8007a0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1cc      	bne.n	80079c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2140      	movs	r1, #64	; 0x40
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f001 fa79 	bl	8008f2e <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e006      	b.n	8007a54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e000      	b.n	8007a54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007a52:	2302      	movs	r3, #2
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	; 0x28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d142      	bne.n	8007afa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_UART_Receive_IT+0x24>
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e03b      	b.n	8007afc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Receive_IT+0x36>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e034      	b.n	8007afc <HAL_UART_Receive_IT+0xa0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a17      	ldr	r2, [pc, #92]	; (8007b04 <HAL_UART_Receive_IT+0xa8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01f      	beq.n	8007aea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d018      	beq.n	8007aea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	623b      	str	r3, [r7, #32]
 8007ad8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	69f9      	ldr	r1, [r7, #28]
 8007adc:	6a3a      	ldr	r2, [r7, #32]
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e6      	bne.n	8007ab8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	461a      	mov	r2, r3
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f001 fae5 	bl	80090c0 <UART_Start_Receive_IT>
 8007af6:	4603      	mov	r3, r0
 8007af8:	e000      	b.n	8007afc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007afa:	2302      	movs	r3, #2
  }
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3728      	adds	r7, #40	; 0x28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	58000c00 	.word	0x58000c00

08007b08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b0ba      	sub	sp, #232	; 0xe8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b32:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b36:	4013      	ands	r3, r2
 8007b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d11b      	bne.n	8007b7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d015      	beq.n	8007b7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 835a 	beq.w	8008226 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
      }
      return;
 8007b7a:	e354      	b.n	8008226 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 811f 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b8a:	4b8b      	ldr	r3, [pc, #556]	; (8007db8 <HAL_UART_IRQHandler+0x2b0>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b96:	4b89      	ldr	r3, [pc, #548]	; (8007dbc <HAL_UART_IRQHandler+0x2b4>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8112 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d011      	beq.n	8007bd0 <HAL_UART_IRQHandler+0xc8>
 8007bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc6:	f043 0201 	orr.w	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d011      	beq.n	8007c00 <HAL_UART_IRQHandler+0xf8>
 8007bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2202      	movs	r2, #2
 8007bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf6:	f043 0204 	orr.w	r2, r3, #4
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d011      	beq.n	8007c30 <HAL_UART_IRQHandler+0x128>
 8007c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c26:	f043 0202 	orr.w	r2, r3, #2
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d017      	beq.n	8007c6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d105      	bne.n	8007c54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c4c:	4b5a      	ldr	r3, [pc, #360]	; (8007db8 <HAL_UART_IRQHandler+0x2b0>)
 8007c4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c62:	f043 0208 	orr.w	r2, r3, #8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d012      	beq.n	8007c9e <HAL_UART_IRQHandler+0x196>
 8007c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00c      	beq.n	8007c9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c94:	f043 0220 	orr.w	r2, r3, #32
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 82c0 	beq.w	800822a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d013      	beq.n	8007cde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d105      	bne.n	8007cce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf2:	2b40      	cmp	r3, #64	; 0x40
 8007cf4:	d005      	beq.n	8007d02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d04f      	beq.n	8007da2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fb06 	bl	8009314 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d141      	bne.n	8007d9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1d9      	bne.n	8007d16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d013      	beq.n	8007d92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <HAL_UART_IRQHandler+0x2b8>)
 8007d70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fa fb44 	bl	8002404 <HAL_DMA_Abort_IT>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d017      	beq.n	8007db2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d90:	e00f      	b.n	8007db2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa60 	bl	8008258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d98:	e00b      	b.n	8007db2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa5c 	bl	8008258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da0:	e007      	b.n	8007db2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa58 	bl	8008258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007db0:	e23b      	b.n	800822a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db2:	bf00      	nop
    return;
 8007db4:	e239      	b.n	800822a <HAL_UART_IRQHandler+0x722>
 8007db6:	bf00      	nop
 8007db8:	10000001 	.word	0x10000001
 8007dbc:	04000120 	.word	0x04000120
 8007dc0:	080093e1 	.word	0x080093e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	f040 81ce 	bne.w	800816a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 81c7 	beq.w	800816a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 81c0 	beq.w	800816a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2210      	movs	r2, #16
 8007df0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	f040 813b 	bne.w	8008078 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a8b      	ldr	r2, [pc, #556]	; (8008038 <HAL_UART_IRQHandler+0x530>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d059      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a89      	ldr	r2, [pc, #548]	; (800803c <HAL_UART_IRQHandler+0x534>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d053      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a87      	ldr	r2, [pc, #540]	; (8008040 <HAL_UART_IRQHandler+0x538>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d04d      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a85      	ldr	r2, [pc, #532]	; (8008044 <HAL_UART_IRQHandler+0x53c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d047      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a83      	ldr	r2, [pc, #524]	; (8008048 <HAL_UART_IRQHandler+0x540>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d041      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a81      	ldr	r2, [pc, #516]	; (800804c <HAL_UART_IRQHandler+0x544>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d03b      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a7f      	ldr	r2, [pc, #508]	; (8008050 <HAL_UART_IRQHandler+0x548>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d035      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a7d      	ldr	r2, [pc, #500]	; (8008054 <HAL_UART_IRQHandler+0x54c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d02f      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a7b      	ldr	r2, [pc, #492]	; (8008058 <HAL_UART_IRQHandler+0x550>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d029      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a79      	ldr	r2, [pc, #484]	; (800805c <HAL_UART_IRQHandler+0x554>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d023      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a77      	ldr	r2, [pc, #476]	; (8008060 <HAL_UART_IRQHandler+0x558>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d01d      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a75      	ldr	r2, [pc, #468]	; (8008064 <HAL_UART_IRQHandler+0x55c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d017      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a73      	ldr	r2, [pc, #460]	; (8008068 <HAL_UART_IRQHandler+0x560>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d011      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a71      	ldr	r2, [pc, #452]	; (800806c <HAL_UART_IRQHandler+0x564>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00b      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a6f      	ldr	r2, [pc, #444]	; (8008070 <HAL_UART_IRQHandler+0x568>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d005      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x3ba>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a6d      	ldr	r2, [pc, #436]	; (8008074 <HAL_UART_IRQHandler+0x56c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d105      	bne.n	8007ece <HAL_UART_IRQHandler+0x3c6>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	e004      	b.n	8007ed8 <HAL_UART_IRQHandler+0x3d0>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 81a4 	beq.w	800822e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	f080 819c 	bcs.w	800822e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0a:	f000 8086 	beq.w	800801a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f3c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1da      	bne.n	8007f0e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f62:	e853 3f00 	ldrex	r3, [r3]
 8007f66:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f6a:	f023 0301 	bic.w	r3, r3, #1
 8007f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e1      	bne.n	8007f58 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fb8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e3      	bne.n	8007f94 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fea:	f023 0310 	bic.w	r3, r3, #16
 8007fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ffe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800800a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e4      	bne.n	8007fda <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008014:	4618      	mov	r0, r3
 8008016:	f7f9 fed7 	bl	8001dc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008026:	b29b      	uxth	r3, r3
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	b29b      	uxth	r3, r3
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f91c 	bl	800826c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008034:	e0fb      	b.n	800822e <HAL_UART_IRQHandler+0x726>
 8008036:	bf00      	nop
 8008038:	40020010 	.word	0x40020010
 800803c:	40020028 	.word	0x40020028
 8008040:	40020040 	.word	0x40020040
 8008044:	40020058 	.word	0x40020058
 8008048:	40020070 	.word	0x40020070
 800804c:	40020088 	.word	0x40020088
 8008050:	400200a0 	.word	0x400200a0
 8008054:	400200b8 	.word	0x400200b8
 8008058:	40020410 	.word	0x40020410
 800805c:	40020428 	.word	0x40020428
 8008060:	40020440 	.word	0x40020440
 8008064:	40020458 	.word	0x40020458
 8008068:	40020470 	.word	0x40020470
 800806c:	40020488 	.word	0x40020488
 8008070:	400204a0 	.word	0x400204a0
 8008074:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008084:	b29b      	uxth	r3, r3
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80cc 	beq.w	8008232 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800809a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80c7 	beq.w	8008232 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080c6:	647b      	str	r3, [r7, #68]	; 0x44
 80080c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e4      	bne.n	80080a4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3308      	adds	r3, #8
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ea:	6a3a      	ldr	r2, [r7, #32]
 80080ec:	4b54      	ldr	r3, [pc, #336]	; (8008240 <HAL_UART_IRQHandler+0x738>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3308      	adds	r3, #8
 80080fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008100:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e3      	bne.n	80080da <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	60fb      	str	r3, [r7, #12]
   return(result);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0310 	bic.w	r3, r3, #16
 800813a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	69b9      	ldr	r1, [r7, #24]
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	617b      	str	r3, [r7, #20]
   return(result);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e4      	bne.n	8008126 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800815c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f882 	bl	800826c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008168:	e063      	b.n	8008232 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800816a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00e      	beq.n	8008194 <HAL_UART_IRQHandler+0x68c>
 8008176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800817a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800818a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fdc5 	bl	8009d1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008192:	e051      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819c:	2b00      	cmp	r3, #0
 800819e:	d014      	beq.n	80081ca <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d105      	bne.n	80081b8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d008      	beq.n	80081ca <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d03a      	beq.n	8008236 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
    }
    return;
 80081c8:	e035      	b.n	8008236 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <HAL_UART_IRQHandler+0x6e2>
 80081d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 f912 	bl	800940c <UART_EndTransmit_IT>
    return;
 80081e8:	e026      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80081ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <HAL_UART_IRQHandler+0x702>
 80081f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fd9e 	bl	8009d44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008208:	e016      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d010      	beq.n	8008238 <HAL_UART_IRQHandler+0x730>
 8008216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800821a:	2b00      	cmp	r3, #0
 800821c:	da0c      	bge.n	8008238 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 fd86 	bl	8009d30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008224:	e008      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
      return;
 8008226:	bf00      	nop
 8008228:	e006      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
    return;
 800822a:	bf00      	nop
 800822c:	e004      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
      return;
 800822e:	bf00      	nop
 8008230:	e002      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
      return;
 8008232:	bf00      	nop
 8008234:	e000      	b.n	8008238 <HAL_UART_IRQHandler+0x730>
    return;
 8008236:	bf00      	nop
  }
}
 8008238:	37e8      	adds	r7, #232	; 0xe8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	effffffe 	.word	0xeffffffe

08008244 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008288:	b092      	sub	sp, #72	; 0x48
 800828a:	af00      	add	r7, sp, #0
 800828c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	431a      	orrs	r2, r3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4bbe      	ldr	r3, [pc, #760]	; (80085ac <UART_SetConfig+0x328>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082bc:	430b      	orrs	r3, r1
 80082be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4ab3      	ldr	r2, [pc, #716]	; (80085b0 <UART_SetConfig+0x32c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ec:	4313      	orrs	r3, r2
 80082ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	4baf      	ldr	r3, [pc, #700]	; (80085b4 <UART_SetConfig+0x330>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008300:	430b      	orrs	r3, r1
 8008302:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	f023 010f 	bic.w	r1, r3, #15
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4aa6      	ldr	r2, [pc, #664]	; (80085b8 <UART_SetConfig+0x334>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d177      	bne.n	8008414 <UART_SetConfig+0x190>
 8008324:	4ba5      	ldr	r3, [pc, #660]	; (80085bc <UART_SetConfig+0x338>)
 8008326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800832c:	2b28      	cmp	r3, #40	; 0x28
 800832e:	d86d      	bhi.n	800840c <UART_SetConfig+0x188>
 8008330:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <UART_SetConfig+0xb4>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	080083dd 	.word	0x080083dd
 800833c:	0800840d 	.word	0x0800840d
 8008340:	0800840d 	.word	0x0800840d
 8008344:	0800840d 	.word	0x0800840d
 8008348:	0800840d 	.word	0x0800840d
 800834c:	0800840d 	.word	0x0800840d
 8008350:	0800840d 	.word	0x0800840d
 8008354:	0800840d 	.word	0x0800840d
 8008358:	080083e5 	.word	0x080083e5
 800835c:	0800840d 	.word	0x0800840d
 8008360:	0800840d 	.word	0x0800840d
 8008364:	0800840d 	.word	0x0800840d
 8008368:	0800840d 	.word	0x0800840d
 800836c:	0800840d 	.word	0x0800840d
 8008370:	0800840d 	.word	0x0800840d
 8008374:	0800840d 	.word	0x0800840d
 8008378:	080083ed 	.word	0x080083ed
 800837c:	0800840d 	.word	0x0800840d
 8008380:	0800840d 	.word	0x0800840d
 8008384:	0800840d 	.word	0x0800840d
 8008388:	0800840d 	.word	0x0800840d
 800838c:	0800840d 	.word	0x0800840d
 8008390:	0800840d 	.word	0x0800840d
 8008394:	0800840d 	.word	0x0800840d
 8008398:	080083f5 	.word	0x080083f5
 800839c:	0800840d 	.word	0x0800840d
 80083a0:	0800840d 	.word	0x0800840d
 80083a4:	0800840d 	.word	0x0800840d
 80083a8:	0800840d 	.word	0x0800840d
 80083ac:	0800840d 	.word	0x0800840d
 80083b0:	0800840d 	.word	0x0800840d
 80083b4:	0800840d 	.word	0x0800840d
 80083b8:	080083fd 	.word	0x080083fd
 80083bc:	0800840d 	.word	0x0800840d
 80083c0:	0800840d 	.word	0x0800840d
 80083c4:	0800840d 	.word	0x0800840d
 80083c8:	0800840d 	.word	0x0800840d
 80083cc:	0800840d 	.word	0x0800840d
 80083d0:	0800840d 	.word	0x0800840d
 80083d4:	0800840d 	.word	0x0800840d
 80083d8:	08008405 	.word	0x08008405
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e222      	b.n	800882a <UART_SetConfig+0x5a6>
 80083e4:	2304      	movs	r3, #4
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e21e      	b.n	800882a <UART_SetConfig+0x5a6>
 80083ec:	2308      	movs	r3, #8
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e21a      	b.n	800882a <UART_SetConfig+0x5a6>
 80083f4:	2310      	movs	r3, #16
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e216      	b.n	800882a <UART_SetConfig+0x5a6>
 80083fc:	2320      	movs	r3, #32
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e212      	b.n	800882a <UART_SetConfig+0x5a6>
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e20e      	b.n	800882a <UART_SetConfig+0x5a6>
 800840c:	2380      	movs	r3, #128	; 0x80
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e20a      	b.n	800882a <UART_SetConfig+0x5a6>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a69      	ldr	r2, [pc, #420]	; (80085c0 <UART_SetConfig+0x33c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d130      	bne.n	8008480 <UART_SetConfig+0x1fc>
 800841e:	4b67      	ldr	r3, [pc, #412]	; (80085bc <UART_SetConfig+0x338>)
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b05      	cmp	r3, #5
 8008428:	d826      	bhi.n	8008478 <UART_SetConfig+0x1f4>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x1ac>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008449 	.word	0x08008449
 8008434:	08008451 	.word	0x08008451
 8008438:	08008459 	.word	0x08008459
 800843c:	08008461 	.word	0x08008461
 8008440:	08008469 	.word	0x08008469
 8008444:	08008471 	.word	0x08008471
 8008448:	2300      	movs	r3, #0
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e1ec      	b.n	800882a <UART_SetConfig+0x5a6>
 8008450:	2304      	movs	r3, #4
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e1e8      	b.n	800882a <UART_SetConfig+0x5a6>
 8008458:	2308      	movs	r3, #8
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e1e4      	b.n	800882a <UART_SetConfig+0x5a6>
 8008460:	2310      	movs	r3, #16
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e1e0      	b.n	800882a <UART_SetConfig+0x5a6>
 8008468:	2320      	movs	r3, #32
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e1dc      	b.n	800882a <UART_SetConfig+0x5a6>
 8008470:	2340      	movs	r3, #64	; 0x40
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008476:	e1d8      	b.n	800882a <UART_SetConfig+0x5a6>
 8008478:	2380      	movs	r3, #128	; 0x80
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847e:	e1d4      	b.n	800882a <UART_SetConfig+0x5a6>
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a4f      	ldr	r2, [pc, #316]	; (80085c4 <UART_SetConfig+0x340>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d130      	bne.n	80084ec <UART_SetConfig+0x268>
 800848a:	4b4c      	ldr	r3, [pc, #304]	; (80085bc <UART_SetConfig+0x338>)
 800848c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	2b05      	cmp	r3, #5
 8008494:	d826      	bhi.n	80084e4 <UART_SetConfig+0x260>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <UART_SetConfig+0x218>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	080084b5 	.word	0x080084b5
 80084a0:	080084bd 	.word	0x080084bd
 80084a4:	080084c5 	.word	0x080084c5
 80084a8:	080084cd 	.word	0x080084cd
 80084ac:	080084d5 	.word	0x080084d5
 80084b0:	080084dd 	.word	0x080084dd
 80084b4:	2300      	movs	r3, #0
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e1b6      	b.n	800882a <UART_SetConfig+0x5a6>
 80084bc:	2304      	movs	r3, #4
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e1b2      	b.n	800882a <UART_SetConfig+0x5a6>
 80084c4:	2308      	movs	r3, #8
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e1ae      	b.n	800882a <UART_SetConfig+0x5a6>
 80084cc:	2310      	movs	r3, #16
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e1aa      	b.n	800882a <UART_SetConfig+0x5a6>
 80084d4:	2320      	movs	r3, #32
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e1a6      	b.n	800882a <UART_SetConfig+0x5a6>
 80084dc:	2340      	movs	r3, #64	; 0x40
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e1a2      	b.n	800882a <UART_SetConfig+0x5a6>
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e19e      	b.n	800882a <UART_SetConfig+0x5a6>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a35      	ldr	r2, [pc, #212]	; (80085c8 <UART_SetConfig+0x344>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d130      	bne.n	8008558 <UART_SetConfig+0x2d4>
 80084f6:	4b31      	ldr	r3, [pc, #196]	; (80085bc <UART_SetConfig+0x338>)
 80084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d826      	bhi.n	8008550 <UART_SetConfig+0x2cc>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <UART_SetConfig+0x284>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008521 	.word	0x08008521
 800850c:	08008529 	.word	0x08008529
 8008510:	08008531 	.word	0x08008531
 8008514:	08008539 	.word	0x08008539
 8008518:	08008541 	.word	0x08008541
 800851c:	08008549 	.word	0x08008549
 8008520:	2300      	movs	r3, #0
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e180      	b.n	800882a <UART_SetConfig+0x5a6>
 8008528:	2304      	movs	r3, #4
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e17c      	b.n	800882a <UART_SetConfig+0x5a6>
 8008530:	2308      	movs	r3, #8
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e178      	b.n	800882a <UART_SetConfig+0x5a6>
 8008538:	2310      	movs	r3, #16
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e174      	b.n	800882a <UART_SetConfig+0x5a6>
 8008540:	2320      	movs	r3, #32
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e170      	b.n	800882a <UART_SetConfig+0x5a6>
 8008548:	2340      	movs	r3, #64	; 0x40
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e16c      	b.n	800882a <UART_SetConfig+0x5a6>
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e168      	b.n	800882a <UART_SetConfig+0x5a6>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <UART_SetConfig+0x348>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d142      	bne.n	80085e8 <UART_SetConfig+0x364>
 8008562:	4b16      	ldr	r3, [pc, #88]	; (80085bc <UART_SetConfig+0x338>)
 8008564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b05      	cmp	r3, #5
 800856c:	d838      	bhi.n	80085e0 <UART_SetConfig+0x35c>
 800856e:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <UART_SetConfig+0x2f0>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	0800858d 	.word	0x0800858d
 8008578:	08008595 	.word	0x08008595
 800857c:	0800859d 	.word	0x0800859d
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085d1 	.word	0x080085d1
 8008588:	080085d9 	.word	0x080085d9
 800858c:	2300      	movs	r3, #0
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e14a      	b.n	800882a <UART_SetConfig+0x5a6>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e146      	b.n	800882a <UART_SetConfig+0x5a6>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e142      	b.n	800882a <UART_SetConfig+0x5a6>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e13e      	b.n	800882a <UART_SetConfig+0x5a6>
 80085ac:	cfff69f3 	.word	0xcfff69f3
 80085b0:	58000c00 	.word	0x58000c00
 80085b4:	11fff4ff 	.word	0x11fff4ff
 80085b8:	40011000 	.word	0x40011000
 80085bc:	58024400 	.word	0x58024400
 80085c0:	40004400 	.word	0x40004400
 80085c4:	40004800 	.word	0x40004800
 80085c8:	40004c00 	.word	0x40004c00
 80085cc:	40005000 	.word	0x40005000
 80085d0:	2320      	movs	r3, #32
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d6:	e128      	b.n	800882a <UART_SetConfig+0x5a6>
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e124      	b.n	800882a <UART_SetConfig+0x5a6>
 80085e0:	2380      	movs	r3, #128	; 0x80
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e120      	b.n	800882a <UART_SetConfig+0x5a6>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4acb      	ldr	r2, [pc, #812]	; (800891c <UART_SetConfig+0x698>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d176      	bne.n	80086e0 <UART_SetConfig+0x45c>
 80085f2:	4bcb      	ldr	r3, [pc, #812]	; (8008920 <UART_SetConfig+0x69c>)
 80085f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085fa:	2b28      	cmp	r3, #40	; 0x28
 80085fc:	d86c      	bhi.n	80086d8 <UART_SetConfig+0x454>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <UART_SetConfig+0x380>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	080086a9 	.word	0x080086a9
 8008608:	080086d9 	.word	0x080086d9
 800860c:	080086d9 	.word	0x080086d9
 8008610:	080086d9 	.word	0x080086d9
 8008614:	080086d9 	.word	0x080086d9
 8008618:	080086d9 	.word	0x080086d9
 800861c:	080086d9 	.word	0x080086d9
 8008620:	080086d9 	.word	0x080086d9
 8008624:	080086b1 	.word	0x080086b1
 8008628:	080086d9 	.word	0x080086d9
 800862c:	080086d9 	.word	0x080086d9
 8008630:	080086d9 	.word	0x080086d9
 8008634:	080086d9 	.word	0x080086d9
 8008638:	080086d9 	.word	0x080086d9
 800863c:	080086d9 	.word	0x080086d9
 8008640:	080086d9 	.word	0x080086d9
 8008644:	080086b9 	.word	0x080086b9
 8008648:	080086d9 	.word	0x080086d9
 800864c:	080086d9 	.word	0x080086d9
 8008650:	080086d9 	.word	0x080086d9
 8008654:	080086d9 	.word	0x080086d9
 8008658:	080086d9 	.word	0x080086d9
 800865c:	080086d9 	.word	0x080086d9
 8008660:	080086d9 	.word	0x080086d9
 8008664:	080086c1 	.word	0x080086c1
 8008668:	080086d9 	.word	0x080086d9
 800866c:	080086d9 	.word	0x080086d9
 8008670:	080086d9 	.word	0x080086d9
 8008674:	080086d9 	.word	0x080086d9
 8008678:	080086d9 	.word	0x080086d9
 800867c:	080086d9 	.word	0x080086d9
 8008680:	080086d9 	.word	0x080086d9
 8008684:	080086c9 	.word	0x080086c9
 8008688:	080086d9 	.word	0x080086d9
 800868c:	080086d9 	.word	0x080086d9
 8008690:	080086d9 	.word	0x080086d9
 8008694:	080086d9 	.word	0x080086d9
 8008698:	080086d9 	.word	0x080086d9
 800869c:	080086d9 	.word	0x080086d9
 80086a0:	080086d9 	.word	0x080086d9
 80086a4:	080086d1 	.word	0x080086d1
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ae:	e0bc      	b.n	800882a <UART_SetConfig+0x5a6>
 80086b0:	2304      	movs	r3, #4
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b6:	e0b8      	b.n	800882a <UART_SetConfig+0x5a6>
 80086b8:	2308      	movs	r3, #8
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086be:	e0b4      	b.n	800882a <UART_SetConfig+0x5a6>
 80086c0:	2310      	movs	r3, #16
 80086c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c6:	e0b0      	b.n	800882a <UART_SetConfig+0x5a6>
 80086c8:	2320      	movs	r3, #32
 80086ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ce:	e0ac      	b.n	800882a <UART_SetConfig+0x5a6>
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d6:	e0a8      	b.n	800882a <UART_SetConfig+0x5a6>
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086de:	e0a4      	b.n	800882a <UART_SetConfig+0x5a6>
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a8f      	ldr	r2, [pc, #572]	; (8008924 <UART_SetConfig+0x6a0>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d130      	bne.n	800874c <UART_SetConfig+0x4c8>
 80086ea:	4b8d      	ldr	r3, [pc, #564]	; (8008920 <UART_SetConfig+0x69c>)
 80086ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	2b05      	cmp	r3, #5
 80086f4:	d826      	bhi.n	8008744 <UART_SetConfig+0x4c0>
 80086f6:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <UART_SetConfig+0x478>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	08008715 	.word	0x08008715
 8008700:	0800871d 	.word	0x0800871d
 8008704:	08008725 	.word	0x08008725
 8008708:	0800872d 	.word	0x0800872d
 800870c:	08008735 	.word	0x08008735
 8008710:	0800873d 	.word	0x0800873d
 8008714:	2300      	movs	r3, #0
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871a:	e086      	b.n	800882a <UART_SetConfig+0x5a6>
 800871c:	2304      	movs	r3, #4
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e082      	b.n	800882a <UART_SetConfig+0x5a6>
 8008724:	2308      	movs	r3, #8
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e07e      	b.n	800882a <UART_SetConfig+0x5a6>
 800872c:	2310      	movs	r3, #16
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008732:	e07a      	b.n	800882a <UART_SetConfig+0x5a6>
 8008734:	2320      	movs	r3, #32
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873a:	e076      	b.n	800882a <UART_SetConfig+0x5a6>
 800873c:	2340      	movs	r3, #64	; 0x40
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008742:	e072      	b.n	800882a <UART_SetConfig+0x5a6>
 8008744:	2380      	movs	r3, #128	; 0x80
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874a:	e06e      	b.n	800882a <UART_SetConfig+0x5a6>
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a75      	ldr	r2, [pc, #468]	; (8008928 <UART_SetConfig+0x6a4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d130      	bne.n	80087b8 <UART_SetConfig+0x534>
 8008756:	4b72      	ldr	r3, [pc, #456]	; (8008920 <UART_SetConfig+0x69c>)
 8008758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	2b05      	cmp	r3, #5
 8008760:	d826      	bhi.n	80087b0 <UART_SetConfig+0x52c>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <UART_SetConfig+0x4e4>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	08008781 	.word	0x08008781
 800876c:	08008789 	.word	0x08008789
 8008770:	08008791 	.word	0x08008791
 8008774:	08008799 	.word	0x08008799
 8008778:	080087a1 	.word	0x080087a1
 800877c:	080087a9 	.word	0x080087a9
 8008780:	2300      	movs	r3, #0
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e050      	b.n	800882a <UART_SetConfig+0x5a6>
 8008788:	2304      	movs	r3, #4
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e04c      	b.n	800882a <UART_SetConfig+0x5a6>
 8008790:	2308      	movs	r3, #8
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e048      	b.n	800882a <UART_SetConfig+0x5a6>
 8008798:	2310      	movs	r3, #16
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e044      	b.n	800882a <UART_SetConfig+0x5a6>
 80087a0:	2320      	movs	r3, #32
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e040      	b.n	800882a <UART_SetConfig+0x5a6>
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e03c      	b.n	800882a <UART_SetConfig+0x5a6>
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b6:	e038      	b.n	800882a <UART_SetConfig+0x5a6>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a5b      	ldr	r2, [pc, #364]	; (800892c <UART_SetConfig+0x6a8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d130      	bne.n	8008824 <UART_SetConfig+0x5a0>
 80087c2:	4b57      	ldr	r3, [pc, #348]	; (8008920 <UART_SetConfig+0x69c>)
 80087c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d826      	bhi.n	800881c <UART_SetConfig+0x598>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <UART_SetConfig+0x550>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087ed 	.word	0x080087ed
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	080087fd 	.word	0x080087fd
 80087e0:	08008805 	.word	0x08008805
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	08008815 	.word	0x08008815
 80087ec:	2302      	movs	r3, #2
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e01a      	b.n	800882a <UART_SetConfig+0x5a6>
 80087f4:	2304      	movs	r3, #4
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e016      	b.n	800882a <UART_SetConfig+0x5a6>
 80087fc:	2308      	movs	r3, #8
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e012      	b.n	800882a <UART_SetConfig+0x5a6>
 8008804:	2310      	movs	r3, #16
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e00e      	b.n	800882a <UART_SetConfig+0x5a6>
 800880c:	2320      	movs	r3, #32
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e00a      	b.n	800882a <UART_SetConfig+0x5a6>
 8008814:	2340      	movs	r3, #64	; 0x40
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e006      	b.n	800882a <UART_SetConfig+0x5a6>
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e002      	b.n	800882a <UART_SetConfig+0x5a6>
 8008824:	2380      	movs	r3, #128	; 0x80
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a3f      	ldr	r2, [pc, #252]	; (800892c <UART_SetConfig+0x6a8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	f040 80f8 	bne.w	8008a26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008836:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800883a:	2b20      	cmp	r3, #32
 800883c:	dc46      	bgt.n	80088cc <UART_SetConfig+0x648>
 800883e:	2b02      	cmp	r3, #2
 8008840:	f2c0 8082 	blt.w	8008948 <UART_SetConfig+0x6c4>
 8008844:	3b02      	subs	r3, #2
 8008846:	2b1e      	cmp	r3, #30
 8008848:	d87e      	bhi.n	8008948 <UART_SetConfig+0x6c4>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0x5cc>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	080088d3 	.word	0x080088d3
 8008854:	08008949 	.word	0x08008949
 8008858:	080088db 	.word	0x080088db
 800885c:	08008949 	.word	0x08008949
 8008860:	08008949 	.word	0x08008949
 8008864:	08008949 	.word	0x08008949
 8008868:	080088eb 	.word	0x080088eb
 800886c:	08008949 	.word	0x08008949
 8008870:	08008949 	.word	0x08008949
 8008874:	08008949 	.word	0x08008949
 8008878:	08008949 	.word	0x08008949
 800887c:	08008949 	.word	0x08008949
 8008880:	08008949 	.word	0x08008949
 8008884:	08008949 	.word	0x08008949
 8008888:	080088fb 	.word	0x080088fb
 800888c:	08008949 	.word	0x08008949
 8008890:	08008949 	.word	0x08008949
 8008894:	08008949 	.word	0x08008949
 8008898:	08008949 	.word	0x08008949
 800889c:	08008949 	.word	0x08008949
 80088a0:	08008949 	.word	0x08008949
 80088a4:	08008949 	.word	0x08008949
 80088a8:	08008949 	.word	0x08008949
 80088ac:	08008949 	.word	0x08008949
 80088b0:	08008949 	.word	0x08008949
 80088b4:	08008949 	.word	0x08008949
 80088b8:	08008949 	.word	0x08008949
 80088bc:	08008949 	.word	0x08008949
 80088c0:	08008949 	.word	0x08008949
 80088c4:	08008949 	.word	0x08008949
 80088c8:	0800893b 	.word	0x0800893b
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d037      	beq.n	8008940 <UART_SetConfig+0x6bc>
 80088d0:	e03a      	b.n	8008948 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088d2:	f7fc fe77 	bl	80055c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80088d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088d8:	e03c      	b.n	8008954 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fc fe86 	bl	80055f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e8:	e034      	b.n	8008954 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ea:	f107 0318 	add.w	r3, r7, #24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fc ffd2 	bl	8005898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f8:	e02c      	b.n	8008954 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <UART_SetConfig+0x69c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d016      	beq.n	8008934 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <UART_SetConfig+0x69c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	08db      	lsrs	r3, r3, #3
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	4a07      	ldr	r2, [pc, #28]	; (8008930 <UART_SetConfig+0x6ac>)
 8008912:	fa22 f303 	lsr.w	r3, r2, r3
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008918:	e01c      	b.n	8008954 <UART_SetConfig+0x6d0>
 800891a:	bf00      	nop
 800891c:	40011400 	.word	0x40011400
 8008920:	58024400 	.word	0x58024400
 8008924:	40007800 	.word	0x40007800
 8008928:	40007c00 	.word	0x40007c00
 800892c:	58000c00 	.word	0x58000c00
 8008930:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008934:	4b9d      	ldr	r3, [pc, #628]	; (8008bac <UART_SetConfig+0x928>)
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008938:	e00c      	b.n	8008954 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800893a:	4b9d      	ldr	r3, [pc, #628]	; (8008bb0 <UART_SetConfig+0x92c>)
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800893e:	e009      	b.n	8008954 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008946:	e005      	b.n	8008954 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008952:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 81de 	beq.w	8008d18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	4a94      	ldr	r2, [pc, #592]	; (8008bb4 <UART_SetConfig+0x930>)
 8008962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008966:	461a      	mov	r2, r3
 8008968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896a:	fbb3 f3f2 	udiv	r3, r3, r2
 800896e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	4413      	add	r3, r2
 800897a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897c:	429a      	cmp	r2, r3
 800897e:	d305      	bcc.n	800898c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008988:	429a      	cmp	r2, r3
 800898a:	d903      	bls.n	8008994 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008992:	e1c1      	b.n	8008d18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008996:	2200      	movs	r2, #0
 8008998:	60bb      	str	r3, [r7, #8]
 800899a:	60fa      	str	r2, [r7, #12]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	4a84      	ldr	r2, [pc, #528]	; (8008bb4 <UART_SetConfig+0x930>)
 80089a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2200      	movs	r2, #0
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089b6:	f7f7 fce3 	bl	8000380 <__aeabi_uldivmod>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4610      	mov	r0, r2
 80089c0:	4619      	mov	r1, r3
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	020b      	lsls	r3, r1, #8
 80089cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089d0:	0202      	lsls	r2, r0, #8
 80089d2:	6979      	ldr	r1, [r7, #20]
 80089d4:	6849      	ldr	r1, [r1, #4]
 80089d6:	0849      	lsrs	r1, r1, #1
 80089d8:	2000      	movs	r0, #0
 80089da:	460c      	mov	r4, r1
 80089dc:	4605      	mov	r5, r0
 80089de:	eb12 0804 	adds.w	r8, r2, r4
 80089e2:	eb43 0905 	adc.w	r9, r3, r5
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	469a      	mov	sl, r3
 80089ee:	4693      	mov	fp, r2
 80089f0:	4652      	mov	r2, sl
 80089f2:	465b      	mov	r3, fp
 80089f4:	4640      	mov	r0, r8
 80089f6:	4649      	mov	r1, r9
 80089f8:	f7f7 fcc2 	bl	8000380 <__aeabi_uldivmod>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4613      	mov	r3, r2
 8008a02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a0a:	d308      	bcc.n	8008a1e <UART_SetConfig+0x79a>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a12:	d204      	bcs.n	8008a1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a1a:	60da      	str	r2, [r3, #12]
 8008a1c:	e17c      	b.n	8008d18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a24:	e178      	b.n	8008d18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a2e:	f040 80c5 	bne.w	8008bbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008a32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	dc48      	bgt.n	8008acc <UART_SetConfig+0x848>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	db7b      	blt.n	8008b36 <UART_SetConfig+0x8b2>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d879      	bhi.n	8008b36 <UART_SetConfig+0x8b2>
 8008a42:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x7c4>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008ad3 	.word	0x08008ad3
 8008a4c:	08008adb 	.word	0x08008adb
 8008a50:	08008b37 	.word	0x08008b37
 8008a54:	08008b37 	.word	0x08008b37
 8008a58:	08008ae3 	.word	0x08008ae3
 8008a5c:	08008b37 	.word	0x08008b37
 8008a60:	08008b37 	.word	0x08008b37
 8008a64:	08008b37 	.word	0x08008b37
 8008a68:	08008af3 	.word	0x08008af3
 8008a6c:	08008b37 	.word	0x08008b37
 8008a70:	08008b37 	.word	0x08008b37
 8008a74:	08008b37 	.word	0x08008b37
 8008a78:	08008b37 	.word	0x08008b37
 8008a7c:	08008b37 	.word	0x08008b37
 8008a80:	08008b37 	.word	0x08008b37
 8008a84:	08008b37 	.word	0x08008b37
 8008a88:	08008b03 	.word	0x08008b03
 8008a8c:	08008b37 	.word	0x08008b37
 8008a90:	08008b37 	.word	0x08008b37
 8008a94:	08008b37 	.word	0x08008b37
 8008a98:	08008b37 	.word	0x08008b37
 8008a9c:	08008b37 	.word	0x08008b37
 8008aa0:	08008b37 	.word	0x08008b37
 8008aa4:	08008b37 	.word	0x08008b37
 8008aa8:	08008b37 	.word	0x08008b37
 8008aac:	08008b37 	.word	0x08008b37
 8008ab0:	08008b37 	.word	0x08008b37
 8008ab4:	08008b37 	.word	0x08008b37
 8008ab8:	08008b37 	.word	0x08008b37
 8008abc:	08008b37 	.word	0x08008b37
 8008ac0:	08008b37 	.word	0x08008b37
 8008ac4:	08008b37 	.word	0x08008b37
 8008ac8:	08008b29 	.word	0x08008b29
 8008acc:	2b40      	cmp	r3, #64	; 0x40
 8008ace:	d02e      	beq.n	8008b2e <UART_SetConfig+0x8aa>
 8008ad0:	e031      	b.n	8008b36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ad2:	f7fb fe05 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8008ad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ad8:	e033      	b.n	8008b42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ada:	f7fb fe17 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8008ade:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ae0:	e02f      	b.n	8008b42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fc fd82 	bl	80055f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af0:	e027      	b.n	8008b42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008af2:	f107 0318 	add.w	r3, r7, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fc fece 	bl	8005898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b00:	e01f      	b.n	8008b42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b02:	4b2d      	ldr	r3, [pc, #180]	; (8008bb8 <UART_SetConfig+0x934>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d009      	beq.n	8008b22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b0e:	4b2a      	ldr	r3, [pc, #168]	; (8008bb8 <UART_SetConfig+0x934>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	08db      	lsrs	r3, r3, #3
 8008b14:	f003 0303 	and.w	r3, r3, #3
 8008b18:	4a24      	ldr	r2, [pc, #144]	; (8008bac <UART_SetConfig+0x928>)
 8008b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b20:	e00f      	b.n	8008b42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b22:	4b22      	ldr	r3, [pc, #136]	; (8008bac <UART_SetConfig+0x928>)
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b26:	e00c      	b.n	8008b42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b28:	4b21      	ldr	r3, [pc, #132]	; (8008bb0 <UART_SetConfig+0x92c>)
 8008b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b2c:	e009      	b.n	8008b42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b34:	e005      	b.n	8008b42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 80e7 	beq.w	8008d18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <UART_SetConfig+0x930>)
 8008b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b5c:	005a      	lsls	r2, r3, #1
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	085b      	lsrs	r3, r3, #1
 8008b64:	441a      	add	r2, r3
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	2b0f      	cmp	r3, #15
 8008b74:	d916      	bls.n	8008ba4 <UART_SetConfig+0x920>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b7c:	d212      	bcs.n	8008ba4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f023 030f 	bic.w	r3, r3, #15
 8008b86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b96:	4313      	orrs	r3, r2
 8008b98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ba0:	60da      	str	r2, [r3, #12]
 8008ba2:	e0b9      	b.n	8008d18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008baa:	e0b5      	b.n	8008d18 <UART_SetConfig+0xa94>
 8008bac:	03d09000 	.word	0x03d09000
 8008bb0:	003d0900 	.word	0x003d0900
 8008bb4:	0800b034 	.word	0x0800b034
 8008bb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	dc49      	bgt.n	8008c58 <UART_SetConfig+0x9d4>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	db7c      	blt.n	8008cc2 <UART_SetConfig+0xa3e>
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d87a      	bhi.n	8008cc2 <UART_SetConfig+0xa3e>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <UART_SetConfig+0x950>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008c5f 	.word	0x08008c5f
 8008bd8:	08008c67 	.word	0x08008c67
 8008bdc:	08008cc3 	.word	0x08008cc3
 8008be0:	08008cc3 	.word	0x08008cc3
 8008be4:	08008c6f 	.word	0x08008c6f
 8008be8:	08008cc3 	.word	0x08008cc3
 8008bec:	08008cc3 	.word	0x08008cc3
 8008bf0:	08008cc3 	.word	0x08008cc3
 8008bf4:	08008c7f 	.word	0x08008c7f
 8008bf8:	08008cc3 	.word	0x08008cc3
 8008bfc:	08008cc3 	.word	0x08008cc3
 8008c00:	08008cc3 	.word	0x08008cc3
 8008c04:	08008cc3 	.word	0x08008cc3
 8008c08:	08008cc3 	.word	0x08008cc3
 8008c0c:	08008cc3 	.word	0x08008cc3
 8008c10:	08008cc3 	.word	0x08008cc3
 8008c14:	08008c8f 	.word	0x08008c8f
 8008c18:	08008cc3 	.word	0x08008cc3
 8008c1c:	08008cc3 	.word	0x08008cc3
 8008c20:	08008cc3 	.word	0x08008cc3
 8008c24:	08008cc3 	.word	0x08008cc3
 8008c28:	08008cc3 	.word	0x08008cc3
 8008c2c:	08008cc3 	.word	0x08008cc3
 8008c30:	08008cc3 	.word	0x08008cc3
 8008c34:	08008cc3 	.word	0x08008cc3
 8008c38:	08008cc3 	.word	0x08008cc3
 8008c3c:	08008cc3 	.word	0x08008cc3
 8008c40:	08008cc3 	.word	0x08008cc3
 8008c44:	08008cc3 	.word	0x08008cc3
 8008c48:	08008cc3 	.word	0x08008cc3
 8008c4c:	08008cc3 	.word	0x08008cc3
 8008c50:	08008cc3 	.word	0x08008cc3
 8008c54:	08008cb5 	.word	0x08008cb5
 8008c58:	2b40      	cmp	r3, #64	; 0x40
 8008c5a:	d02e      	beq.n	8008cba <UART_SetConfig+0xa36>
 8008c5c:	e031      	b.n	8008cc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c5e:	f7fb fd3f 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8008c62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c64:	e033      	b.n	8008cce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c66:	f7fb fd51 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8008c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c6c:	e02f      	b.n	8008cce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fc fcbc 	bl	80055f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7c:	e027      	b.n	8008cce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7e:	f107 0318 	add.w	r3, r7, #24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fc fe08 	bl	8005898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c8c:	e01f      	b.n	8008cce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c8e:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <UART_SetConfig+0xac0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d009      	beq.n	8008cae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c9a:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <UART_SetConfig+0xac0>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	08db      	lsrs	r3, r3, #3
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	4a28      	ldr	r2, [pc, #160]	; (8008d48 <UART_SetConfig+0xac4>)
 8008ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cac:	e00f      	b.n	8008cce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008cae:	4b26      	ldr	r3, [pc, #152]	; (8008d48 <UART_SetConfig+0xac4>)
 8008cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb2:	e00c      	b.n	8008cce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cb4:	4b25      	ldr	r3, [pc, #148]	; (8008d4c <UART_SetConfig+0xac8>)
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb8:	e009      	b.n	8008cce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc0:	e005      	b.n	8008cce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8008cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d021      	beq.n	8008d18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	4a1d      	ldr	r2, [pc, #116]	; (8008d50 <UART_SetConfig+0xacc>)
 8008cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	085b      	lsrs	r3, r3, #1
 8008cec:	441a      	add	r2, r3
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	2b0f      	cmp	r3, #15
 8008cfc:	d909      	bls.n	8008d12 <UART_SetConfig+0xa8e>
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d04:	d205      	bcs.n	8008d12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60da      	str	r2, [r3, #12]
 8008d10:	e002      	b.n	8008d18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2200      	movs	r2, #0
 8008d32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d34:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3748      	adds	r7, #72	; 0x48
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d42:	bf00      	nop
 8008d44:	58024400 	.word	0x58024400
 8008d48:	03d09000 	.word	0x03d09000
 8008d4c:	003d0900 	.word	0x003d0900
 8008d50:	0800b034 	.word	0x0800b034

08008d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00a      	beq.n	8008dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	f003 0308 	and.w	r3, r3, #8
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01a      	beq.n	8008e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e52:	d10a      	bne.n	8008e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	605a      	str	r2, [r3, #4]
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ea8:	f7f8 fe2e 	bl	8001b08 <HAL_GetTick>
 8008eac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d10e      	bne.n	8008eda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f82f 	bl	8008f2e <UART_WaitOnFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e025      	b.n	8008f26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d10e      	bne.n	8008f06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f819 	bl	8008f2e <UART_WaitOnFlagUntilTimeout>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e00f      	b.n	8008f26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b09c      	sub	sp, #112	; 0x70
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	603b      	str	r3, [r7, #0]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f3e:	e0a9      	b.n	8009094 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	f000 80a5 	beq.w	8009094 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f4a:	f7f8 fddd 	bl	8001b08 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d302      	bcc.n	8008f60 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d140      	bne.n	8008fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f74:	667b      	str	r3, [r7, #100]	; 0x64
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e6      	bne.n	8008f60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3308      	adds	r3, #8
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	f023 0301 	bic.w	r3, r3, #1
 8008fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e5      	bne.n	8008f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e069      	b.n	80090b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d051      	beq.n	8009094 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ffe:	d149      	bne.n	8009094 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009008:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800901e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
 800902a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800902e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e6      	bne.n	800900a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	613b      	str	r3, [r7, #16]
   return(result);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	f023 0301 	bic.w	r3, r3, #1
 8009052:	66bb      	str	r3, [r7, #104]	; 0x68
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3308      	adds	r3, #8
 800905a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800905c:	623a      	str	r2, [r7, #32]
 800905e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	69f9      	ldr	r1, [r7, #28]
 8009062:	6a3a      	ldr	r2, [r7, #32]
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	61bb      	str	r3, [r7, #24]
   return(result);
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e5      	bne.n	800903c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2220      	movs	r2, #32
 8009074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2220      	movs	r2, #32
 800907c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2220      	movs	r2, #32
 8009084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e010      	b.n	80090b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69da      	ldr	r2, [r3, #28]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4013      	ands	r3, r2
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	bf0c      	ite	eq
 80090a4:	2301      	moveq	r3, #1
 80090a6:	2300      	movne	r3, #0
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	f43f af46 	beq.w	8008f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3770      	adds	r7, #112	; 0x70
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b0a3      	sub	sp, #140	; 0x8c
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	88fa      	ldrh	r2, [r7, #6]
 80090d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	88fa      	ldrh	r2, [r7, #6]
 80090e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090f2:	d10e      	bne.n	8009112 <UART_Start_Receive_IT+0x52>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d105      	bne.n	8009108 <UART_Start_Receive_IT+0x48>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009102:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009106:	e02d      	b.n	8009164 <UART_Start_Receive_IT+0xa4>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	22ff      	movs	r2, #255	; 0xff
 800910c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009110:	e028      	b.n	8009164 <UART_Start_Receive_IT+0xa4>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10d      	bne.n	8009136 <UART_Start_Receive_IT+0x76>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d104      	bne.n	800912c <UART_Start_Receive_IT+0x6c>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800912a:	e01b      	b.n	8009164 <UART_Start_Receive_IT+0xa4>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	227f      	movs	r2, #127	; 0x7f
 8009130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009134:	e016      	b.n	8009164 <UART_Start_Receive_IT+0xa4>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800913e:	d10d      	bne.n	800915c <UART_Start_Receive_IT+0x9c>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <UART_Start_Receive_IT+0x92>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	227f      	movs	r2, #127	; 0x7f
 800914c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009150:	e008      	b.n	8009164 <UART_Start_Receive_IT+0xa4>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	223f      	movs	r2, #63	; 0x3f
 8009156:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800915a:	e003      	b.n	8009164 <UART_Start_Receive_IT+0xa4>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2222      	movs	r2, #34	; 0x22
 8009170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009186:	f043 0301 	orr.w	r3, r3, #1
 800918a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009198:	673a      	str	r2, [r7, #112]	; 0x70
 800919a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800919e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80091a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e3      	bne.n	8009174 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b4:	d153      	bne.n	800925e <UART_Start_Receive_IT+0x19e>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091bc:	88fa      	ldrh	r2, [r7, #6]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d34d      	bcc.n	800925e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ca:	d107      	bne.n	80091dc <UART_Start_Receive_IT+0x11c>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4a4b      	ldr	r2, [pc, #300]	; (8009304 <UART_Start_Receive_IT+0x244>)
 80091d8:	671a      	str	r2, [r3, #112]	; 0x70
 80091da:	e002      	b.n	80091e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a4a      	ldr	r2, [pc, #296]	; (8009308 <UART_Start_Receive_IT+0x248>)
 80091e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d01a      	beq.n	8009228 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009216:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800921a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e4      	bne.n	80091f2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3308      	adds	r3, #8
 800922e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800923e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3308      	adds	r3, #8
 8009246:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009248:	64ba      	str	r2, [r7, #72]	; 0x48
 800924a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800924e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e5      	bne.n	8009228 <UART_Start_Receive_IT+0x168>
 800925c:	e04a      	b.n	80092f4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009266:	d107      	bne.n	8009278 <UART_Start_Receive_IT+0x1b8>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4a26      	ldr	r2, [pc, #152]	; (800930c <UART_Start_Receive_IT+0x24c>)
 8009274:	671a      	str	r2, [r3, #112]	; 0x70
 8009276:	e002      	b.n	800927e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4a25      	ldr	r2, [pc, #148]	; (8009310 <UART_Start_Receive_IT+0x250>)
 800927c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d019      	beq.n	80092c2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80092a2:	677b      	str	r3, [r7, #116]	; 0x74
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
 80092ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b4:	e841 2300 	strex	r3, r2, [r1]
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e6      	bne.n	800928e <UART_Start_Receive_IT+0x1ce>
 80092c0:	e018      	b.n	80092f4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	613b      	str	r3, [r7, #16]
   return(result);
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f043 0320 	orr.w	r3, r3, #32
 80092d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092e0:	623b      	str	r3, [r7, #32]
 80092e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	6a3a      	ldr	r2, [r7, #32]
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e6      	bne.n	80092c2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	378c      	adds	r7, #140	; 0x8c
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	08009a1d 	.word	0x08009a1d
 8009308:	08009725 	.word	0x08009725
 800930c:	080095c3 	.word	0x080095c3
 8009310:	08009463 	.word	0x08009463

08009314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009314:	b480      	push	{r7}
 8009316:	b095      	sub	sp, #84	; 0x54
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933a:	643b      	str	r3, [r7, #64]	; 0x40
 800933c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e6      	bne.n	800931c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3308      	adds	r3, #8
 8009354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	61fb      	str	r3, [r7, #28]
   return(result);
 800935e:	69fa      	ldr	r2, [r7, #28]
 8009360:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <UART_EndRxTransfer+0xc8>)
 8009362:	4013      	ands	r3, r2
 8009364:	64bb      	str	r3, [r7, #72]	; 0x48
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3308      	adds	r3, #8
 800936c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e5      	bne.n	800934e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009386:	2b01      	cmp	r3, #1
 8009388:	d118      	bne.n	80093bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	60bb      	str	r3, [r7, #8]
   return(result);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f023 0310 	bic.w	r3, r3, #16
 800939e:	647b      	str	r3, [r7, #68]	; 0x44
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a8:	61bb      	str	r3, [r7, #24]
 80093aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6979      	ldr	r1, [r7, #20]
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	613b      	str	r3, [r7, #16]
   return(result);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e6      	bne.n	800938a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 80093d0:	bf00      	nop
 80093d2:	3754      	adds	r7, #84	; 0x54
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	effffffe 	.word	0xeffffffe

080093e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f7fe ff2a 	bl	8008258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	60bb      	str	r3, [r7, #8]
   return(result);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009428:	61fb      	str	r3, [r7, #28]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	61bb      	str	r3, [r7, #24]
 8009434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6979      	ldr	r1, [r7, #20]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	613b      	str	r3, [r7, #16]
   return(result);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e6      	bne.n	8009414 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2220      	movs	r2, #32
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7fe fef5 	bl	8008244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800945a:	bf00      	nop
 800945c:	3720      	adds	r7, #32
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b096      	sub	sp, #88	; 0x58
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009470:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800947a:	2b22      	cmp	r3, #34	; 0x22
 800947c:	f040 8095 	bne.w	80095aa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800948a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800948e:	b2d9      	uxtb	r1, r3
 8009490:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009494:	b2da      	uxtb	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800949a:	400a      	ands	r2, r1
 800949c:	b2d2      	uxtb	r2, r2
 800949e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d178      	bne.n	80095ba <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094dc:	653b      	str	r3, [r7, #80]	; 0x50
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094e6:	647b      	str	r3, [r7, #68]	; 0x44
 80094e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e6      	bne.n	80094c8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3308      	adds	r3, #8
 8009500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	623b      	str	r3, [r7, #32]
   return(result);
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	f023 0301 	bic.w	r3, r3, #1
 8009510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3308      	adds	r3, #8
 8009518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800951a:	633a      	str	r2, [r7, #48]	; 0x30
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e5      	bne.n	80094fa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009540:	2b01      	cmp	r3, #1
 8009542:	d12e      	bne.n	80095a2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	e853 3f00 	ldrex	r3, [r3]
 8009556:	60fb      	str	r3, [r7, #12]
   return(result);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0310 	bic.w	r3, r3, #16
 800955e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009568:	61fb      	str	r3, [r7, #28]
 800956a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956c:	69b9      	ldr	r1, [r7, #24]
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	e841 2300 	strex	r3, r2, [r1]
 8009574:	617b      	str	r3, [r7, #20]
   return(result);
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e6      	bne.n	800954a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f003 0310 	and.w	r3, r3, #16
 8009586:	2b10      	cmp	r3, #16
 8009588:	d103      	bne.n	8009592 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2210      	movs	r2, #16
 8009590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fe fe66 	bl	800826c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095a0:	e00b      	b.n	80095ba <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f7 fa5e 	bl	8000a64 <HAL_UART_RxCpltCallback>
}
 80095a8:	e007      	b.n	80095ba <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	699a      	ldr	r2, [r3, #24]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f042 0208 	orr.w	r2, r2, #8
 80095b8:	619a      	str	r2, [r3, #24]
}
 80095ba:	bf00      	nop
 80095bc:	3758      	adds	r7, #88	; 0x58
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b096      	sub	sp, #88	; 0x58
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095da:	2b22      	cmp	r3, #34	; 0x22
 80095dc:	f040 8095 	bne.w	800970a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80095f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80095f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095f8:	4013      	ands	r3, r2
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009604:	1c9a      	adds	r2, r3, #2
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009610:	b29b      	uxth	r3, r3
 8009612:	3b01      	subs	r3, #1
 8009614:	b29a      	uxth	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009622:	b29b      	uxth	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d178      	bne.n	800971a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800963c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009646:	643b      	str	r3, [r7, #64]	; 0x40
 8009648:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800964c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e6      	bne.n	8009628 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	61fb      	str	r3, [r7, #28]
   return(result);
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	64bb      	str	r3, [r7, #72]	; 0x48
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800967a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800967c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e5      	bne.n	800965a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d12e      	bne.n	8009702 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	e853 3f00 	ldrex	r3, [r3]
 80096b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f023 0310 	bic.w	r3, r3, #16
 80096be:	647b      	str	r3, [r7, #68]	; 0x44
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6979      	ldr	r1, [r7, #20]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	613b      	str	r3, [r7, #16]
   return(result);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e6      	bne.n	80096aa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f003 0310 	and.w	r3, r3, #16
 80096e6:	2b10      	cmp	r3, #16
 80096e8:	d103      	bne.n	80096f2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2210      	movs	r2, #16
 80096f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fe fdb6 	bl	800826c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009700:	e00b      	b.n	800971a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f7 f9ae 	bl	8000a64 <HAL_UART_RxCpltCallback>
}
 8009708:	e007      	b.n	800971a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	699a      	ldr	r2, [r3, #24]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0208 	orr.w	r2, r2, #8
 8009718:	619a      	str	r2, [r3, #24]
}
 800971a:	bf00      	nop
 800971c:	3758      	adds	r7, #88	; 0x58
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b0a6      	sub	sp, #152	; 0x98
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009732:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975a:	2b22      	cmp	r3, #34	; 0x22
 800975c:	f040 814d 	bne.w	80099fa <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009766:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800976a:	e0f4      	b.n	8009956 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009776:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800977a:	b2d9      	uxtb	r1, r3
 800977c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009780:	b2da      	uxtb	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009786:	400a      	ands	r2, r1
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b01      	subs	r3, #1
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d053      	beq.n	8009866 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d011      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0xca>
 80097ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2201      	movs	r2, #1
 80097dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e4:	f043 0201 	orr.w	r2, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d011      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80097fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2202      	movs	r2, #2
 800980c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009814:	f043 0204 	orr.w	r2, r3, #4
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800981e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	d011      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800982a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2204      	movs	r2, #4
 800983c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009844:	f043 0202 	orr.w	r2, r3, #2
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d006      	beq.n	8009866 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fe fcfd 	bl	8008258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800986c:	b29b      	uxth	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d171      	bne.n	8009956 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009894:	66bb      	str	r3, [r7, #104]	; 0x68
 8009896:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800989a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80098a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e4      	bne.n	8009872 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3308      	adds	r3, #8
 80098ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80098b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098ba:	4b56      	ldr	r3, [pc, #344]	; (8009a14 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80098bc:	4013      	ands	r3, r2
 80098be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3308      	adds	r3, #8
 80098c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098c8:	657a      	str	r2, [r7, #84]	; 0x54
 80098ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e5      	bne.n	80098a8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d12e      	bne.n	8009950 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	f023 0310 	bic.w	r3, r3, #16
 800990c:	67bb      	str	r3, [r7, #120]	; 0x78
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009916:	643b      	str	r3, [r7, #64]	; 0x40
 8009918:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800991c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b10      	cmp	r3, #16
 8009936:	d103      	bne.n	8009940 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2210      	movs	r2, #16
 800993e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7fe fc8f 	bl	800826c <HAL_UARTEx_RxEventCallback>
 800994e:	e002      	b.n	8009956 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7f7 f887 	bl	8000a64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009956:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800995a:	2b00      	cmp	r3, #0
 800995c:	d006      	beq.n	800996c <UART_RxISR_8BIT_FIFOEN+0x248>
 800995e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	f47f af00 	bne.w	800976c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009972:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009976:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800997a:	2b00      	cmp	r3, #0
 800997c:	d045      	beq.n	8009a0a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009984:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009988:	429a      	cmp	r2, r3
 800998a:	d23e      	bcs.n	8009a0a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	61fb      	str	r3, [r7, #28]
   return(result);
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099a2:	673b      	str	r3, [r7, #112]	; 0x70
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3308      	adds	r3, #8
 80099aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80099ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e5      	bne.n	800998c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80099c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f043 0320 	orr.w	r3, r3, #32
 80099da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	6979      	ldr	r1, [r7, #20]
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	613b      	str	r3, [r7, #16]
   return(result);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e6      	bne.n	80099c6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099f8:	e007      	b.n	8009a0a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	699a      	ldr	r2, [r3, #24]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0208 	orr.w	r2, r2, #8
 8009a08:	619a      	str	r2, [r3, #24]
}
 8009a0a:	bf00      	nop
 8009a0c:	3798      	adds	r7, #152	; 0x98
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	effffffe 	.word	0xeffffffe
 8009a18:	08009463 	.word	0x08009463

08009a1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b0a8      	sub	sp, #160	; 0xa0
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a2a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69db      	ldr	r3, [r3, #28]
 8009a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a52:	2b22      	cmp	r3, #34	; 0x22
 8009a54:	f040 8151 	bne.w	8009cfa <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a5e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a62:	e0f8      	b.n	8009c56 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a76:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a7a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a7e:	4013      	ands	r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8c:	1c9a      	adds	r2, r3, #2
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d053      	beq.n	8009b62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d011      	beq.n	8009aea <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00b      	beq.n	8009aea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae0:	f043 0201 	orr.w	r2, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d011      	beq.n	8009b1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2202      	movs	r2, #2
 8009b08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b10:	f043 0204 	orr.w	r2, r3, #4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b1e:	f003 0304 	and.w	r3, r3, #4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d011      	beq.n	8009b4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2204      	movs	r2, #4
 8009b38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b40:	f043 0202 	orr.w	r2, r3, #2
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d006      	beq.n	8009b62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7fe fb7f 	bl	8008258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d173      	bne.n	8009c56 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b76:	e853 3f00 	ldrex	r3, [r3]
 8009b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b92:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b98:	e841 2300 	strex	r3, r2, [r1]
 8009b9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e4      	bne.n	8009b6e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3308      	adds	r3, #8
 8009baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bb6:	4b57      	ldr	r3, [pc, #348]	; (8009d14 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e3      	bne.n	8009ba4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d12e      	bne.n	8009c50 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c08:	f023 0310 	bic.w	r3, r3, #16
 8009c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c16:	647b      	str	r3, [r7, #68]	; 0x44
 8009c18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e6      	bne.n	8009bf8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b10      	cmp	r3, #16
 8009c36:	d103      	bne.n	8009c40 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe fb0f 	bl	800826c <HAL_UARTEx_RxEventCallback>
 8009c4e:	e002      	b.n	8009c56 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7f6 ff07 	bl	8000a64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c56:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d006      	beq.n	8009c6c <UART_RxISR_16BIT_FIFOEN+0x250>
 8009c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f47f aefc 	bne.w	8009a64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c72:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c76:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d045      	beq.n	8009d0a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c84:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d23e      	bcs.n	8009d0a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3308      	adds	r3, #8
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ca2:	677b      	str	r3, [r7, #116]	; 0x74
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3308      	adds	r3, #8
 8009caa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009cac:	633a      	str	r2, [r7, #48]	; 0x30
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e5      	bne.n	8009c8c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009cc4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f043 0320 	orr.w	r3, r3, #32
 8009cda:	673b      	str	r3, [r7, #112]	; 0x70
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	69b9      	ldr	r1, [r7, #24]
 8009cea:	69fa      	ldr	r2, [r7, #28]
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e6      	bne.n	8009cc6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cf8:	e007      	b.n	8009d0a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699a      	ldr	r2, [r3, #24]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f042 0208 	orr.w	r2, r2, #8
 8009d08:	619a      	str	r2, [r3, #24]
}
 8009d0a:	bf00      	nop
 8009d0c:	37a0      	adds	r7, #160	; 0xa0
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	effffffe 	.word	0xeffffffe
 8009d18:	080095c3 	.word	0x080095c3

08009d1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	e027      	b.n	8009dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2224      	movs	r2, #36	; 0x24
 8009d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 0201 	bic.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d101      	bne.n	8009de2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dde:	2302      	movs	r3, #2
 8009de0:	e02d      	b.n	8009e3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2224      	movs	r2, #36	; 0x24
 8009dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f850 	bl	8009ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d101      	bne.n	8009e5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e02d      	b.n	8009eba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2224      	movs	r2, #36	; 0x24
 8009e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 0201 	bic.w	r2, r2, #1
 8009e84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f812 	bl	8009ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d108      	bne.n	8009ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ee4:	e031      	b.n	8009f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ee6:	2310      	movs	r3, #16
 8009ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009eea:	2310      	movs	r3, #16
 8009eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	0e5b      	lsrs	r3, r3, #25
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	0f5b      	lsrs	r3, r3, #29
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	f003 0307 	and.w	r3, r3, #7
 8009f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	7b3a      	ldrb	r2, [r7, #12]
 8009f12:	4911      	ldr	r1, [pc, #68]	; (8009f58 <UARTEx_SetNbDataToProcess+0x94>)
 8009f14:	5c8a      	ldrb	r2, [r1, r2]
 8009f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f1a:	7b3a      	ldrb	r2, [r7, #12]
 8009f1c:	490f      	ldr	r1, [pc, #60]	; (8009f5c <UARTEx_SetNbDataToProcess+0x98>)
 8009f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
 8009f2e:	7b7a      	ldrb	r2, [r7, #13]
 8009f30:	4909      	ldr	r1, [pc, #36]	; (8009f58 <UARTEx_SetNbDataToProcess+0x94>)
 8009f32:	5c8a      	ldrb	r2, [r1, r2]
 8009f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f38:	7b7a      	ldrb	r2, [r7, #13]
 8009f3a:	4908      	ldr	r1, [pc, #32]	; (8009f5c <UARTEx_SetNbDataToProcess+0x98>)
 8009f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f4a:	bf00      	nop
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	0800b04c 	.word	0x0800b04c
 8009f5c:	0800b054 	.word	0x0800b054

08009f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f60:	b084      	sub	sp, #16
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	f107 001c 	add.w	r0, r7, #28
 8009f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d120      	bne.n	8009fba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	4b2a      	ldr	r3, [pc, #168]	; (800a034 <USB_CoreInit+0xd4>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d105      	bne.n	8009fae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 faac 	bl	800a50c <USB_CoreReset>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
 8009fb8:	e01a      	b.n	8009ff0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 faa0 	bl	800a50c <USB_CoreReset>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	639a      	str	r2, [r3, #56]	; 0x38
 8009fe2:	e005      	b.n	8009ff0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d116      	bne.n	800a024 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <USB_CoreInit+0xd8>)
 800a006:	4313      	orrs	r3, r2
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f043 0206 	orr.w	r2, r3, #6
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f043 0220 	orr.w	r2, r3, #32
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a024:	7bfb      	ldrb	r3, [r7, #15]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a030:	b004      	add	sp, #16
 800a032:	4770      	bx	lr
 800a034:	ffbdffbf 	.word	0xffbdffbf
 800a038:	03ee0000 	.word	0x03ee0000

0800a03c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f023 0201 	bic.w	r2, r3, #1
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d115      	bne.n	800a0ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a08c:	2001      	movs	r0, #1
 800a08e:	f7f7 fd47 	bl	8001b20 <HAL_Delay>
      ms++;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3301      	adds	r3, #1
 800a096:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fa29 	bl	800a4f0 <USB_GetMode>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d01e      	beq.n	800a0e2 <USB_SetCurrentMode+0x84>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b31      	cmp	r3, #49	; 0x31
 800a0a8:	d9f0      	bls.n	800a08c <USB_SetCurrentMode+0x2e>
 800a0aa:	e01a      	b.n	800a0e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d115      	bne.n	800a0de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0be:	2001      	movs	r0, #1
 800a0c0:	f7f7 fd2e 	bl	8001b20 <HAL_Delay>
      ms++;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa10 	bl	800a4f0 <USB_GetMode>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <USB_SetCurrentMode+0x84>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b31      	cmp	r3, #49	; 0x31
 800a0da:	d9f0      	bls.n	800a0be <USB_SetCurrentMode+0x60>
 800a0dc:	e001      	b.n	800a0e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e005      	b.n	800a0ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b32      	cmp	r3, #50	; 0x32
 800a0e6:	d101      	bne.n	800a0ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e000      	b.n	800a0ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b086      	sub	sp, #24
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a112:	2300      	movs	r3, #0
 800a114:	613b      	str	r3, [r7, #16]
 800a116:	e009      	b.n	800a12c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	3340      	adds	r3, #64	; 0x40
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	2200      	movs	r2, #0
 800a124:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	3301      	adds	r3, #1
 800a12a:	613b      	str	r3, [r7, #16]
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	2b0e      	cmp	r3, #14
 800a130:	d9f2      	bls.n	800a118 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d11c      	bne.n	800a172 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a146:	f043 0302 	orr.w	r3, r3, #2
 800a14a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	e005      	b.n	800a17e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a184:	461a      	mov	r2, r3
 800a186:	2300      	movs	r3, #0
 800a188:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a190:	4619      	mov	r1, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a198:	461a      	mov	r2, r3
 800a19a:	680b      	ldr	r3, [r1, #0]
 800a19c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d10c      	bne.n	800a1be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f965 	bl	800a47c <USB_SetDevSpeed>
 800a1b2:	e008      	b.n	800a1c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f960 	bl	800a47c <USB_SetDevSpeed>
 800a1bc:	e003      	b.n	800a1c6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a1be:	2103      	movs	r1, #3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f95b 	bl	800a47c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1c6:	2110      	movs	r1, #16
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8f3 	bl	800a3b4 <USB_FlushTxFifo>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f91f 	bl	800a41c <USB_FlushRxFifo>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a206:	461a      	mov	r2, r3
 800a208:	2300      	movs	r3, #0
 800a20a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
 800a210:	e043      	b.n	800a29a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a228:	d118      	bne.n	800a25c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23c:	461a      	mov	r2, r3
 800a23e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	e013      	b.n	800a26e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a252:	461a      	mov	r2, r3
 800a254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	e008      	b.n	800a26e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a268:	461a      	mov	r2, r3
 800a26a:	2300      	movs	r3, #0
 800a26c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27a:	461a      	mov	r2, r3
 800a27c:	2300      	movs	r3, #0
 800a27e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28c:	461a      	mov	r2, r3
 800a28e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	3301      	adds	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d3b7      	bcc.n	800a212 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	613b      	str	r3, [r7, #16]
 800a2a6:	e043      	b.n	800a330 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2be:	d118      	bne.n	800a2f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10a      	bne.n	800a2dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	e013      	b.n	800a304 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	e008      	b.n	800a304 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	461a      	mov	r2, r3
 800a300:	2300      	movs	r3, #0
 800a302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a310:	461a      	mov	r2, r3
 800a312:	2300      	movs	r3, #0
 800a314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a322:	461a      	mov	r2, r3
 800a324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3301      	adds	r3, #1
 800a32e:	613b      	str	r3, [r7, #16]
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	429a      	cmp	r2, r3
 800a336:	d3b7      	bcc.n	800a2a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a34a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	f043 0210 	orr.w	r2, r3, #16
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699a      	ldr	r2, [r3, #24]
 800a370:	4b0e      	ldr	r3, [pc, #56]	; (800a3ac <USB_DevInit+0x2b4>)
 800a372:	4313      	orrs	r3, r2
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	f043 0208 	orr.w	r2, r3, #8
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d105      	bne.n	800a39c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	4b06      	ldr	r3, [pc, #24]	; (800a3b0 <USB_DevInit+0x2b8>)
 800a396:	4313      	orrs	r3, r2
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3a8:	b004      	add	sp, #16
 800a3aa:	4770      	bx	lr
 800a3ac:	803c3800 	.word	0x803c3800
 800a3b0:	40000004 	.word	0x40000004

0800a3b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4a13      	ldr	r2, [pc, #76]	; (800a418 <USB_FlushTxFifo+0x64>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d901      	bls.n	800a3d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e01b      	b.n	800a40c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	daf2      	bge.n	800a3c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	019b      	lsls	r3, r3, #6
 800a3e4:	f043 0220 	orr.w	r2, r3, #32
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4a08      	ldr	r2, [pc, #32]	; (800a418 <USB_FlushTxFifo+0x64>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d901      	bls.n	800a3fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e006      	b.n	800a40c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b20      	cmp	r3, #32
 800a408:	d0f0      	beq.n	800a3ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	00030d40 	.word	0x00030d40

0800a41c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4a11      	ldr	r2, [pc, #68]	; (800a478 <USB_FlushRxFifo+0x5c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d901      	bls.n	800a43a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e018      	b.n	800a46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	daf2      	bge.n	800a428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2210      	movs	r2, #16
 800a44a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3301      	adds	r3, #1
 800a450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4a08      	ldr	r2, [pc, #32]	; (800a478 <USB_FlushRxFifo+0x5c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d901      	bls.n	800a45e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e006      	b.n	800a46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	f003 0310 	and.w	r3, r3, #16
 800a466:	2b10      	cmp	r3, #16
 800a468:	d0f0      	beq.n	800a44c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	00030d40 	.word	0x00030d40

0800a47c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a49c:	4313      	orrs	r3, r2
 800a49e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4c8:	f023 0303 	bic.w	r3, r3, #3
 800a4cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4dc:	f043 0302 	orr.w	r3, r3, #2
 800a4e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	f003 0301 	and.w	r3, r3, #1
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3301      	adds	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4a13      	ldr	r2, [pc, #76]	; (800a570 <USB_CoreReset+0x64>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d901      	bls.n	800a52a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e01b      	b.n	800a562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	daf2      	bge.n	800a518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	f043 0201 	orr.w	r2, r3, #1
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3301      	adds	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	4a09      	ldr	r2, [pc, #36]	; (800a570 <USB_CoreReset+0x64>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d901      	bls.n	800a554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e006      	b.n	800a562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d0f0      	beq.n	800a542 <USB_CoreReset+0x36>

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	00030d40 	.word	0x00030d40

0800a574 <__errno>:
 800a574:	4b01      	ldr	r3, [pc, #4]	; (800a57c <__errno+0x8>)
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	24000010 	.word	0x24000010

0800a580 <__libc_init_array>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	4d0d      	ldr	r5, [pc, #52]	; (800a5b8 <__libc_init_array+0x38>)
 800a584:	4c0d      	ldr	r4, [pc, #52]	; (800a5bc <__libc_init_array+0x3c>)
 800a586:	1b64      	subs	r4, r4, r5
 800a588:	10a4      	asrs	r4, r4, #2
 800a58a:	2600      	movs	r6, #0
 800a58c:	42a6      	cmp	r6, r4
 800a58e:	d109      	bne.n	800a5a4 <__libc_init_array+0x24>
 800a590:	4d0b      	ldr	r5, [pc, #44]	; (800a5c0 <__libc_init_array+0x40>)
 800a592:	4c0c      	ldr	r4, [pc, #48]	; (800a5c4 <__libc_init_array+0x44>)
 800a594:	f000 fc8e 	bl	800aeb4 <_init>
 800a598:	1b64      	subs	r4, r4, r5
 800a59a:	10a4      	asrs	r4, r4, #2
 800a59c:	2600      	movs	r6, #0
 800a59e:	42a6      	cmp	r6, r4
 800a5a0:	d105      	bne.n	800a5ae <__libc_init_array+0x2e>
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a8:	4798      	blx	r3
 800a5aa:	3601      	adds	r6, #1
 800a5ac:	e7ee      	b.n	800a58c <__libc_init_array+0xc>
 800a5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b2:	4798      	blx	r3
 800a5b4:	3601      	adds	r6, #1
 800a5b6:	e7f2      	b.n	800a59e <__libc_init_array+0x1e>
 800a5b8:	0800b098 	.word	0x0800b098
 800a5bc:	0800b098 	.word	0x0800b098
 800a5c0:	0800b098 	.word	0x0800b098
 800a5c4:	0800b09c 	.word	0x0800b09c

0800a5c8 <memset>:
 800a5c8:	4402      	add	r2, r0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d100      	bne.n	800a5d2 <memset+0xa>
 800a5d0:	4770      	bx	lr
 800a5d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5d6:	e7f9      	b.n	800a5cc <memset+0x4>

0800a5d8 <siprintf>:
 800a5d8:	b40e      	push	{r1, r2, r3}
 800a5da:	b500      	push	{lr}
 800a5dc:	b09c      	sub	sp, #112	; 0x70
 800a5de:	ab1d      	add	r3, sp, #116	; 0x74
 800a5e0:	9002      	str	r0, [sp, #8]
 800a5e2:	9006      	str	r0, [sp, #24]
 800a5e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5e8:	4809      	ldr	r0, [pc, #36]	; (800a610 <siprintf+0x38>)
 800a5ea:	9107      	str	r1, [sp, #28]
 800a5ec:	9104      	str	r1, [sp, #16]
 800a5ee:	4909      	ldr	r1, [pc, #36]	; (800a614 <siprintf+0x3c>)
 800a5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f4:	9105      	str	r1, [sp, #20]
 800a5f6:	6800      	ldr	r0, [r0, #0]
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	a902      	add	r1, sp, #8
 800a5fc:	f000 f868 	bl	800a6d0 <_svfiprintf_r>
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]
 800a606:	b01c      	add	sp, #112	; 0x70
 800a608:	f85d eb04 	ldr.w	lr, [sp], #4
 800a60c:	b003      	add	sp, #12
 800a60e:	4770      	bx	lr
 800a610:	24000010 	.word	0x24000010
 800a614:	ffff0208 	.word	0xffff0208

0800a618 <__ssputs_r>:
 800a618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a61c:	688e      	ldr	r6, [r1, #8]
 800a61e:	429e      	cmp	r6, r3
 800a620:	4682      	mov	sl, r0
 800a622:	460c      	mov	r4, r1
 800a624:	4690      	mov	r8, r2
 800a626:	461f      	mov	r7, r3
 800a628:	d838      	bhi.n	800a69c <__ssputs_r+0x84>
 800a62a:	898a      	ldrh	r2, [r1, #12]
 800a62c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a630:	d032      	beq.n	800a698 <__ssputs_r+0x80>
 800a632:	6825      	ldr	r5, [r4, #0]
 800a634:	6909      	ldr	r1, [r1, #16]
 800a636:	eba5 0901 	sub.w	r9, r5, r1
 800a63a:	6965      	ldr	r5, [r4, #20]
 800a63c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a644:	3301      	adds	r3, #1
 800a646:	444b      	add	r3, r9
 800a648:	106d      	asrs	r5, r5, #1
 800a64a:	429d      	cmp	r5, r3
 800a64c:	bf38      	it	cc
 800a64e:	461d      	movcc	r5, r3
 800a650:	0553      	lsls	r3, r2, #21
 800a652:	d531      	bpl.n	800a6b8 <__ssputs_r+0xa0>
 800a654:	4629      	mov	r1, r5
 800a656:	f000 fb63 	bl	800ad20 <_malloc_r>
 800a65a:	4606      	mov	r6, r0
 800a65c:	b950      	cbnz	r0, 800a674 <__ssputs_r+0x5c>
 800a65e:	230c      	movs	r3, #12
 800a660:	f8ca 3000 	str.w	r3, [sl]
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a674:	6921      	ldr	r1, [r4, #16]
 800a676:	464a      	mov	r2, r9
 800a678:	f000 fabe 	bl	800abf8 <memcpy>
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	6126      	str	r6, [r4, #16]
 800a68a:	6165      	str	r5, [r4, #20]
 800a68c:	444e      	add	r6, r9
 800a68e:	eba5 0509 	sub.w	r5, r5, r9
 800a692:	6026      	str	r6, [r4, #0]
 800a694:	60a5      	str	r5, [r4, #8]
 800a696:	463e      	mov	r6, r7
 800a698:	42be      	cmp	r6, r7
 800a69a:	d900      	bls.n	800a69e <__ssputs_r+0x86>
 800a69c:	463e      	mov	r6, r7
 800a69e:	6820      	ldr	r0, [r4, #0]
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4641      	mov	r1, r8
 800a6a4:	f000 fab6 	bl	800ac14 <memmove>
 800a6a8:	68a3      	ldr	r3, [r4, #8]
 800a6aa:	1b9b      	subs	r3, r3, r6
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	4433      	add	r3, r6
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e7db      	b.n	800a670 <__ssputs_r+0x58>
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	f000 fba5 	bl	800ae08 <_realloc_r>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1e1      	bne.n	800a688 <__ssputs_r+0x70>
 800a6c4:	6921      	ldr	r1, [r4, #16]
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	f000 fabe 	bl	800ac48 <_free_r>
 800a6cc:	e7c7      	b.n	800a65e <__ssputs_r+0x46>
	...

0800a6d0 <_svfiprintf_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	4698      	mov	r8, r3
 800a6d6:	898b      	ldrh	r3, [r1, #12]
 800a6d8:	061b      	lsls	r3, r3, #24
 800a6da:	b09d      	sub	sp, #116	; 0x74
 800a6dc:	4607      	mov	r7, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	d50e      	bpl.n	800a702 <_svfiprintf_r+0x32>
 800a6e4:	690b      	ldr	r3, [r1, #16]
 800a6e6:	b963      	cbnz	r3, 800a702 <_svfiprintf_r+0x32>
 800a6e8:	2140      	movs	r1, #64	; 0x40
 800a6ea:	f000 fb19 	bl	800ad20 <_malloc_r>
 800a6ee:	6028      	str	r0, [r5, #0]
 800a6f0:	6128      	str	r0, [r5, #16]
 800a6f2:	b920      	cbnz	r0, 800a6fe <_svfiprintf_r+0x2e>
 800a6f4:	230c      	movs	r3, #12
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	e0d1      	b.n	800a8a2 <_svfiprintf_r+0x1d2>
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	616b      	str	r3, [r5, #20]
 800a702:	2300      	movs	r3, #0
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	2320      	movs	r3, #32
 800a708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a70c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a710:	2330      	movs	r3, #48	; 0x30
 800a712:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8bc <_svfiprintf_r+0x1ec>
 800a716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a71a:	f04f 0901 	mov.w	r9, #1
 800a71e:	4623      	mov	r3, r4
 800a720:	469a      	mov	sl, r3
 800a722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a726:	b10a      	cbz	r2, 800a72c <_svfiprintf_r+0x5c>
 800a728:	2a25      	cmp	r2, #37	; 0x25
 800a72a:	d1f9      	bne.n	800a720 <_svfiprintf_r+0x50>
 800a72c:	ebba 0b04 	subs.w	fp, sl, r4
 800a730:	d00b      	beq.n	800a74a <_svfiprintf_r+0x7a>
 800a732:	465b      	mov	r3, fp
 800a734:	4622      	mov	r2, r4
 800a736:	4629      	mov	r1, r5
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff ff6d 	bl	800a618 <__ssputs_r>
 800a73e:	3001      	adds	r0, #1
 800a740:	f000 80aa 	beq.w	800a898 <_svfiprintf_r+0x1c8>
 800a744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a746:	445a      	add	r2, fp
 800a748:	9209      	str	r2, [sp, #36]	; 0x24
 800a74a:	f89a 3000 	ldrb.w	r3, [sl]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 80a2 	beq.w	800a898 <_svfiprintf_r+0x1c8>
 800a754:	2300      	movs	r3, #0
 800a756:	f04f 32ff 	mov.w	r2, #4294967295
 800a75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75e:	f10a 0a01 	add.w	sl, sl, #1
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a76a:	931a      	str	r3, [sp, #104]	; 0x68
 800a76c:	4654      	mov	r4, sl
 800a76e:	2205      	movs	r2, #5
 800a770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a774:	4851      	ldr	r0, [pc, #324]	; (800a8bc <_svfiprintf_r+0x1ec>)
 800a776:	f7f5 fdb3 	bl	80002e0 <memchr>
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	b9d8      	cbnz	r0, 800a7b6 <_svfiprintf_r+0xe6>
 800a77e:	06d0      	lsls	r0, r2, #27
 800a780:	bf44      	itt	mi
 800a782:	2320      	movmi	r3, #32
 800a784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a788:	0711      	lsls	r1, r2, #28
 800a78a:	bf44      	itt	mi
 800a78c:	232b      	movmi	r3, #43	; 0x2b
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a792:	f89a 3000 	ldrb.w	r3, [sl]
 800a796:	2b2a      	cmp	r3, #42	; 0x2a
 800a798:	d015      	beq.n	800a7c6 <_svfiprintf_r+0xf6>
 800a79a:	9a07      	ldr	r2, [sp, #28]
 800a79c:	4654      	mov	r4, sl
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f04f 0c0a 	mov.w	ip, #10
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7aa:	3b30      	subs	r3, #48	; 0x30
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d94e      	bls.n	800a84e <_svfiprintf_r+0x17e>
 800a7b0:	b1b0      	cbz	r0, 800a7e0 <_svfiprintf_r+0x110>
 800a7b2:	9207      	str	r2, [sp, #28]
 800a7b4:	e014      	b.n	800a7e0 <_svfiprintf_r+0x110>
 800a7b6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	46a2      	mov	sl, r4
 800a7c4:	e7d2      	b.n	800a76c <_svfiprintf_r+0x9c>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9103      	str	r1, [sp, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfbb      	ittet	lt
 800a7d2:	425b      	neglt	r3, r3
 800a7d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d8:	9307      	strge	r3, [sp, #28]
 800a7da:	9307      	strlt	r3, [sp, #28]
 800a7dc:	bfb8      	it	lt
 800a7de:	9204      	strlt	r2, [sp, #16]
 800a7e0:	7823      	ldrb	r3, [r4, #0]
 800a7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7e4:	d10c      	bne.n	800a800 <_svfiprintf_r+0x130>
 800a7e6:	7863      	ldrb	r3, [r4, #1]
 800a7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ea:	d135      	bne.n	800a858 <_svfiprintf_r+0x188>
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	9203      	str	r2, [sp, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfb8      	it	lt
 800a7f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7fc:	3402      	adds	r4, #2
 800a7fe:	9305      	str	r3, [sp, #20]
 800a800:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8cc <_svfiprintf_r+0x1fc>
 800a804:	7821      	ldrb	r1, [r4, #0]
 800a806:	2203      	movs	r2, #3
 800a808:	4650      	mov	r0, sl
 800a80a:	f7f5 fd69 	bl	80002e0 <memchr>
 800a80e:	b140      	cbz	r0, 800a822 <_svfiprintf_r+0x152>
 800a810:	2340      	movs	r3, #64	; 0x40
 800a812:	eba0 000a 	sub.w	r0, r0, sl
 800a816:	fa03 f000 	lsl.w	r0, r3, r0
 800a81a:	9b04      	ldr	r3, [sp, #16]
 800a81c:	4303      	orrs	r3, r0
 800a81e:	3401      	adds	r4, #1
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a826:	4826      	ldr	r0, [pc, #152]	; (800a8c0 <_svfiprintf_r+0x1f0>)
 800a828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a82c:	2206      	movs	r2, #6
 800a82e:	f7f5 fd57 	bl	80002e0 <memchr>
 800a832:	2800      	cmp	r0, #0
 800a834:	d038      	beq.n	800a8a8 <_svfiprintf_r+0x1d8>
 800a836:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <_svfiprintf_r+0x1f4>)
 800a838:	bb1b      	cbnz	r3, 800a882 <_svfiprintf_r+0x1b2>
 800a83a:	9b03      	ldr	r3, [sp, #12]
 800a83c:	3307      	adds	r3, #7
 800a83e:	f023 0307 	bic.w	r3, r3, #7
 800a842:	3308      	adds	r3, #8
 800a844:	9303      	str	r3, [sp, #12]
 800a846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a848:	4433      	add	r3, r6
 800a84a:	9309      	str	r3, [sp, #36]	; 0x24
 800a84c:	e767      	b.n	800a71e <_svfiprintf_r+0x4e>
 800a84e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a852:	460c      	mov	r4, r1
 800a854:	2001      	movs	r0, #1
 800a856:	e7a5      	b.n	800a7a4 <_svfiprintf_r+0xd4>
 800a858:	2300      	movs	r3, #0
 800a85a:	3401      	adds	r4, #1
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	4619      	mov	r1, r3
 800a860:	f04f 0c0a 	mov.w	ip, #10
 800a864:	4620      	mov	r0, r4
 800a866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a86a:	3a30      	subs	r2, #48	; 0x30
 800a86c:	2a09      	cmp	r2, #9
 800a86e:	d903      	bls.n	800a878 <_svfiprintf_r+0x1a8>
 800a870:	2b00      	cmp	r3, #0
 800a872:	d0c5      	beq.n	800a800 <_svfiprintf_r+0x130>
 800a874:	9105      	str	r1, [sp, #20]
 800a876:	e7c3      	b.n	800a800 <_svfiprintf_r+0x130>
 800a878:	fb0c 2101 	mla	r1, ip, r1, r2
 800a87c:	4604      	mov	r4, r0
 800a87e:	2301      	movs	r3, #1
 800a880:	e7f0      	b.n	800a864 <_svfiprintf_r+0x194>
 800a882:	ab03      	add	r3, sp, #12
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	462a      	mov	r2, r5
 800a888:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <_svfiprintf_r+0x1f8>)
 800a88a:	a904      	add	r1, sp, #16
 800a88c:	4638      	mov	r0, r7
 800a88e:	f3af 8000 	nop.w
 800a892:	1c42      	adds	r2, r0, #1
 800a894:	4606      	mov	r6, r0
 800a896:	d1d6      	bne.n	800a846 <_svfiprintf_r+0x176>
 800a898:	89ab      	ldrh	r3, [r5, #12]
 800a89a:	065b      	lsls	r3, r3, #25
 800a89c:	f53f af2c 	bmi.w	800a6f8 <_svfiprintf_r+0x28>
 800a8a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a2:	b01d      	add	sp, #116	; 0x74
 800a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a8:	ab03      	add	r3, sp, #12
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	462a      	mov	r2, r5
 800a8ae:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <_svfiprintf_r+0x1f8>)
 800a8b0:	a904      	add	r1, sp, #16
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	f000 f87a 	bl	800a9ac <_printf_i>
 800a8b8:	e7eb      	b.n	800a892 <_svfiprintf_r+0x1c2>
 800a8ba:	bf00      	nop
 800a8bc:	0800b05c 	.word	0x0800b05c
 800a8c0:	0800b066 	.word	0x0800b066
 800a8c4:	00000000 	.word	0x00000000
 800a8c8:	0800a619 	.word	0x0800a619
 800a8cc:	0800b062 	.word	0x0800b062

0800a8d0 <_printf_common>:
 800a8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	4616      	mov	r6, r2
 800a8d6:	4699      	mov	r9, r3
 800a8d8:	688a      	ldr	r2, [r1, #8]
 800a8da:	690b      	ldr	r3, [r1, #16]
 800a8dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	bfb8      	it	lt
 800a8e4:	4613      	movlt	r3, r2
 800a8e6:	6033      	str	r3, [r6, #0]
 800a8e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	b10a      	cbz	r2, 800a8f6 <_printf_common+0x26>
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	6033      	str	r3, [r6, #0]
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	0699      	lsls	r1, r3, #26
 800a8fa:	bf42      	ittt	mi
 800a8fc:	6833      	ldrmi	r3, [r6, #0]
 800a8fe:	3302      	addmi	r3, #2
 800a900:	6033      	strmi	r3, [r6, #0]
 800a902:	6825      	ldr	r5, [r4, #0]
 800a904:	f015 0506 	ands.w	r5, r5, #6
 800a908:	d106      	bne.n	800a918 <_printf_common+0x48>
 800a90a:	f104 0a19 	add.w	sl, r4, #25
 800a90e:	68e3      	ldr	r3, [r4, #12]
 800a910:	6832      	ldr	r2, [r6, #0]
 800a912:	1a9b      	subs	r3, r3, r2
 800a914:	42ab      	cmp	r3, r5
 800a916:	dc26      	bgt.n	800a966 <_printf_common+0x96>
 800a918:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a91c:	1e13      	subs	r3, r2, #0
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	bf18      	it	ne
 800a922:	2301      	movne	r3, #1
 800a924:	0692      	lsls	r2, r2, #26
 800a926:	d42b      	bmi.n	800a980 <_printf_common+0xb0>
 800a928:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a92c:	4649      	mov	r1, r9
 800a92e:	4638      	mov	r0, r7
 800a930:	47c0      	blx	r8
 800a932:	3001      	adds	r0, #1
 800a934:	d01e      	beq.n	800a974 <_printf_common+0xa4>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	68e5      	ldr	r5, [r4, #12]
 800a93a:	6832      	ldr	r2, [r6, #0]
 800a93c:	f003 0306 	and.w	r3, r3, #6
 800a940:	2b04      	cmp	r3, #4
 800a942:	bf08      	it	eq
 800a944:	1aad      	subeq	r5, r5, r2
 800a946:	68a3      	ldr	r3, [r4, #8]
 800a948:	6922      	ldr	r2, [r4, #16]
 800a94a:	bf0c      	ite	eq
 800a94c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a950:	2500      	movne	r5, #0
 800a952:	4293      	cmp	r3, r2
 800a954:	bfc4      	itt	gt
 800a956:	1a9b      	subgt	r3, r3, r2
 800a958:	18ed      	addgt	r5, r5, r3
 800a95a:	2600      	movs	r6, #0
 800a95c:	341a      	adds	r4, #26
 800a95e:	42b5      	cmp	r5, r6
 800a960:	d11a      	bne.n	800a998 <_printf_common+0xc8>
 800a962:	2000      	movs	r0, #0
 800a964:	e008      	b.n	800a978 <_printf_common+0xa8>
 800a966:	2301      	movs	r3, #1
 800a968:	4652      	mov	r2, sl
 800a96a:	4649      	mov	r1, r9
 800a96c:	4638      	mov	r0, r7
 800a96e:	47c0      	blx	r8
 800a970:	3001      	adds	r0, #1
 800a972:	d103      	bne.n	800a97c <_printf_common+0xac>
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97c:	3501      	adds	r5, #1
 800a97e:	e7c6      	b.n	800a90e <_printf_common+0x3e>
 800a980:	18e1      	adds	r1, r4, r3
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	2030      	movs	r0, #48	; 0x30
 800a986:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a98a:	4422      	add	r2, r4
 800a98c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a990:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a994:	3302      	adds	r3, #2
 800a996:	e7c7      	b.n	800a928 <_printf_common+0x58>
 800a998:	2301      	movs	r3, #1
 800a99a:	4622      	mov	r2, r4
 800a99c:	4649      	mov	r1, r9
 800a99e:	4638      	mov	r0, r7
 800a9a0:	47c0      	blx	r8
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	d0e6      	beq.n	800a974 <_printf_common+0xa4>
 800a9a6:	3601      	adds	r6, #1
 800a9a8:	e7d9      	b.n	800a95e <_printf_common+0x8e>
	...

0800a9ac <_printf_i>:
 800a9ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	7e0f      	ldrb	r7, [r1, #24]
 800a9b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9b4:	2f78      	cmp	r7, #120	; 0x78
 800a9b6:	4691      	mov	r9, r2
 800a9b8:	4680      	mov	r8, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	469a      	mov	sl, r3
 800a9be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9c2:	d807      	bhi.n	800a9d4 <_printf_i+0x28>
 800a9c4:	2f62      	cmp	r7, #98	; 0x62
 800a9c6:	d80a      	bhi.n	800a9de <_printf_i+0x32>
 800a9c8:	2f00      	cmp	r7, #0
 800a9ca:	f000 80d8 	beq.w	800ab7e <_printf_i+0x1d2>
 800a9ce:	2f58      	cmp	r7, #88	; 0x58
 800a9d0:	f000 80a3 	beq.w	800ab1a <_printf_i+0x16e>
 800a9d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9dc:	e03a      	b.n	800aa54 <_printf_i+0xa8>
 800a9de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9e2:	2b15      	cmp	r3, #21
 800a9e4:	d8f6      	bhi.n	800a9d4 <_printf_i+0x28>
 800a9e6:	a101      	add	r1, pc, #4	; (adr r1, 800a9ec <_printf_i+0x40>)
 800a9e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9ec:	0800aa45 	.word	0x0800aa45
 800a9f0:	0800aa59 	.word	0x0800aa59
 800a9f4:	0800a9d5 	.word	0x0800a9d5
 800a9f8:	0800a9d5 	.word	0x0800a9d5
 800a9fc:	0800a9d5 	.word	0x0800a9d5
 800aa00:	0800a9d5 	.word	0x0800a9d5
 800aa04:	0800aa59 	.word	0x0800aa59
 800aa08:	0800a9d5 	.word	0x0800a9d5
 800aa0c:	0800a9d5 	.word	0x0800a9d5
 800aa10:	0800a9d5 	.word	0x0800a9d5
 800aa14:	0800a9d5 	.word	0x0800a9d5
 800aa18:	0800ab65 	.word	0x0800ab65
 800aa1c:	0800aa89 	.word	0x0800aa89
 800aa20:	0800ab47 	.word	0x0800ab47
 800aa24:	0800a9d5 	.word	0x0800a9d5
 800aa28:	0800a9d5 	.word	0x0800a9d5
 800aa2c:	0800ab87 	.word	0x0800ab87
 800aa30:	0800a9d5 	.word	0x0800a9d5
 800aa34:	0800aa89 	.word	0x0800aa89
 800aa38:	0800a9d5 	.word	0x0800a9d5
 800aa3c:	0800a9d5 	.word	0x0800a9d5
 800aa40:	0800ab4f 	.word	0x0800ab4f
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	1d1a      	adds	r2, r3, #4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	602a      	str	r2, [r5, #0]
 800aa4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa54:	2301      	movs	r3, #1
 800aa56:	e0a3      	b.n	800aba0 <_printf_i+0x1f4>
 800aa58:	6820      	ldr	r0, [r4, #0]
 800aa5a:	6829      	ldr	r1, [r5, #0]
 800aa5c:	0606      	lsls	r6, r0, #24
 800aa5e:	f101 0304 	add.w	r3, r1, #4
 800aa62:	d50a      	bpl.n	800aa7a <_printf_i+0xce>
 800aa64:	680e      	ldr	r6, [r1, #0]
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	2e00      	cmp	r6, #0
 800aa6a:	da03      	bge.n	800aa74 <_printf_i+0xc8>
 800aa6c:	232d      	movs	r3, #45	; 0x2d
 800aa6e:	4276      	negs	r6, r6
 800aa70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa74:	485e      	ldr	r0, [pc, #376]	; (800abf0 <_printf_i+0x244>)
 800aa76:	230a      	movs	r3, #10
 800aa78:	e019      	b.n	800aaae <_printf_i+0x102>
 800aa7a:	680e      	ldr	r6, [r1, #0]
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa82:	bf18      	it	ne
 800aa84:	b236      	sxthne	r6, r6
 800aa86:	e7ef      	b.n	800aa68 <_printf_i+0xbc>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	6820      	ldr	r0, [r4, #0]
 800aa8c:	1d19      	adds	r1, r3, #4
 800aa8e:	6029      	str	r1, [r5, #0]
 800aa90:	0601      	lsls	r1, r0, #24
 800aa92:	d501      	bpl.n	800aa98 <_printf_i+0xec>
 800aa94:	681e      	ldr	r6, [r3, #0]
 800aa96:	e002      	b.n	800aa9e <_printf_i+0xf2>
 800aa98:	0646      	lsls	r6, r0, #25
 800aa9a:	d5fb      	bpl.n	800aa94 <_printf_i+0xe8>
 800aa9c:	881e      	ldrh	r6, [r3, #0]
 800aa9e:	4854      	ldr	r0, [pc, #336]	; (800abf0 <_printf_i+0x244>)
 800aaa0:	2f6f      	cmp	r7, #111	; 0x6f
 800aaa2:	bf0c      	ite	eq
 800aaa4:	2308      	moveq	r3, #8
 800aaa6:	230a      	movne	r3, #10
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaae:	6865      	ldr	r5, [r4, #4]
 800aab0:	60a5      	str	r5, [r4, #8]
 800aab2:	2d00      	cmp	r5, #0
 800aab4:	bfa2      	ittt	ge
 800aab6:	6821      	ldrge	r1, [r4, #0]
 800aab8:	f021 0104 	bicge.w	r1, r1, #4
 800aabc:	6021      	strge	r1, [r4, #0]
 800aabe:	b90e      	cbnz	r6, 800aac4 <_printf_i+0x118>
 800aac0:	2d00      	cmp	r5, #0
 800aac2:	d04d      	beq.n	800ab60 <_printf_i+0x1b4>
 800aac4:	4615      	mov	r5, r2
 800aac6:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaca:	fb03 6711 	mls	r7, r3, r1, r6
 800aace:	5dc7      	ldrb	r7, [r0, r7]
 800aad0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aad4:	4637      	mov	r7, r6
 800aad6:	42bb      	cmp	r3, r7
 800aad8:	460e      	mov	r6, r1
 800aada:	d9f4      	bls.n	800aac6 <_printf_i+0x11a>
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d10b      	bne.n	800aaf8 <_printf_i+0x14c>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	07de      	lsls	r6, r3, #31
 800aae4:	d508      	bpl.n	800aaf8 <_printf_i+0x14c>
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	6861      	ldr	r1, [r4, #4]
 800aaea:	4299      	cmp	r1, r3
 800aaec:	bfde      	ittt	le
 800aaee:	2330      	movle	r3, #48	; 0x30
 800aaf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aaf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aaf8:	1b52      	subs	r2, r2, r5
 800aafa:	6122      	str	r2, [r4, #16]
 800aafc:	f8cd a000 	str.w	sl, [sp]
 800ab00:	464b      	mov	r3, r9
 800ab02:	aa03      	add	r2, sp, #12
 800ab04:	4621      	mov	r1, r4
 800ab06:	4640      	mov	r0, r8
 800ab08:	f7ff fee2 	bl	800a8d0 <_printf_common>
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d14c      	bne.n	800abaa <_printf_i+0x1fe>
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295
 800ab14:	b004      	add	sp, #16
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	4835      	ldr	r0, [pc, #212]	; (800abf0 <_printf_i+0x244>)
 800ab1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab20:	6829      	ldr	r1, [r5, #0]
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab28:	6029      	str	r1, [r5, #0]
 800ab2a:	061d      	lsls	r5, r3, #24
 800ab2c:	d514      	bpl.n	800ab58 <_printf_i+0x1ac>
 800ab2e:	07df      	lsls	r7, r3, #31
 800ab30:	bf44      	itt	mi
 800ab32:	f043 0320 	orrmi.w	r3, r3, #32
 800ab36:	6023      	strmi	r3, [r4, #0]
 800ab38:	b91e      	cbnz	r6, 800ab42 <_printf_i+0x196>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	f023 0320 	bic.w	r3, r3, #32
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	2310      	movs	r3, #16
 800ab44:	e7b0      	b.n	800aaa8 <_printf_i+0xfc>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	f043 0320 	orr.w	r3, r3, #32
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	2378      	movs	r3, #120	; 0x78
 800ab50:	4828      	ldr	r0, [pc, #160]	; (800abf4 <_printf_i+0x248>)
 800ab52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab56:	e7e3      	b.n	800ab20 <_printf_i+0x174>
 800ab58:	0659      	lsls	r1, r3, #25
 800ab5a:	bf48      	it	mi
 800ab5c:	b2b6      	uxthmi	r6, r6
 800ab5e:	e7e6      	b.n	800ab2e <_printf_i+0x182>
 800ab60:	4615      	mov	r5, r2
 800ab62:	e7bb      	b.n	800aadc <_printf_i+0x130>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	6826      	ldr	r6, [r4, #0]
 800ab68:	6961      	ldr	r1, [r4, #20]
 800ab6a:	1d18      	adds	r0, r3, #4
 800ab6c:	6028      	str	r0, [r5, #0]
 800ab6e:	0635      	lsls	r5, r6, #24
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	d501      	bpl.n	800ab78 <_printf_i+0x1cc>
 800ab74:	6019      	str	r1, [r3, #0]
 800ab76:	e002      	b.n	800ab7e <_printf_i+0x1d2>
 800ab78:	0670      	lsls	r0, r6, #25
 800ab7a:	d5fb      	bpl.n	800ab74 <_printf_i+0x1c8>
 800ab7c:	8019      	strh	r1, [r3, #0]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	6123      	str	r3, [r4, #16]
 800ab82:	4615      	mov	r5, r2
 800ab84:	e7ba      	b.n	800aafc <_printf_i+0x150>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	1d1a      	adds	r2, r3, #4
 800ab8a:	602a      	str	r2, [r5, #0]
 800ab8c:	681d      	ldr	r5, [r3, #0]
 800ab8e:	6862      	ldr	r2, [r4, #4]
 800ab90:	2100      	movs	r1, #0
 800ab92:	4628      	mov	r0, r5
 800ab94:	f7f5 fba4 	bl	80002e0 <memchr>
 800ab98:	b108      	cbz	r0, 800ab9e <_printf_i+0x1f2>
 800ab9a:	1b40      	subs	r0, r0, r5
 800ab9c:	6060      	str	r0, [r4, #4]
 800ab9e:	6863      	ldr	r3, [r4, #4]
 800aba0:	6123      	str	r3, [r4, #16]
 800aba2:	2300      	movs	r3, #0
 800aba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba8:	e7a8      	b.n	800aafc <_printf_i+0x150>
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	462a      	mov	r2, r5
 800abae:	4649      	mov	r1, r9
 800abb0:	4640      	mov	r0, r8
 800abb2:	47d0      	blx	sl
 800abb4:	3001      	adds	r0, #1
 800abb6:	d0ab      	beq.n	800ab10 <_printf_i+0x164>
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	079b      	lsls	r3, r3, #30
 800abbc:	d413      	bmi.n	800abe6 <_printf_i+0x23a>
 800abbe:	68e0      	ldr	r0, [r4, #12]
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	4298      	cmp	r0, r3
 800abc4:	bfb8      	it	lt
 800abc6:	4618      	movlt	r0, r3
 800abc8:	e7a4      	b.n	800ab14 <_printf_i+0x168>
 800abca:	2301      	movs	r3, #1
 800abcc:	4632      	mov	r2, r6
 800abce:	4649      	mov	r1, r9
 800abd0:	4640      	mov	r0, r8
 800abd2:	47d0      	blx	sl
 800abd4:	3001      	adds	r0, #1
 800abd6:	d09b      	beq.n	800ab10 <_printf_i+0x164>
 800abd8:	3501      	adds	r5, #1
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	9903      	ldr	r1, [sp, #12]
 800abde:	1a5b      	subs	r3, r3, r1
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	dcf2      	bgt.n	800abca <_printf_i+0x21e>
 800abe4:	e7eb      	b.n	800abbe <_printf_i+0x212>
 800abe6:	2500      	movs	r5, #0
 800abe8:	f104 0619 	add.w	r6, r4, #25
 800abec:	e7f5      	b.n	800abda <_printf_i+0x22e>
 800abee:	bf00      	nop
 800abf0:	0800b06d 	.word	0x0800b06d
 800abf4:	0800b07e 	.word	0x0800b07e

0800abf8 <memcpy>:
 800abf8:	440a      	add	r2, r1
 800abfa:	4291      	cmp	r1, r2
 800abfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac00:	d100      	bne.n	800ac04 <memcpy+0xc>
 800ac02:	4770      	bx	lr
 800ac04:	b510      	push	{r4, lr}
 800ac06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac0e:	4291      	cmp	r1, r2
 800ac10:	d1f9      	bne.n	800ac06 <memcpy+0xe>
 800ac12:	bd10      	pop	{r4, pc}

0800ac14 <memmove>:
 800ac14:	4288      	cmp	r0, r1
 800ac16:	b510      	push	{r4, lr}
 800ac18:	eb01 0402 	add.w	r4, r1, r2
 800ac1c:	d902      	bls.n	800ac24 <memmove+0x10>
 800ac1e:	4284      	cmp	r4, r0
 800ac20:	4623      	mov	r3, r4
 800ac22:	d807      	bhi.n	800ac34 <memmove+0x20>
 800ac24:	1e43      	subs	r3, r0, #1
 800ac26:	42a1      	cmp	r1, r4
 800ac28:	d008      	beq.n	800ac3c <memmove+0x28>
 800ac2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac32:	e7f8      	b.n	800ac26 <memmove+0x12>
 800ac34:	4402      	add	r2, r0
 800ac36:	4601      	mov	r1, r0
 800ac38:	428a      	cmp	r2, r1
 800ac3a:	d100      	bne.n	800ac3e <memmove+0x2a>
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac46:	e7f7      	b.n	800ac38 <memmove+0x24>

0800ac48 <_free_r>:
 800ac48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac4a:	2900      	cmp	r1, #0
 800ac4c:	d044      	beq.n	800acd8 <_free_r+0x90>
 800ac4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac52:	9001      	str	r0, [sp, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f1a1 0404 	sub.w	r4, r1, #4
 800ac5a:	bfb8      	it	lt
 800ac5c:	18e4      	addlt	r4, r4, r3
 800ac5e:	f000 f913 	bl	800ae88 <__malloc_lock>
 800ac62:	4a1e      	ldr	r2, [pc, #120]	; (800acdc <_free_r+0x94>)
 800ac64:	9801      	ldr	r0, [sp, #4]
 800ac66:	6813      	ldr	r3, [r2, #0]
 800ac68:	b933      	cbnz	r3, 800ac78 <_free_r+0x30>
 800ac6a:	6063      	str	r3, [r4, #4]
 800ac6c:	6014      	str	r4, [r2, #0]
 800ac6e:	b003      	add	sp, #12
 800ac70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac74:	f000 b90e 	b.w	800ae94 <__malloc_unlock>
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d908      	bls.n	800ac8e <_free_r+0x46>
 800ac7c:	6825      	ldr	r5, [r4, #0]
 800ac7e:	1961      	adds	r1, r4, r5
 800ac80:	428b      	cmp	r3, r1
 800ac82:	bf01      	itttt	eq
 800ac84:	6819      	ldreq	r1, [r3, #0]
 800ac86:	685b      	ldreq	r3, [r3, #4]
 800ac88:	1949      	addeq	r1, r1, r5
 800ac8a:	6021      	streq	r1, [r4, #0]
 800ac8c:	e7ed      	b.n	800ac6a <_free_r+0x22>
 800ac8e:	461a      	mov	r2, r3
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	b10b      	cbz	r3, 800ac98 <_free_r+0x50>
 800ac94:	42a3      	cmp	r3, r4
 800ac96:	d9fa      	bls.n	800ac8e <_free_r+0x46>
 800ac98:	6811      	ldr	r1, [r2, #0]
 800ac9a:	1855      	adds	r5, r2, r1
 800ac9c:	42a5      	cmp	r5, r4
 800ac9e:	d10b      	bne.n	800acb8 <_free_r+0x70>
 800aca0:	6824      	ldr	r4, [r4, #0]
 800aca2:	4421      	add	r1, r4
 800aca4:	1854      	adds	r4, r2, r1
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	6011      	str	r1, [r2, #0]
 800acaa:	d1e0      	bne.n	800ac6e <_free_r+0x26>
 800acac:	681c      	ldr	r4, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	6053      	str	r3, [r2, #4]
 800acb2:	4421      	add	r1, r4
 800acb4:	6011      	str	r1, [r2, #0]
 800acb6:	e7da      	b.n	800ac6e <_free_r+0x26>
 800acb8:	d902      	bls.n	800acc0 <_free_r+0x78>
 800acba:	230c      	movs	r3, #12
 800acbc:	6003      	str	r3, [r0, #0]
 800acbe:	e7d6      	b.n	800ac6e <_free_r+0x26>
 800acc0:	6825      	ldr	r5, [r4, #0]
 800acc2:	1961      	adds	r1, r4, r5
 800acc4:	428b      	cmp	r3, r1
 800acc6:	bf04      	itt	eq
 800acc8:	6819      	ldreq	r1, [r3, #0]
 800acca:	685b      	ldreq	r3, [r3, #4]
 800accc:	6063      	str	r3, [r4, #4]
 800acce:	bf04      	itt	eq
 800acd0:	1949      	addeq	r1, r1, r5
 800acd2:	6021      	streq	r1, [r4, #0]
 800acd4:	6054      	str	r4, [r2, #4]
 800acd6:	e7ca      	b.n	800ac6e <_free_r+0x26>
 800acd8:	b003      	add	sp, #12
 800acda:	bd30      	pop	{r4, r5, pc}
 800acdc:	24000a10 	.word	0x24000a10

0800ace0 <sbrk_aligned>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	4e0e      	ldr	r6, [pc, #56]	; (800ad1c <sbrk_aligned+0x3c>)
 800ace4:	460c      	mov	r4, r1
 800ace6:	6831      	ldr	r1, [r6, #0]
 800ace8:	4605      	mov	r5, r0
 800acea:	b911      	cbnz	r1, 800acf2 <sbrk_aligned+0x12>
 800acec:	f000 f8bc 	bl	800ae68 <_sbrk_r>
 800acf0:	6030      	str	r0, [r6, #0]
 800acf2:	4621      	mov	r1, r4
 800acf4:	4628      	mov	r0, r5
 800acf6:	f000 f8b7 	bl	800ae68 <_sbrk_r>
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	d00a      	beq.n	800ad14 <sbrk_aligned+0x34>
 800acfe:	1cc4      	adds	r4, r0, #3
 800ad00:	f024 0403 	bic.w	r4, r4, #3
 800ad04:	42a0      	cmp	r0, r4
 800ad06:	d007      	beq.n	800ad18 <sbrk_aligned+0x38>
 800ad08:	1a21      	subs	r1, r4, r0
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f000 f8ac 	bl	800ae68 <_sbrk_r>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d101      	bne.n	800ad18 <sbrk_aligned+0x38>
 800ad14:	f04f 34ff 	mov.w	r4, #4294967295
 800ad18:	4620      	mov	r0, r4
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	24000a14 	.word	0x24000a14

0800ad20 <_malloc_r>:
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	1ccd      	adds	r5, r1, #3
 800ad26:	f025 0503 	bic.w	r5, r5, #3
 800ad2a:	3508      	adds	r5, #8
 800ad2c:	2d0c      	cmp	r5, #12
 800ad2e:	bf38      	it	cc
 800ad30:	250c      	movcc	r5, #12
 800ad32:	2d00      	cmp	r5, #0
 800ad34:	4607      	mov	r7, r0
 800ad36:	db01      	blt.n	800ad3c <_malloc_r+0x1c>
 800ad38:	42a9      	cmp	r1, r5
 800ad3a:	d905      	bls.n	800ad48 <_malloc_r+0x28>
 800ad3c:	230c      	movs	r3, #12
 800ad3e:	603b      	str	r3, [r7, #0]
 800ad40:	2600      	movs	r6, #0
 800ad42:	4630      	mov	r0, r6
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	4e2e      	ldr	r6, [pc, #184]	; (800ae04 <_malloc_r+0xe4>)
 800ad4a:	f000 f89d 	bl	800ae88 <__malloc_lock>
 800ad4e:	6833      	ldr	r3, [r6, #0]
 800ad50:	461c      	mov	r4, r3
 800ad52:	bb34      	cbnz	r4, 800ada2 <_malloc_r+0x82>
 800ad54:	4629      	mov	r1, r5
 800ad56:	4638      	mov	r0, r7
 800ad58:	f7ff ffc2 	bl	800ace0 <sbrk_aligned>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	4604      	mov	r4, r0
 800ad60:	d14d      	bne.n	800adfe <_malloc_r+0xde>
 800ad62:	6834      	ldr	r4, [r6, #0]
 800ad64:	4626      	mov	r6, r4
 800ad66:	2e00      	cmp	r6, #0
 800ad68:	d140      	bne.n	800adec <_malloc_r+0xcc>
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4638      	mov	r0, r7
 800ad70:	eb04 0803 	add.w	r8, r4, r3
 800ad74:	f000 f878 	bl	800ae68 <_sbrk_r>
 800ad78:	4580      	cmp	r8, r0
 800ad7a:	d13a      	bne.n	800adf2 <_malloc_r+0xd2>
 800ad7c:	6821      	ldr	r1, [r4, #0]
 800ad7e:	3503      	adds	r5, #3
 800ad80:	1a6d      	subs	r5, r5, r1
 800ad82:	f025 0503 	bic.w	r5, r5, #3
 800ad86:	3508      	adds	r5, #8
 800ad88:	2d0c      	cmp	r5, #12
 800ad8a:	bf38      	it	cc
 800ad8c:	250c      	movcc	r5, #12
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ffa5 	bl	800ace0 <sbrk_aligned>
 800ad96:	3001      	adds	r0, #1
 800ad98:	d02b      	beq.n	800adf2 <_malloc_r+0xd2>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	442b      	add	r3, r5
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	e00e      	b.n	800adc0 <_malloc_r+0xa0>
 800ada2:	6822      	ldr	r2, [r4, #0]
 800ada4:	1b52      	subs	r2, r2, r5
 800ada6:	d41e      	bmi.n	800ade6 <_malloc_r+0xc6>
 800ada8:	2a0b      	cmp	r2, #11
 800adaa:	d916      	bls.n	800adda <_malloc_r+0xba>
 800adac:	1961      	adds	r1, r4, r5
 800adae:	42a3      	cmp	r3, r4
 800adb0:	6025      	str	r5, [r4, #0]
 800adb2:	bf18      	it	ne
 800adb4:	6059      	strne	r1, [r3, #4]
 800adb6:	6863      	ldr	r3, [r4, #4]
 800adb8:	bf08      	it	eq
 800adba:	6031      	streq	r1, [r6, #0]
 800adbc:	5162      	str	r2, [r4, r5]
 800adbe:	604b      	str	r3, [r1, #4]
 800adc0:	4638      	mov	r0, r7
 800adc2:	f104 060b 	add.w	r6, r4, #11
 800adc6:	f000 f865 	bl	800ae94 <__malloc_unlock>
 800adca:	f026 0607 	bic.w	r6, r6, #7
 800adce:	1d23      	adds	r3, r4, #4
 800add0:	1af2      	subs	r2, r6, r3
 800add2:	d0b6      	beq.n	800ad42 <_malloc_r+0x22>
 800add4:	1b9b      	subs	r3, r3, r6
 800add6:	50a3      	str	r3, [r4, r2]
 800add8:	e7b3      	b.n	800ad42 <_malloc_r+0x22>
 800adda:	6862      	ldr	r2, [r4, #4]
 800addc:	42a3      	cmp	r3, r4
 800adde:	bf0c      	ite	eq
 800ade0:	6032      	streq	r2, [r6, #0]
 800ade2:	605a      	strne	r2, [r3, #4]
 800ade4:	e7ec      	b.n	800adc0 <_malloc_r+0xa0>
 800ade6:	4623      	mov	r3, r4
 800ade8:	6864      	ldr	r4, [r4, #4]
 800adea:	e7b2      	b.n	800ad52 <_malloc_r+0x32>
 800adec:	4634      	mov	r4, r6
 800adee:	6876      	ldr	r6, [r6, #4]
 800adf0:	e7b9      	b.n	800ad66 <_malloc_r+0x46>
 800adf2:	230c      	movs	r3, #12
 800adf4:	603b      	str	r3, [r7, #0]
 800adf6:	4638      	mov	r0, r7
 800adf8:	f000 f84c 	bl	800ae94 <__malloc_unlock>
 800adfc:	e7a1      	b.n	800ad42 <_malloc_r+0x22>
 800adfe:	6025      	str	r5, [r4, #0]
 800ae00:	e7de      	b.n	800adc0 <_malloc_r+0xa0>
 800ae02:	bf00      	nop
 800ae04:	24000a10 	.word	0x24000a10

0800ae08 <_realloc_r>:
 800ae08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	4614      	mov	r4, r2
 800ae10:	460e      	mov	r6, r1
 800ae12:	b921      	cbnz	r1, 800ae1e <_realloc_r+0x16>
 800ae14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae18:	4611      	mov	r1, r2
 800ae1a:	f7ff bf81 	b.w	800ad20 <_malloc_r>
 800ae1e:	b92a      	cbnz	r2, 800ae2c <_realloc_r+0x24>
 800ae20:	f7ff ff12 	bl	800ac48 <_free_r>
 800ae24:	4625      	mov	r5, r4
 800ae26:	4628      	mov	r0, r5
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	f000 f838 	bl	800aea0 <_malloc_usable_size_r>
 800ae30:	4284      	cmp	r4, r0
 800ae32:	4607      	mov	r7, r0
 800ae34:	d802      	bhi.n	800ae3c <_realloc_r+0x34>
 800ae36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae3a:	d812      	bhi.n	800ae62 <_realloc_r+0x5a>
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4640      	mov	r0, r8
 800ae40:	f7ff ff6e 	bl	800ad20 <_malloc_r>
 800ae44:	4605      	mov	r5, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0ed      	beq.n	800ae26 <_realloc_r+0x1e>
 800ae4a:	42bc      	cmp	r4, r7
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	4631      	mov	r1, r6
 800ae50:	bf28      	it	cs
 800ae52:	463a      	movcs	r2, r7
 800ae54:	f7ff fed0 	bl	800abf8 <memcpy>
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	f7ff fef4 	bl	800ac48 <_free_r>
 800ae60:	e7e1      	b.n	800ae26 <_realloc_r+0x1e>
 800ae62:	4635      	mov	r5, r6
 800ae64:	e7df      	b.n	800ae26 <_realloc_r+0x1e>
	...

0800ae68 <_sbrk_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d06      	ldr	r5, [pc, #24]	; (800ae84 <_sbrk_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	f7f6 fcda 	bl	800182c <_sbrk>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_sbrk_r+0x1a>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_sbrk_r+0x1a>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	24000a18 	.word	0x24000a18

0800ae88 <__malloc_lock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__malloc_lock+0x8>)
 800ae8a:	f000 b811 	b.w	800aeb0 <__retarget_lock_acquire_recursive>
 800ae8e:	bf00      	nop
 800ae90:	24000a1c 	.word	0x24000a1c

0800ae94 <__malloc_unlock>:
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <__malloc_unlock+0x8>)
 800ae96:	f000 b80c 	b.w	800aeb2 <__retarget_lock_release_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	24000a1c 	.word	0x24000a1c

0800aea0 <_malloc_usable_size_r>:
 800aea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea4:	1f18      	subs	r0, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfbc      	itt	lt
 800aeaa:	580b      	ldrlt	r3, [r1, r0]
 800aeac:	18c0      	addlt	r0, r0, r3
 800aeae:	4770      	bx	lr

0800aeb0 <__retarget_lock_acquire_recursive>:
 800aeb0:	4770      	bx	lr

0800aeb2 <__retarget_lock_release_recursive>:
 800aeb2:	4770      	bx	lr

0800aeb4 <_init>:
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	bf00      	nop
 800aeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeba:	bc08      	pop	{r3}
 800aebc:	469e      	mov	lr, r3
 800aebe:	4770      	bx	lr

0800aec0 <_fini>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	bf00      	nop
 800aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec6:	bc08      	pop	{r3}
 800aec8:	469e      	mov	lr, r3
 800aeca:	4770      	bx	lr
