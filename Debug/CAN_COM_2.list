
CAN_COM_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800b69c  0800b69c  0001b69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b880  0800b880  0001b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800b890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  0800b908  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  0800b968  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba8  24000138  0800b9c8  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ce0  0800b9c8  00020ce0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e88  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003883  00000000  00000000  00043fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00047878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00049140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a831  00000000  00000000  0004a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020cd1  00000000  00000000  000850e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017144a  00000000  00000000  000a5db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002171fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb8  00000000  00000000  0021724c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b684 	.word	0x0800b684

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	0800b684 	.word	0x0800b684

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN */
bool CANSPI_Initialize(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 800068a:	2300      	movs	r3, #0
 800068c:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 800068e:	2300      	movs	r3, #0
 8000690:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 800069a:	2300      	movs	r3, #0
 800069c:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80006a2:	2300      	movs	r3, #0
 80006a4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80006a6:	2300      	movs	r3, #0
 80006a8:	70fb      	strb	r3, [r7, #3]
  
  /* Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80006aa:	2300      	movs	r3, #0
 80006ac:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80006ae:	2300      	movs	r3, #0
 80006b0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80006ba:	2300      	movs	r3, #0
 80006bc:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80006be:	2308      	movs	r3, #8
 80006c0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80006c2:	2300      	movs	r3, #0
 80006c4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80006c6:	2300      	movs	r3, #0
 80006c8:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80006da:	2300      	movs	r3, #0
 80006dc:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80006de:	2300      	movs	r3, #0
 80006e0:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80006ee:	2300      	movs	r3, #0
 80006f0:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80006f6:	2300      	movs	r3, #0
 80006f8:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 80006fa:	2300      	movs	r3, #0
 80006fc:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80006fe:	2308      	movs	r3, #8
 8000700:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000702:	2300      	movs	r3, #0
 8000704:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000706:	2300      	movs	r3, #0
 8000708:	72fb      	strb	r3, [r7, #11]
  
  /* MCP2515, SPI */
  if(!MCP2515_Initialize())
 800070a:	f000 fa07 	bl	8000b1c <MCP2515_Initialize>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <CANSPI_Initialize+0x94>
    return false;
 8000714:	2300      	movs	r3, #0
 8000716:	e058      	b.n	80007ca <CANSPI_Initialize+0x146>
    
  /* Configuration */
  if(!MCP2515_SetConfigMode())
 8000718:	f000 fa22 	bl	8000b60 <MCP2515_SetConfigMode>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <CANSPI_Initialize+0xa2>
    return false;
 8000722:	2300      	movs	r3, #0
 8000724:	e051      	b.n	80007ca <CANSPI_Initialize+0x146>
  
  /* Configure Filters & Masks */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	461a      	mov	r2, r3
 800072a:	2123      	movs	r1, #35	; 0x23
 800072c:	2020      	movs	r0, #32
 800072e:	f000 fabb 	bl	8000ca8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000732:	463b      	mov	r3, r7
 8000734:	461a      	mov	r2, r3
 8000736:	2127      	movs	r1, #39	; 0x27
 8000738:	2024      	movs	r0, #36	; 0x24
 800073a:	f000 fab5 	bl	8000ca8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	461a      	mov	r2, r3
 8000744:	2103      	movs	r1, #3
 8000746:	2000      	movs	r0, #0
 8000748:	f000 faae 	bl	8000ca8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	461a      	mov	r2, r3
 8000752:	2107      	movs	r1, #7
 8000754:	2004      	movs	r0, #4
 8000756:	f000 faa7 	bl	8000ca8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	461a      	mov	r2, r3
 8000760:	210b      	movs	r1, #11
 8000762:	2008      	movs	r0, #8
 8000764:	f000 faa0 	bl	8000ca8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	461a      	mov	r2, r3
 800076e:	2113      	movs	r1, #19
 8000770:	2010      	movs	r0, #16
 8000772:	f000 fa99 	bl	8000ca8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	461a      	mov	r2, r3
 800077c:	2117      	movs	r1, #23
 800077e:	2014      	movs	r0, #20
 8000780:	f000 fa92 	bl	8000ca8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	461a      	mov	r2, r3
 800078a:	211b      	movs	r1, #27
 800078c:	2018      	movs	r0, #24
 800078e:	f000 fa8b 	bl	8000ca8 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000792:	2104      	movs	r1, #4
 8000794:	2060      	movs	r0, #96	; 0x60
 8000796:	f000 fa63 	bl	8000c60 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800079a:	2101      	movs	r1, #1
 800079c:	2070      	movs	r0, #112	; 0x70
 800079e:	f000 fa5f 	bl	8000c60 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 4us = 250kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x07);
 80007a2:	2107      	movs	r1, #7
 80007a4:	202a      	movs	r0, #42	; 0x2a
 80007a6:	f000 fa5b 	bl	8000c60 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80007aa:	21e5      	movs	r1, #229	; 0xe5
 80007ac:	2029      	movs	r0, #41	; 0x29
 80007ae:	f000 fa57 	bl	8000c60 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80007b2:	2183      	movs	r1, #131	; 0x83
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f000 fa53 	bl	8000c60 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80007ba:	f000 f9ef 	bl	8000b9c <MCP2515_SetNormalMode>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d101      	bne.n	80007c8 <CANSPI_Initialize+0x144>
    return false;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e000      	b.n	80007ca <CANSPI_Initialize+0x146>
  
  return true;
 80007c8:	2301      	movs	r3, #1
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <CANSPI_Transmit>:

/* CAN */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <CANSPI_Transmit+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <CANSPI_Transmit+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <CANSPI_Transmit+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <CANSPI_Transmit+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80007f8:	f000 fac4 	bl	8000d84 <MCP2515_ReadStatus>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <CANSPI_Transmit+0xec>)
 8000802:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <CANSPI_Transmit+0xec>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d115      	bne.n	800083e <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6858      	ldr	r0, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <CANSPI_Transmit+0xe8>)
 800081c:	4619      	mov	r1, r3
 800081e:	f000 f928 	bl	8000a72 <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a1a      	ldrb	r2, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3309      	adds	r3, #9
 800082a:	4924      	ldr	r1, [pc, #144]	; (80008bc <CANSPI_Transmit+0xe8>)
 800082c:	2040      	movs	r0, #64	; 0x40
 800082e:	f000 fa65 	bl	8000cfc <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000832:	2081      	movs	r0, #129	; 0x81
 8000834:	f000 fa8c 	bl	8000d50 <MCP2515_RequestToSend>

    returnValue = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e038      	b.n	80008b0 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <CANSPI_Transmit+0xec>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <CANSPI_Transmit+0xe8>)
 8000856:	4619      	mov	r1, r3
 8000858:	f000 f90b 	bl	8000a72 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7a1a      	ldrb	r2, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3309      	adds	r3, #9
 8000864:	4915      	ldr	r1, [pc, #84]	; (80008bc <CANSPI_Transmit+0xe8>)
 8000866:	2042      	movs	r0, #66	; 0x42
 8000868:	f000 fa48 	bl	8000cfc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 800086c:	2082      	movs	r0, #130	; 0x82
 800086e:	f000 fa6f 	bl	8000d50 <MCP2515_RequestToSend>

    returnValue = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	e01b      	b.n	80008b0 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <CANSPI_Transmit+0xec>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d114      	bne.n	80008b0 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6858      	ldr	r0, [r3, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <CANSPI_Transmit+0xe8>)
 8000890:	4619      	mov	r1, r3
 8000892:	f000 f8ee 	bl	8000a72 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7a1a      	ldrb	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3309      	adds	r3, #9
 800089e:	4907      	ldr	r1, [pc, #28]	; (80008bc <CANSPI_Transmit+0xe8>)
 80008a0:	2044      	movs	r0, #68	; 0x44
 80008a2:	f000 fa2b 	bl	8000cfc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80008a6:	2084      	movs	r0, #132	; 0x84
 80008a8:	f000 fa52 	bl	8000d50 <MCP2515_RequestToSend>

    returnValue = 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24000158 	.word	0x24000158
 80008c0:	24000154 	.word	0x24000154

080008c4 <CANSPI_Receive>:
  return (returnValue);
}

/* CAN Receive Message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80008d0:	f000 fa74 	bl	8000dbc <MCP2515_GetRxStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	733b      	strb	r3, [r7, #12]
  
  /* if a message was received */
  if (rxStatus.rxBuffer != 0)
 80008d8:	7b3b      	ldrb	r3, [r7, #12]
 80008da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d066      	beq.n	80009b2 <CANSPI_Receive+0xee>
  {
    /* check in which register the received message and then extract it */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80008e4:	7b3b      	ldrb	r3, [r7, #12]
 80008e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b40      	cmp	r3, #64	; 0x40
 80008ee:	bf0c      	ite	eq
 80008f0:	2301      	moveq	r3, #1
 80008f2:	2300      	movne	r3, #0
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	7b3b      	ldrb	r3, [r7, #12]
 80008f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2bc0      	cmp	r3, #192	; 0xc0
 8000900:	bf0c      	ite	eq
 8000902:	2301      	moveq	r3, #1
 8000904:	2300      	movne	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d007      	beq.n	8000920 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	220d      	movs	r2, #13
 8000916:	4619      	mov	r1, r3
 8000918:	2090      	movs	r0, #144	; 0x90
 800091a:	f000 f97f 	bl	8000c1c <MCP2515_ReadRxSequence>
 800091e:	e00c      	b.n	800093a <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000920:	7b3b      	ldrb	r3, [r7, #12]
 8000922:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b80      	cmp	r3, #128	; 0x80
 800092a:	d106      	bne.n	800093a <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	220d      	movs	r2, #13
 8000932:	4619      	mov	r1, r3
 8000934:	2094      	movs	r0, #148	; 0x94
 8000936:	f000 f971 	bl	8000c1c <MCP2515_ReadRxSequence>
    }
    
    /* Decode a Extended Message*/
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800093a:	7b3b      	ldrb	r3, [r7, #12]
 800093c:	f003 0318 	and.w	r3, r3, #24
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b10      	cmp	r3, #16
 8000944:	d10c      	bne.n	8000960 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2202      	movs	r2, #2
 800094a:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800094c:	7cb8      	ldrb	r0, [r7, #18]
 800094e:	7cf9      	ldrb	r1, [r7, #19]
 8000950:	7c3a      	ldrb	r2, [r7, #16]
 8000952:	7c7b      	ldrb	r3, [r7, #17]
 8000954:	f000 f832 	bl	80009bc <convertReg2ExtendedCANid>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	e00b      	b.n	8000978 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Decode a Standard Message*/
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000966:	7c3b      	ldrb	r3, [r7, #16]
 8000968:	7c7a      	ldrb	r2, [r7, #17]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f863 	bl	8000a38 <convertReg2StandardCANid>
 8000972:	4602      	mov	r2, r0
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000978:	7d3a      	ldrb	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800097e:	7d7a      	ldrb	r2, [r7, #21]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000984:	7dba      	ldrb	r2, [r7, #22]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800098a:	7dfa      	ldrb	r2, [r7, #23]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000990:	7e3a      	ldrb	r2, [r7, #24]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000996:	7e7a      	ldrb	r2, [r7, #25]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800099c:	7eba      	ldrb	r2, [r7, #26]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80009a2:	7efa      	ldrb	r2, [r7, #27]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80009a8:	7f3a      	ldrb	r2, [r7, #28]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 80009b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80009bc:	b490      	push	{r4, r7}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4623      	mov	r3, r4
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	4603      	mov	r3, r0
 80009d0:	71bb      	strb	r3, [r7, #6]
 80009d2:	460b      	mov	r3, r1
 80009d4:	717b      	strb	r3, [r7, #5]
 80009d6:	4613      	mov	r3, r2
 80009d8:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80009e2:	793b      	ldrb	r3, [r7, #4]
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80009ea:	793b      	ldrb	r3, [r7, #4]
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4413      	add	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4413      	add	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4413      	add	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4413      	add	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000a2c:	697b      	ldr	r3, [r7, #20]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc90      	pop	{r4, r7}
 8000a36:	4770      	bx	lr

08000a38 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	095b      	lsrs	r3, r3, #5
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000a64:	68fb      	ldr	r3, [r7, #12]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000a72:	b480      	push	{r7}
 8000a74:	b087      	sub	sp, #28
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000a84:	7afb      	ldrb	r3, [r7, #11]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d12e      	bne.n	8000ae8 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f023 031f 	bic.w	r3, r3, #31
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
 8000ac8:	3308      	adds	r3, #8
 8000aca:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	f023 0314 	bic.w	r3, r3, #20
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000ae6:	e013      	b.n	8000b10 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	015b      	lsls	r3, r3, #5
 8000af8:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	701a      	strb	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 Initialization*/
bool MCP2515_Initialize(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 8000b22:	2201      	movs	r2, #1
 8000b24:	2110      	movs	r1, #16
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MCP2515_Initialize+0x3c>)
 8000b28:	f003 f86e 	bl	8003c08 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <MCP2515_Initialize+0x40>)
 8000b32:	f006 fc0d 	bl	8007350 <HAL_SPI_GetState>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <MCP2515_Initialize+0x24>
      return true;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e006      	b.n	8000b4e <MCP2515_Initialize+0x32>
    
    loop--;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f1      	bne.n	8000b30 <MCP2515_Initialize+0x14>
      
  return false;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58020000 	.word	0x58020000
 8000b5c:	24000280 	.word	0x24000280

08000b60 <MCP2515_SetConfigMode>:

/* Set MCP2515 Chip to Configuration Mode*/
bool MCP2515_SetConfigMode(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	200f      	movs	r0, #15
 8000b6a:	f000 f879 	bl	8000c60 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	71fb      	strb	r3, [r7, #7]
  
  do {    

    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000b72:	200e      	movs	r0, #14
 8000b74:	f000 f830 	bl	8000bd8 <MCP2515_ReadByte>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000b7e:	2b80      	cmp	r3, #128	; 0x80
 8000b80:	d101      	bne.n	8000b86 <MCP2515_SetConfigMode+0x26>
      return true;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e006      	b.n	8000b94 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1ef      	bne.n	8000b72 <MCP2515_SetConfigMode+0x12>
  
  return false;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <MCP2515_SetNormalMode>:

/* MCP2515 Normal */
bool MCP2515_SetNormalMode(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	200f      	movs	r0, #15
 8000ba6:	f000 f85b 	bl	8000c60 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000baa:	230a      	movs	r3, #10
 8000bac:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000bae:	200e      	movs	r0, #14
 8000bb0:	f000 f812 	bl	8000bd8 <MCP2515_ReadByte>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <MCP2515_SetNormalMode+0x26>
      return true;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e006      	b.n	8000bd0 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1ef      	bne.n	8000bae <MCP2515_SetNormalMode+0x12>
  
  return false;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MCP2515_ReadByte+0x40>)
 8000be8:	f003 f80e 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f929 	bl	8000e44 <SPI_Tx>
  SPI_Tx(address);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f925 	bl	8000e44 <SPI_Tx>
  retVal = SPI_Rx();
 8000bfa:	f000 f949 	bl	8000e90 <SPI_Rx>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8000c02:	2201      	movs	r2, #1
 8000c04:	2110      	movs	r1, #16
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MCP2515_ReadByte+0x40>)
 8000c08:	f002 fffe 	bl	8003c08 <HAL_GPIO_WritePin>
  
  return retVal;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	58020000 	.word	0x58020000

08000c1c <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2110      	movs	r1, #16
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <MCP2515_ReadRxSequence+0x40>)
 8000c32:	f002 ffe9 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f903 	bl	8000e44 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	4619      	mov	r1, r3
 8000c42:	6838      	ldr	r0, [r7, #0]
 8000c44:	f000 f934 	bl	8000eb0 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MCP2515_ReadRxSequence+0x40>)
 8000c4e:	f002 ffdb 	bl	8003c08 <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	58020000 	.word	0x58020000

08000c60 <MCP2515_WriteByte>:

/* Write a Single Byte to the MCP2515 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	460a      	mov	r2, r1
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MCP2515_WriteByte+0x44>)
 8000c76:	f002 ffc7 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f000 f8e2 	bl	8000e44 <SPI_Tx>
  SPI_Tx(address);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f8de 	bl	8000e44 <SPI_Tx>
  SPI_Tx(data);  
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f8da 	bl	8000e44 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MCP2515_WriteByte+0x44>)
 8000c96:	f002 ffb7 	bl	8003c08 <HAL_GPIO_WritePin>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	58020000 	.word	0x58020000

08000ca8 <MCP2515_WriteByteSequence>:

/* Sequential Bytes */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	603a      	str	r2, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2110      	movs	r1, #16
 8000cbc:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <MCP2515_WriteByteSequence+0x50>)
 8000cbe:	f002 ffa3 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f000 f8be 	bl	8000e44 <SPI_Tx>
  SPI_Tx(startAddress);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f8ba 	bl	8000e44 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000cd0:	79ba      	ldrb	r2, [r7, #6]
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	6838      	ldr	r0, [r7, #0]
 8000ce0:	f000 f8c2 	bl	8000e68 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MCP2515_WriteByteSequence+0x50>)
 8000cea:	f002 ff8d 	bl	8003c08 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58020000 	.word	0x58020000

08000cfc <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4603      	mov	r3, r0
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2110      	movs	r1, #16
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <MCP2515_LoadTxSequence+0x50>)
 8000d14:	f002 ff78 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f892 	bl	8000e44 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000d20:	2104      	movs	r1, #4
 8000d22:	68b8      	ldr	r0, [r7, #8]
 8000d24:	f000 f8a0 	bl	8000e68 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000d28:	7bbb      	ldrb	r3, [r7, #14]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f88a 	bl	8000e44 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	4619      	mov	r1, r3
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f897 	bl	8000e68 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <MCP2515_LoadTxSequence+0x50>)
 8000d40:	f002 ff62 	bl	8003c08 <HAL_GPIO_WritePin>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	58020000 	.word	0x58020000

08000d50 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <MCP2515_RequestToSend+0x30>)
 8000d60:	f002 ff52 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f86c 	bl	8000e44 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <MCP2515_RequestToSend+0x30>)
 8000d72:	f002 ff49 	bl	8003c08 <HAL_GPIO_WritePin>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58020000 	.word	0x58020000

08000d84 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <MCP2515_ReadStatus+0x34>)
 8000d90:	f002 ff3a 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8000d94:	20a0      	movs	r0, #160	; 0xa0
 8000d96:	f000 f855 	bl	8000e44 <SPI_Tx>
  retVal = SPI_Rx();
 8000d9a:	f000 f879 	bl	8000e90 <SPI_Rx>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000da2:	2201      	movs	r2, #1
 8000da4:	2110      	movs	r1, #16
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MCP2515_ReadStatus+0x34>)
 8000da8:	f002 ff2e 	bl	8003c08 <HAL_GPIO_WritePin>
  
  return retVal;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58020000 	.word	0x58020000

08000dbc <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus */
uint8_t MCP2515_GetRxStatus(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	480a      	ldr	r0, [pc, #40]	; (8000df0 <MCP2515_GetRxStatus+0x34>)
 8000dc8:	f002 ff1e 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8000dcc:	20b0      	movs	r0, #176	; 0xb0
 8000dce:	f000 f839 	bl	8000e44 <SPI_Tx>
  retVal = SPI_Rx();
 8000dd2:	f000 f85d 	bl	8000e90 <SPI_Rx>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2110      	movs	r1, #16
 8000dde:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MCP2515_GetRxStatus+0x34>)
 8000de0:	f002 ff12 	bl	8003c08 <HAL_GPIO_WritePin>
  
  return retVal;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	58020000 	.word	0x58020000

08000df4 <MCP2515_BitModify>:


void MCP2515_BitModify(uint8_t address, uint8_t mask, uint8_t data)
{    
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	71bb      	strb	r3, [r7, #6]
 8000e02:	4613      	mov	r3, r2
 8000e04:	717b      	strb	r3, [r7, #5]
  MCP2515_CS_LOW();
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MCP2515_BitModify+0x4c>)
 8000e0c:	f002 fefc 	bl	8003c08 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_BIT_MOD);
 8000e10:	2005      	movs	r0, #5
 8000e12:	f000 f817 	bl	8000e44 <SPI_Tx>
  SPI_Tx(address);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f813 	bl	8000e44 <SPI_Tx>
  SPI_Tx(mask);
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f80f 	bl	8000e44 <SPI_Tx>
  SPI_Tx(data);
 8000e26:	797b      	ldrb	r3, [r7, #5]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f80b 	bl	8000e44 <SPI_Tx>
        
  MCP2515_CS_HIGH();
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MCP2515_BitModify+0x4c>)
 8000e34:	f002 fee8 	bl	8003c08 <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	58020000 	.word	0x58020000

08000e44 <SPI_Tx>:

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000e4e:	1df9      	adds	r1, r7, #7
 8000e50:	230a      	movs	r3, #10
 8000e52:	2201      	movs	r2, #1
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <SPI_Tx+0x20>)
 8000e56:	f005 fcc5 	bl	80067e4 <HAL_SPI_Transmit>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	24000280 	.word	0x24000280

08000e68 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	230a      	movs	r3, #10
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <SPI_TxBuffer+0x24>)
 8000e7e:	f005 fcb1 	bl	80067e4 <HAL_SPI_Transmit>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000280 	.word	0x24000280

08000e90 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000e96:	1df9      	adds	r1, r7, #7
 8000e98:	230a      	movs	r3, #10
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <SPI_Rx+0x1c>)
 8000e9e:	f005 fe93 	bl	8006bc8 <HAL_SPI_Receive>
  return retVal;
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	24000280 	.word	0x24000280

08000eb0 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <SPI_RxBuffer+0x24>)
 8000ec6:	f005 fe7f 	bl	8006bc8 <HAL_SPI_Receive>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000280 	.word	0x24000280

08000ed8 <print_to_console>:
uint8_t uart_rx_buff_1[1];
char 	msg_buff[50];
int		msg_buff_len;

void print_to_console(UART_HandleTypeDef *huart, char msg[50])
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	msg_buff_len = sprintf(msg_buff, msg);
 8000ee2:	6839      	ldr	r1, [r7, #0]
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <print_to_console+0x30>)
 8000ee6:	f009 ff5f 	bl	800ada8 <siprintf>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <print_to_console+0x34>)
 8000eee:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huart, (uint8_t *)msg_buff, msg_buff_len, 100);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <print_to_console+0x34>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	2364      	movs	r3, #100	; 0x64
 8000ef8:	4903      	ldr	r1, [pc, #12]	; (8000f08 <print_to_console+0x30>)
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f007 f900 	bl	8008100 <HAL_UART_Transmit>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000160 	.word	0x24000160
 8000f0c:	24000194 	.word	0x24000194

08000f10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, uart_rx_buff_1, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4904      	ldr	r1, [pc, #16]	; (8000f2c <HAL_UART_RxCpltCallback+0x1c>)
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f007 f985 	bl	800822c <HAL_UART_Receive_IT>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2400015c 	.word	0x2400015c

08000f30 <block>:


void block(UART_HandleTypeDef *huart, int user_input)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	uart_rx_buff_1[0] = 0;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <block+0x38>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, uart_rx_buff_1, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	4909      	ldr	r1, [pc, #36]	; (8000f68 <block+0x38>)
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f007 f971 	bl	800822c <HAL_UART_Receive_IT>
	while((uart_rx_buff_1[0] - 48) != user_input)
 8000f4a:	e002      	b.n	8000f52 <block+0x22>
	{
		HAL_Delay(200);
 8000f4c:	20c8      	movs	r0, #200	; 0xc8
 8000f4e:	f001 f9cf 	bl	80022f0 <HAL_Delay>
	while((uart_rx_buff_1[0] - 48) != user_input)
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <block+0x38>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3b30      	subs	r3, #48	; 0x30
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d1f6      	bne.n	8000f4c <block+0x1c>
	}
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2400015c 	.word	0x2400015c

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f001 f92c 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f8da 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f000 faea 	bl	8001550 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f7c:	f000 f956 	bl	800122c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f80:	f000 fa68 	bl	8001454 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f84:	f000 fab2 	bl	80014ec <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000f88:	f000 f99c 	bl	80012c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f8c:	f000 f9f0 	bl	8001370 <MX_TIM2_Init>
  MX_TIM13_Init();
 8000f90:	f000 fa3c 	bl	800140c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  print_to_console(&huart3, "Program Started\r\n");
 8000f94:	4956      	ldr	r1, [pc, #344]	; (80010f0 <main+0x184>)
 8000f96:	4857      	ldr	r0, [pc, #348]	; (80010f4 <main+0x188>)
 8000f98:	f7ff ff9e 	bl	8000ed8 <print_to_console>
  print_to_console(&huart3, "Please press 1 to initialize MCP25135:\r\n");
 8000f9c:	4956      	ldr	r1, [pc, #344]	; (80010f8 <main+0x18c>)
 8000f9e:	4855      	ldr	r0, [pc, #340]	; (80010f4 <main+0x188>)
 8000fa0:	f7ff ff9a 	bl	8000ed8 <print_to_console>

  block(&huart3, 1);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4853      	ldr	r0, [pc, #332]	; (80010f4 <main+0x188>)
 8000fa8:	f7ff ffc2 	bl	8000f30 <block>

  if(CANSPI_Initialize())
 8000fac:	f7ff fb6a 	bl	8000684 <CANSPI_Initialize>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <main+0x54>
  {
	  print_to_console(&huart3, "MCP2515 Initialized Successfully\r\n");
 8000fb6:	4951      	ldr	r1, [pc, #324]	; (80010fc <main+0x190>)
 8000fb8:	484e      	ldr	r0, [pc, #312]	; (80010f4 <main+0x188>)
 8000fba:	f7ff ff8d 	bl	8000ed8 <print_to_console>
 8000fbe:	e003      	b.n	8000fc8 <main+0x5c>
  }else
  {
	  print_to_console(&huart3, "MCP2515 Initialization Failed\r\n");
 8000fc0:	494f      	ldr	r1, [pc, #316]	; (8001100 <main+0x194>)
 8000fc2:	484c      	ldr	r0, [pc, #304]	; (80010f4 <main+0x188>)
 8000fc4:	f7ff ff88 	bl	8000ed8 <print_to_console>
  }
  MCP2515_BitModify(MCP2515_CANINTE, MCP2515_INT_MASK, MCP2515_ENB_INT);
 8000fc8:	2203      	movs	r2, #3
 8000fca:	2103      	movs	r1, #3
 8000fcc:	202b      	movs	r0, #43	; 0x2b
 8000fce:	f7ff ff11 	bl	8000df4 <MCP2515_BitModify>

  print_to_console(&huart3, "Please press 1 to initialize the timer:\r\n");
 8000fd2:	494c      	ldr	r1, [pc, #304]	; (8001104 <main+0x198>)
 8000fd4:	4847      	ldr	r0, [pc, #284]	; (80010f4 <main+0x188>)
 8000fd6:	f7ff ff7f 	bl	8000ed8 <print_to_console>
  block(&huart3, 1);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4845      	ldr	r0, [pc, #276]	; (80010f4 <main+0x188>)
 8000fde:	f7ff ffa7 	bl	8000f30 <block>
  if (HAL_TIM_Base_Start(&htim13) == 0)
 8000fe2:	4849      	ldr	r0, [pc, #292]	; (8001108 <main+0x19c>)
 8000fe4:	f006 fb02 	bl	80075ec <HAL_TIM_Base_Start>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d104      	bne.n	8000ff8 <main+0x8c>
  {
	  print_to_console(&huart3, "Timer initialized successfully:\r\n");
 8000fee:	4947      	ldr	r1, [pc, #284]	; (800110c <main+0x1a0>)
 8000ff0:	4840      	ldr	r0, [pc, #256]	; (80010f4 <main+0x188>)
 8000ff2:	f7ff ff71 	bl	8000ed8 <print_to_console>
 8000ff6:	e003      	b.n	8001000 <main+0x94>
  }else
  {
	  print_to_console(&huart3, "Timer initialization failed\r\n");
 8000ff8:	4945      	ldr	r1, [pc, #276]	; (8001110 <main+0x1a4>)
 8000ffa:	483e      	ldr	r0, [pc, #248]	; (80010f4 <main+0x188>)
 8000ffc:	f7ff ff6c 	bl	8000ed8 <print_to_console>
  }

  print_to_console(&huart3, "Please press 1 to start sending data:\r\n");
 8001000:	4944      	ldr	r1, [pc, #272]	; (8001114 <main+0x1a8>)
 8001002:	483c      	ldr	r0, [pc, #240]	; (80010f4 <main+0x188>)
 8001004:	f7ff ff68 	bl	8000ed8 <print_to_console>
  block(&huart3, 1);
 8001008:	2101      	movs	r1, #1
 800100a:	483a      	ldr	r0, [pc, #232]	; (80010f4 <main+0x188>)
 800100c:	f7ff ff90 	bl	8000f30 <block>

  txMessage_1.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001010:	4b41      	ldr	r3, [pc, #260]	; (8001118 <main+0x1ac>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
  txMessage_1.frame.id = 0x0A;
 8001016:	4b40      	ldr	r3, [pc, #256]	; (8001118 <main+0x1ac>)
 8001018:	220a      	movs	r2, #10
 800101a:	605a      	str	r2, [r3, #4]
  txMessage_1.frame.dlc = 8;
 800101c:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <main+0x1ac>)
 800101e:	2208      	movs	r2, #8
 8001020:	721a      	strb	r2, [r3, #8]
  txMessage_1.frame.data0 = 0;
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <main+0x1ac>)
 8001024:	2200      	movs	r2, #0
 8001026:	725a      	strb	r2, [r3, #9]
  txMessage_1.frame.data1 = 0;
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <main+0x1ac>)
 800102a:	2200      	movs	r2, #0
 800102c:	729a      	strb	r2, [r3, #10]
  txMessage_1.frame.data2 = 0;
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <main+0x1ac>)
 8001030:	2200      	movs	r2, #0
 8001032:	72da      	strb	r2, [r3, #11]
  txMessage_1.frame.data3 = 0;
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <main+0x1ac>)
 8001036:	2200      	movs	r2, #0
 8001038:	731a      	strb	r2, [r3, #12]
  txMessage_1.frame.data4 = 0;
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <main+0x1ac>)
 800103c:	2200      	movs	r2, #0
 800103e:	735a      	strb	r2, [r3, #13]
  txMessage_1.frame.data5 = 0;
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <main+0x1ac>)
 8001042:	2200      	movs	r2, #0
 8001044:	739a      	strb	r2, [r3, #14]
  txMessage_1.frame.data6 = 0;
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <main+0x1ac>)
 8001048:	2200      	movs	r2, #0
 800104a:	73da      	strb	r2, [r3, #15]
  txMessage_1.frame.data7 = 0;
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <main+0x1ac>)
 800104e:	2200      	movs	r2, #0
 8001050:	741a      	strb	r2, [r3, #16]

  txMessage_2.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <main+0x1b0>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
  txMessage_2.frame.id = 0x0B;
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <main+0x1b0>)
 800105a:	220b      	movs	r2, #11
 800105c:	605a      	str	r2, [r3, #4]
  txMessage_2.frame.dlc = 8;
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <main+0x1b0>)
 8001060:	2208      	movs	r2, #8
 8001062:	721a      	strb	r2, [r3, #8]
  txMessage_2.frame.data0 = 0;
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <main+0x1b0>)
 8001066:	2200      	movs	r2, #0
 8001068:	725a      	strb	r2, [r3, #9]
  txMessage_2.frame.data1 = 0;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <main+0x1b0>)
 800106c:	2200      	movs	r2, #0
 800106e:	729a      	strb	r2, [r3, #10]
  txMessage_2.frame.data2 = 0;
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <main+0x1b0>)
 8001072:	2200      	movs	r2, #0
 8001074:	72da      	strb	r2, [r3, #11]
  txMessage_2.frame.data3 = 0;
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <main+0x1b0>)
 8001078:	2200      	movs	r2, #0
 800107a:	731a      	strb	r2, [r3, #12]
  txMessage_2.frame.data4 = 0;
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <main+0x1b0>)
 800107e:	2200      	movs	r2, #0
 8001080:	735a      	strb	r2, [r3, #13]
  txMessage_2.frame.data5 = 0;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <main+0x1b0>)
 8001084:	2200      	movs	r2, #0
 8001086:	739a      	strb	r2, [r3, #14]
  txMessage_2.frame.data6 = 0;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <main+0x1b0>)
 800108a:	2200      	movs	r2, #0
 800108c:	73da      	strb	r2, [r3, #15]
  txMessage_2.frame.data7 = 0;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <main+0x1b0>)
 8001090:	2200      	movs	r2, #0
 8001092:	741a      	strb	r2, [r3, #16]

  txMessage_3.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <main+0x1b4>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
  txMessage_3.frame.id = 0x0C;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <main+0x1b4>)
 800109c:	220c      	movs	r2, #12
 800109e:	605a      	str	r2, [r3, #4]
  txMessage_3.frame.dlc = 8;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <main+0x1b4>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	721a      	strb	r2, [r3, #8]
  txMessage_3.frame.data0 = 0;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <main+0x1b4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	725a      	strb	r2, [r3, #9]
  txMessage_3.frame.data1 = 0;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <main+0x1b4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	729a      	strb	r2, [r3, #10]
  txMessage_3.frame.data2 = 0;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0x1b4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	72da      	strb	r2, [r3, #11]
  txMessage_3.frame.data3 = 0;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <main+0x1b4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	731a      	strb	r2, [r3, #12]
  txMessage_3.frame.data4 = 0;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <main+0x1b4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	735a      	strb	r2, [r3, #13]
  txMessage_3.frame.data5 = 0;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <main+0x1b4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	739a      	strb	r2, [r3, #14]
  txMessage_3.frame.data6 = 0;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <main+0x1b4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	73da      	strb	r2, [r3, #15]
  txMessage_3.frame.data7 = 0;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <main+0x1b4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	741a      	strb	r2, [r3, #16]

  HAL_TIM_Base_Start_IT(&htim2);
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <main+0x1b8>)
 80010d8:	f006 faf8 	bl	80076cc <HAL_TIM_Base_Start_IT>

  print_to_console(&huart3, "MCU is currently sending data\r\n");
 80010dc:	4912      	ldr	r1, [pc, #72]	; (8001128 <main+0x1bc>)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <main+0x188>)
 80010e0:	f7ff fefa 	bl	8000ed8 <print_to_console>
	txMessage.frame.data5 = 5;
	txMessage.frame.data6 = 6;
	txMessage.frame.data7 = 7;
	CANSPI_Transmit(&txMessage);*/

	HAL_Delay(1000);
 80010e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e8:	f001 f902 	bl	80022f0 <HAL_Delay>
 80010ec:	e7fa      	b.n	80010e4 <main+0x178>
 80010ee:	bf00      	nop
 80010f0:	0800b69c 	.word	0x0800b69c
 80010f4:	240003a0 	.word	0x240003a0
 80010f8:	0800b6b0 	.word	0x0800b6b0
 80010fc:	0800b6dc 	.word	0x0800b6dc
 8001100:	0800b700 	.word	0x0800b700
 8001104:	0800b720 	.word	0x0800b720
 8001108:	24000354 	.word	0x24000354
 800110c:	0800b74c 	.word	0x0800b74c
 8001110:	0800b770 	.word	0x0800b770
 8001114:	0800b790 	.word	0x0800b790
 8001118:	24000c70 	.word	0x24000c70
 800111c:	24000c84 	.word	0x24000c84
 8001120:	24000c98 	.word	0x24000c98
 8001124:	24000308 	.word	0x24000308
 8001128:	0800b7b8 	.word	0x0800b7b8

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09c      	sub	sp, #112	; 0x70
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	224c      	movs	r2, #76	; 0x4c
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f009 fe2c 	bl	800ad98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2220      	movs	r2, #32
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f009 fe26 	bl	800ad98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800114c:	2002      	movs	r0, #2
 800114e:	f002 fed7 	bl	8003f00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <SystemClock_Config+0xf8>)
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <SystemClock_Config+0xf8>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <SystemClock_Config+0xf8>)
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <SystemClock_Config+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001174:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <SystemClock_Config+0xfc>)
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <SystemClock_Config+0xfc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001188:	bf00      	nop
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <SystemClock_Config+0xfc>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001196:	d1f8      	bne.n	800118a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001198:	2303      	movs	r3, #3
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800119c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80011b6:	2318      	movs	r3, #24
 80011b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011be:	2304      	movs	r3, #4
 80011c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011c6:	230c      	movs	r3, #12
 80011c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fedc 	bl	8003f94 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011e2:	f000 fc13 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	233f      	movs	r3, #63	; 0x3f
 80011e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f003 faf0 	bl	80047f0 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001216:	f000 fbf9 	bl	8001a0c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3770      	adds	r7, #112	; 0x70
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58000400 	.word	0x58000400
 8001228:	58024800 	.word	0x58024800

0800122c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_ETH_Init+0x80>)
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <MX_ETH_Init+0x84>)
 8001234:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_ETH_Init+0x88>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_ETH_Init+0x88>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_ETH_Init+0x88>)
 8001244:	22e1      	movs	r2, #225	; 0xe1
 8001246:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_ETH_Init+0x88>)
 800124a:	2200      	movs	r2, #0
 800124c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_ETH_Init+0x88>)
 8001250:	2200      	movs	r2, #0
 8001252:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_ETH_Init+0x88>)
 8001256:	2200      	movs	r2, #0
 8001258:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_ETH_Init+0x80>)
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_ETH_Init+0x88>)
 800125e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_ETH_Init+0x80>)
 8001262:	2201      	movs	r2, #1
 8001264:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_ETH_Init+0x80>)
 8001268:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_ETH_Init+0x8c>)
 800126a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_ETH_Init+0x80>)
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <MX_ETH_Init+0x90>)
 8001270:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_ETH_Init+0x80>)
 8001274:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001278:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_ETH_Init+0x80>)
 800127c:	f001 fef0 	bl	8003060 <HAL_ETH_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001286:	f000 fbc1 	bl	8001a0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800128a:	2238      	movs	r2, #56	; 0x38
 800128c:	2100      	movs	r1, #0
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_ETH_Init+0x94>)
 8001290:	f009 fd82 	bl	800ad98 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_ETH_Init+0x94>)
 8001296:	2221      	movs	r2, #33	; 0x21
 8001298:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_ETH_Init+0x94>)
 800129c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_ETH_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	240001d0 	.word	0x240001d0
 80012b0:	40028000 	.word	0x40028000
 80012b4:	24000cc0 	.word	0x24000cc0
 80012b8:	240000d8 	.word	0x240000d8
 80012bc:	24000078 	.word	0x24000078
 80012c0:	24000198 	.word	0x24000198

080012c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012ca:	4a28      	ldr	r2, [pc, #160]	; (800136c <MX_SPI1_Init+0xa8>)
 80012cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012de:	2207      	movs	r2, #7
 80012e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_SPI1_Init+0xa4>)
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_SPI1_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_SPI1_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_SPI1_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001336:	2200      	movs	r2, #0
 8001338:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_SPI1_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_SPI1_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_SPI1_Init+0xa4>)
 8001354:	f005 f940 	bl	80065d8 <HAL_SPI_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800135e:	f000 fb55 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000280 	.word	0x24000280
 800136c:	40013000 	.word	0x40013000

08001370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM2_Init+0x98>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_TIM2_Init+0x98>)
 8001398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800139c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_TIM2_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1920;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM2_Init+0x98>)
 80013a6:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 80013aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_TIM2_Init+0x98>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_TIM2_Init+0x98>)
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <MX_TIM2_Init+0x98>)
 80013ba:	f006 f8c0 	bl	800753e <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80013c4:	f000 fb22 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_TIM2_Init+0x98>)
 80013d6:	f006 fb3f 	bl	8007a58 <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80013e0:	f000 fb14 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM2_Init+0x98>)
 80013f2:	f006 fd89 	bl	8007f08 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80013fc:	f000 fb06 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24000308 	.word	0x24000308

0800140c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_TIM13_Init+0x40>)
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <MX_TIM13_Init+0x44>)
 8001414:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <MX_TIM13_Init+0x40>)
 8001418:	223f      	movs	r2, #63	; 0x3f
 800141a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_TIM13_Init+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_TIM13_Init+0x40>)
 8001424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001428:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_TIM13_Init+0x40>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_TIM13_Init+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_TIM13_Init+0x40>)
 8001438:	f006 f881 	bl	800753e <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001442:	f000 fae3 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000354 	.word	0x24000354
 8001450:	40001c00 	.word	0x40001c00

08001454 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <MX_USART3_UART_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 800149e:	f006 fddf 	bl	8008060 <HAL_UART_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014a8:	f000 fab0 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 80014b0:	f009 f873 	bl	800a59a <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014ba:	f000 faa7 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 80014c2:	f009 f8a8 	bl	800a616 <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 fa9e 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_USART3_UART_Init+0x90>)
 80014d2:	f009 f829 	bl	800a528 <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f000 fa96 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	240003a0 	.word	0x240003a0
 80014e8:	40004800 	.word	0x40004800

080014ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80014f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f8:	2209      	movs	r2, #9
 80014fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014fe:	2202      	movs	r2, #2
 8001500:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800150a:	2202      	movs	r2, #2
 800150c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001510:	2201      	movs	r2, #1
 8001512:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001522:	2201      	movs	r2, #1
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001528:	2201      	movs	r2, #1
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800152e:	2200      	movs	r2, #0
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001534:	f002 fb9b 	bl	8003c6e <HAL_PCD_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800153e:	f000 fa65 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	24000430 	.word	0x24000430
 800154c:	40080000 	.word	0x40080000

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b6f      	ldr	r3, [pc, #444]	; (8001724 <MX_GPIO_Init+0x1d4>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4a6d      	ldr	r2, [pc, #436]	; (8001724 <MX_GPIO_Init+0x1d4>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4b6b      	ldr	r3, [pc, #428]	; (8001724 <MX_GPIO_Init+0x1d4>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001584:	4b67      	ldr	r3, [pc, #412]	; (8001724 <MX_GPIO_Init+0x1d4>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	4a66      	ldr	r2, [pc, #408]	; (8001724 <MX_GPIO_Init+0x1d4>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001594:	4b63      	ldr	r3, [pc, #396]	; (8001724 <MX_GPIO_Init+0x1d4>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b60      	ldr	r3, [pc, #384]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	4a57      	ldr	r2, [pc, #348]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d0:	4b54      	ldr	r3, [pc, #336]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	4b51      	ldr	r3, [pc, #324]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	4a4f      	ldr	r2, [pc, #316]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fc:	4b49      	ldr	r3, [pc, #292]	; (8001724 <MX_GPIO_Init+0x1d4>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	4a48      	ldr	r2, [pc, #288]	; (8001724 <MX_GPIO_Init+0x1d4>)
 8001604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160c:	4b45      	ldr	r3, [pc, #276]	; (8001724 <MX_GPIO_Init+0x1d4>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161a:	4b42      	ldr	r3, [pc, #264]	; (8001724 <MX_GPIO_Init+0x1d4>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a40      	ldr	r2, [pc, #256]	; (8001724 <MX_GPIO_Init+0x1d4>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <MX_GPIO_Init+0x1d4>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2110      	movs	r1, #16
 800163c:	483a      	ldr	r0, [pc, #232]	; (8001728 <MX_GPIO_Init+0x1d8>)
 800163e:	f002 fae3 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f244 0101 	movw	r1, #16385	; 0x4001
 8001648:	4838      	ldr	r0, [pc, #224]	; (800172c <MX_GPIO_Init+0x1dc>)
 800164a:	f002 fadd 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001654:	4836      	ldr	r0, [pc, #216]	; (8001730 <MX_GPIO_Init+0x1e0>)
 8001656:	f002 fad7 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2102      	movs	r1, #2
 800165e:	4835      	ldr	r0, [pc, #212]	; (8001734 <MX_GPIO_Init+0x1e4>)
 8001660:	f002 fad2 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	482f      	ldr	r0, [pc, #188]	; (8001738 <MX_GPIO_Init+0x1e8>)
 800167a:	f002 f915 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800167e:	2310      	movs	r3, #16
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	4824      	ldr	r0, [pc, #144]	; (8001728 <MX_GPIO_Init+0x1d8>)
 8001696:	f002 f907 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800169a:	f244 0301 	movw	r3, #16385	; 0x4001
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	481e      	ldr	r0, [pc, #120]	; (800172c <MX_GPIO_Init+0x1dc>)
 80016b4:	f002 f8f8 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80016b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4817      	ldr	r0, [pc, #92]	; (8001730 <MX_GPIO_Init+0x1e0>)
 80016d2:	f002 f8e9 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4813      	ldr	r0, [pc, #76]	; (8001738 <MX_GPIO_Init+0x1e8>)
 80016ec:	f002 f8dc 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	; (8001734 <MX_GPIO_Init+0x1e4>)
 8001708:	f002 f8ce 	bl	80038a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2017      	movs	r0, #23
 8001712:	f000 ff0c 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001716:	2017      	movs	r0, #23
 8001718:	f000 ff23 	bl	8002562 <HAL_NVIC_EnableIRQ>

}
 800171c:	bf00      	nop
 800171e:	3730      	adds	r7, #48	; 0x30
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	58024400 	.word	0x58024400
 8001728:	58020000 	.word	0x58020000
 800172c:	58020400 	.word	0x58020400
 8001730:	58020c00 	.word	0x58020c00
 8001734:	58021000 	.word	0x58021000
 8001738:	58020800 	.word	0x58020800

0800173c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
	//print_to_console(&huart3, "Inside interrupt callback function\r\n");
	if(CANSPI_Receive(&rxMessage))
 8001746:	4835      	ldr	r0, [pc, #212]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001748:	f7ff f8bc 	bl	80008c4 <CANSPI_Receive>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d048      	beq.n	80017e4 <HAL_GPIO_EXTI_Callback+0xa8>
	{

		if (rxMessage.frame.id == 10)
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d115      	bne.n	8001786 <HAL_GPIO_EXTI_Callback+0x4a>
		{
			rx_data_buf_1[counter_1][0] = rxMessage.frame.data0;
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_GPIO_EXTI_Callback+0xe4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2f      	ldr	r2, [pc, #188]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001760:	7a51      	ldrb	r1, [r2, #9]
 8001762:	4a30      	ldr	r2, [pc, #192]	; (8001824 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001764:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			rx_data_buf_1[counter_1][1] = rxMessage.frame.data7;
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_GPIO_EXTI_Callback+0xe4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a2b      	ldr	r2, [pc, #172]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 800176e:	7c11      	ldrb	r1, [r2, #16]
 8001770:	4a2c      	ldr	r2, [pc, #176]	; (8001824 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	460a      	mov	r2, r1
 8001778:	705a      	strb	r2, [r3, #1]
			counter_1++;
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_GPIO_EXTI_Callback+0xe4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e02e      	b.n	80017e4 <HAL_GPIO_EXTI_Callback+0xa8>
		}
		else if (rxMessage.frame.id == 11)
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b0b      	cmp	r3, #11
 800178c:	d115      	bne.n	80017ba <HAL_GPIO_EXTI_Callback+0x7e>
		{
			rx_data_buf_2[counter_2][0] = rxMessage.frame.data0;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_GPIO_EXTI_Callback+0xec>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a22      	ldr	r2, [pc, #136]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001794:	7a51      	ldrb	r1, [r2, #9]
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001798:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			rx_data_buf_2[counter_2][1] = rxMessage.frame.data7;
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_GPIO_EXTI_Callback+0xec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 80017a2:	7c11      	ldrb	r1, [r2, #16]
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_GPIO_EXTI_Callback+0xf0>)
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	460a      	mov	r2, r1
 80017ac:	705a      	strb	r2, [r3, #1]
			counter_2++;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_GPIO_EXTI_Callback+0xec>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_GPIO_EXTI_Callback+0xec>)
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e014      	b.n	80017e4 <HAL_GPIO_EXTI_Callback+0xa8>
		}
		else
		{
			rx_data_buf_3[counter_3][0] = rxMessage.frame.data0;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_GPIO_EXTI_Callback+0xf4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 80017c0:	7a51      	ldrb	r1, [r2, #9]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_GPIO_EXTI_Callback+0xf8>)
 80017c4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			rx_data_buf_3[counter_3][1] = rxMessage.frame.data7;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_GPIO_EXTI_Callback+0xf4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a13      	ldr	r2, [pc, #76]	; (800181c <HAL_GPIO_EXTI_Callback+0xe0>)
 80017ce:	7c11      	ldrb	r1, [r2, #16]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_GPIO_EXTI_Callback+0xf8>)
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	460a      	mov	r2, r1
 80017d8:	705a      	strb	r2, [r3, #1]
			counter_3++;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_GPIO_EXTI_Callback+0xf4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_GPIO_EXTI_Callback+0xf4>)
 80017e2:	6013      	str	r3, [r2, #0]
		}


		//print_to_console(&huart3, "Data received successfully\r\n");
	}
	MCP2515_BitModify(MCP2515_CANINTF, MCP2515_INT_MASK, MCP2515_INT_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2103      	movs	r1, #3
 80017e8:	202c      	movs	r0, #44	; 0x2c
 80017ea:	f7ff fb03 	bl	8000df4 <MCP2515_BitModify>

	if (counter_1 > 99 && counter_2 > 99 && counter_3 > 99)
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_GPIO_EXTI_Callback+0xe4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b63      	cmp	r3, #99	; 0x63
 80017f4:	dd0e      	ble.n	8001814 <HAL_GPIO_EXTI_Callback+0xd8>
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_GPIO_EXTI_Callback+0xec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b63      	cmp	r3, #99	; 0x63
 80017fc:	dd0a      	ble.n	8001814 <HAL_GPIO_EXTI_Callback+0xd8>
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b63      	cmp	r3, #99	; 0x63
 8001804:	dd06      	ble.n	8001814 <HAL_GPIO_EXTI_Callback+0xd8>
	{
		print_to_console(&huart3, "Received 300 CAN Messages.\r\n");
 8001806:	490c      	ldr	r1, [pc, #48]	; (8001838 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <HAL_GPIO_EXTI_Callback+0x100>)
 800180a:	f7ff fb65 	bl	8000ed8 <print_to_console>
		start = 2;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_GPIO_EXTI_Callback+0x104>)
 8001810:	2202      	movs	r2, #2
 8001812:	601a      	str	r2, [r3, #0]
	}
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	24000cac 	.word	0x24000cac
 8001820:	24000a0c 	.word	0x24000a0c
 8001824:	24000a18 	.word	0x24000a18
 8001828:	24000a10 	.word	0x24000a10
 800182c:	24000ae0 	.word	0x24000ae0
 8001830:	24000a14 	.word	0x24000a14
 8001834:	24000ba8 	.word	0x24000ba8
 8001838:	0800b7d8 	.word	0x0800b7d8
 800183c:	240003a0 	.word	0x240003a0
 8001840:	24000000 	.word	0x24000000

08001844 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	timer_val = __HAL_TIM_GET_COUNTER(&htim13) - timer_val;
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800185e:	801a      	strh	r2, [r3, #0]
	timers_arr[sent_counter] = timer_val;
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001866:	8811      	ldrh	r1, [r2, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800186a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (start == 1)
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	f040 809e 	bne.w	80019b4 <HAL_TIM_PeriodElapsedCallback+0x170>
	{
		CANSPI_Transmit(&txMessage_1);
 8001878:	485e      	ldr	r0, [pc, #376]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800187a:	f7fe ffab 	bl	80007d4 <CANSPI_Transmit>
		CANSPI_Transmit(&txMessage_2);
 800187e:	485e      	ldr	r0, [pc, #376]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001880:	f7fe ffa8 	bl	80007d4 <CANSPI_Transmit>
		CANSPI_Transmit(&txMessage_3);
 8001884:	485d      	ldr	r0, [pc, #372]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001886:	f7fe ffa5 	bl	80007d4 <CANSPI_Transmit>

		txMessage_1.frame.data0++;
 800188a:	4b5a      	ldr	r3, [pc, #360]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	3301      	adds	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001894:	725a      	strb	r2, [r3, #9]
		txMessage_1.frame.data1++;
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001898:	7a9b      	ldrb	r3, [r3, #10]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018a0:	729a      	strb	r2, [r3, #10]
		txMessage_1.frame.data2++;
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018a4:	7adb      	ldrb	r3, [r3, #11]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018ac:	72da      	strb	r2, [r3, #11]
		txMessage_1.frame.data3++;
 80018ae:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018b0:	7b1b      	ldrb	r3, [r3, #12]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018b8:	731a      	strb	r2, [r3, #12]
		txMessage_1.frame.data4++;
 80018ba:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018bc:	7b5b      	ldrb	r3, [r3, #13]
 80018be:	3301      	adds	r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018c4:	735a      	strb	r2, [r3, #13]
		txMessage_1.frame.data5++;
 80018c6:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018c8:	7b9b      	ldrb	r3, [r3, #14]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018d0:	739a      	strb	r2, [r3, #14]
		txMessage_1.frame.data6++;
 80018d2:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018d4:	7bdb      	ldrb	r3, [r3, #15]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018dc:	73da      	strb	r2, [r3, #15]
		txMessage_1.frame.data7++;
 80018de:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018e0:	7c1b      	ldrb	r3, [r3, #16]
 80018e2:	3301      	adds	r3, #1
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018e8:	741a      	strb	r2, [r3, #16]

		txMessage_2.frame.data0++;
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80018ec:	7a5b      	ldrb	r3, [r3, #9]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80018f4:	725a      	strb	r2, [r3, #9]
		txMessage_2.frame.data1++;
 80018f6:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80018f8:	7a9b      	ldrb	r3, [r3, #10]
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001900:	729a      	strb	r2, [r3, #10]
		txMessage_2.frame.data2++;
 8001902:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001904:	7adb      	ldrb	r3, [r3, #11]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800190c:	72da      	strb	r2, [r3, #11]
		txMessage_2.frame.data3++;
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001910:	7b1b      	ldrb	r3, [r3, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001918:	731a      	strb	r2, [r3, #12]
		txMessage_2.frame.data4++;
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800191c:	7b5b      	ldrb	r3, [r3, #13]
 800191e:	3301      	adds	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001924:	735a      	strb	r2, [r3, #13]
		txMessage_2.frame.data5++;
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001928:	7b9b      	ldrb	r3, [r3, #14]
 800192a:	3301      	adds	r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001930:	739a      	strb	r2, [r3, #14]
		txMessage_2.frame.data6++;
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001934:	7bdb      	ldrb	r3, [r3, #15]
 8001936:	3301      	adds	r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800193c:	73da      	strb	r2, [r3, #15]
		txMessage_2.frame.data7++;
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001940:	7c1b      	ldrb	r3, [r3, #16]
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001948:	741a      	strb	r2, [r3, #16]

		txMessage_3.frame.data0++;
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800194c:	7a5b      	ldrb	r3, [r3, #9]
 800194e:	3301      	adds	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001954:	725a      	strb	r2, [r3, #9]
		txMessage_3.frame.data1++;
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001958:	7a9b      	ldrb	r3, [r3, #10]
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001960:	729a      	strb	r2, [r3, #10]
		txMessage_3.frame.data2++;
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001964:	7adb      	ldrb	r3, [r3, #11]
 8001966:	3301      	adds	r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800196c:	72da      	strb	r2, [r3, #11]
		txMessage_3.frame.data3++;
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001970:	7b1b      	ldrb	r3, [r3, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001978:	731a      	strb	r2, [r3, #12]
		txMessage_3.frame.data4++;
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800197c:	7b5b      	ldrb	r3, [r3, #13]
 800197e:	3301      	adds	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001984:	735a      	strb	r2, [r3, #13]
		txMessage_3.frame.data5++;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001988:	7b9b      	ldrb	r3, [r3, #14]
 800198a:	3301      	adds	r3, #1
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001990:	739a      	strb	r2, [r3, #14]
		txMessage_3.frame.data6++;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001994:	7bdb      	ldrb	r3, [r3, #15]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800199c:	73da      	strb	r2, [r3, #15]
		txMessage_3.frame.data7++;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80019a0:	7c1b      	ldrb	r3, [r3, #16]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80019a8:	741a      	strb	r2, [r3, #16]

		sent_counter++;
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80019b2:	6013      	str	r3, [r2, #0]
	}

	if (sent_counter > 99)
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b63      	cmp	r3, #99	; 0x63
 80019ba:	dd06      	ble.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x186>
	{
		print_to_console(&huart3, "Timer interrupts terminated");
 80019bc:	4910      	ldr	r1, [pc, #64]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80019c0:	f7ff fa8a 	bl	8000ed8 <print_to_console>
		HAL_TIM_Base_Stop_IT(&htim2);
 80019c4:	4810      	ldr	r0, [pc, #64]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019c6:	f005 fef9 	bl	80077bc <HAL_TIM_Base_Stop_IT>
	}
	timer_val = __HAL_TIM_GET_COUNTER(&htim13);
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80019d4:	801a      	strh	r2, [r3, #0]
	//print_to_console(&huart3, "Timer interrupt callback function\r\n");
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	24000354 	.word	0x24000354
 80019e4:	24000a04 	.word	0x24000a04
 80019e8:	24000a08 	.word	0x24000a08
 80019ec:	2400093c 	.word	0x2400093c
 80019f0:	24000000 	.word	0x24000000
 80019f4:	24000c70 	.word	0x24000c70
 80019f8:	24000c84 	.word	0x24000c84
 80019fc:	24000c98 	.word	0x24000c98
 8001a00:	0800b7f8 	.word	0x0800b7f8
 8001a04:	240003a0 	.word	0x240003a0
 8001a08:	24000308 	.word	0x24000308

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>
	...

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2005      	movs	r0, #5
 8001a42:	f000 fd74 	bl	800252e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a46:	2005      	movs	r0, #5
 8001a48:	f000 fd8b 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2005      	movs	r0, #5
 8001a52:	f000 fd6c 	bl	800252e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a56:	2005      	movs	r0, #5
 8001a58:	f000 fd83 	bl	8002562 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	58024400 	.word	0x58024400

08001a68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a59      	ldr	r2, [pc, #356]	; (8001bec <HAL_ETH_MspInit+0x184>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 80ab 	bne.w	8001be2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001a8c:	4b58      	ldr	r3, [pc, #352]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a92:	4a57      	ldr	r2, [pc, #348]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a9c:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aba:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001ac8:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ace:	4a48      	ldr	r2, [pc, #288]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ad8:	4b45      	ldr	r3, [pc, #276]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aec:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af6:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0a:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b28:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b46:	4a2a      	ldr	r2, [pc, #168]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_ETH_MspInit+0x188>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b5e:	2332      	movs	r3, #50	; 0x32
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6e:	230b      	movs	r3, #11
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4619      	mov	r1, r3
 8001b78:	481e      	ldr	r0, [pc, #120]	; (8001bf4 <HAL_ETH_MspInit+0x18c>)
 8001b7a:	f001 fe95 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001b7e:	2386      	movs	r3, #134	; 0x86
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b8e:	230b      	movs	r3, #11
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4817      	ldr	r0, [pc, #92]	; (8001bf8 <HAL_ETH_MspInit+0x190>)
 8001b9a:	f001 fe85 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <HAL_ETH_MspInit+0x194>)
 8001bbc:	f001 fe74 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001bc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd2:	230b      	movs	r3, #11
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <HAL_ETH_MspInit+0x198>)
 8001bde:	f001 fe63 	bl	80038a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3738      	adds	r7, #56	; 0x38
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40028000 	.word	0x40028000
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58020800 	.word	0x58020800
 8001bf8:	58020000 	.word	0x58020000
 8001bfc:	58020400 	.word	0x58020400
 8001c00:	58021800 	.word	0x58021800

08001c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0ba      	sub	sp, #232	; 0xe8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	22bc      	movs	r2, #188	; 0xbc
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f009 f8b7 	bl	800ad98 <memset>
  if(hspi->Instance==SPI1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a36      	ldr	r2, [pc, #216]	; (8001d08 <HAL_SPI_MspInit+0x104>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d165      	bne.n	8001d00 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 f960 	bl	8004f08 <HAL_RCCEx_PeriphCLKConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c4e:	f7ff fedd 	bl	8001a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c58:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c80:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_SPI_MspInit+0x108>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cac:	2360      	movs	r3, #96	; 0x60
 8001cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <HAL_SPI_MspInit+0x10c>)
 8001cd2:	f001 fde9 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cee:	2305      	movs	r3, #5
 8001cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <HAL_SPI_MspInit+0x110>)
 8001cfc:	f001 fdd4 	bl	80038a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	37e8      	adds	r7, #232	; 0xe8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40013000 	.word	0x40013000
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	58020000 	.word	0x58020000
 8001d14:	58020c00 	.word	0x58020c00

08001d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d117      	bne.n	8001d5a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_TIM_Base_MspInit+0x74>)
 8001d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_TIM_Base_MspInit+0x74>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_TIM_Base_MspInit+0x74>)
 8001d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	201c      	movs	r0, #28
 8001d4e:	f000 fbee 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d52:	201c      	movs	r0, #28
 8001d54:	f000 fc05 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001d58:	e013      	b.n	8001d82 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM13)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0x78>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d10e      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_TIM_Base_MspInit+0x74>)
 8001d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_TIM_Base_MspInit+0x74>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_TIM_Base_MspInit+0x74>)
 8001d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	40001c00 	.word	0x40001c00

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0b8      	sub	sp, #224	; 0xe0
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	22bc      	movs	r2, #188	; 0xbc
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f008 ffef 	bl	800ad98 <memset>
  if(huart->Instance==USART3)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <HAL_UART_MspInit+0xd0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d14a      	bne.n	8001e5a <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 f898 	bl	8004f08 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dde:	f7ff fe15 	bl	8001a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_UART_MspInit+0xd4>)
 8001de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001de8:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_UART_MspInit+0xd4>)
 8001dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_UART_MspInit+0xd4>)
 8001df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_UART_MspInit+0xd4>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_UART_MspInit+0xd4>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_UART_MspInit+0xd4>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e42:	4619      	mov	r1, r3
 8001e44:	4809      	ldr	r0, [pc, #36]	; (8001e6c <HAL_UART_MspInit+0xd8>)
 8001e46:	f001 fd2f 	bl	80038a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2027      	movs	r0, #39	; 0x27
 8001e50:	f000 fb6d 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e54:	2027      	movs	r0, #39	; 0x27
 8001e56:	f000 fb84 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	37e0      	adds	r7, #224	; 0xe0
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40004800 	.word	0x40004800
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58020c00 	.word	0x58020c00

08001e70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0b8      	sub	sp, #224	; 0xe0
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	22bc      	movs	r2, #188	; 0xbc
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f008 ff81 	bl	800ad98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2f      	ldr	r2, [pc, #188]	; (8001f58 <HAL_PCD_MspInit+0xe8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d156      	bne.n	8001f4e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ea0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ea4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ea6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 f828 	bl	8004f08 <HAL_RCCEx_PeriphCLKConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001ebe:	f7ff fda5 	bl	8001a0c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001ec2:	f002 f857 	bl	8003f74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_PCD_MspInit+0xec>)
 8001ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ecc:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <HAL_PCD_MspInit+0xec>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_PCD_MspInit+0xec>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001ee4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001efe:	230a      	movs	r3, #10
 8001f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4815      	ldr	r0, [pc, #84]	; (8001f60 <HAL_PCD_MspInit+0xf0>)
 8001f0c:	f001 fccc 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480d      	ldr	r0, [pc, #52]	; (8001f60 <HAL_PCD_MspInit+0xf0>)
 8001f2c:	f001 fcbc 	bl	80038a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_PCD_MspInit+0xec>)
 8001f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_PCD_MspInit+0xec>)
 8001f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_PCD_MspInit+0xec>)
 8001f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f4e:	bf00      	nop
 8001f50:	37e0      	adds	r7, #224	; 0xe0
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40080000 	.word	0x40080000
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58020000 	.word	0x58020000

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <NMI_Handler+0x4>

08001f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler+0x4>

08001f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb0:	f000 f97e 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001fca:	2080      	movs	r0, #128	; 0x80
 8001fcc:	f001 fe35 	bl	8003c3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM2_IRQHandler+0x10>)
 8001fda:	f005 fc1e 	bl	800781a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	24000308 	.word	0x24000308

08001fe8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART3_IRQHandler+0x10>)
 8001fee:	f006 f973 	bl	80082d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	240003a0 	.word	0x240003a0

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f008 fe8a 	bl	800ad44 <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	24080000 	.word	0x24080000
 800205c:	00000400 	.word	0x00000400
 8002060:	24000cc8 	.word	0x24000cc8
 8002064:	24000ce0 	.word	0x24000ce0

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <SystemInit+0xe4>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	4a36      	ldr	r2, [pc, #216]	; (800214c <SystemInit+0xe4>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <SystemInit+0xe8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	2b06      	cmp	r3, #6
 8002086:	d807      	bhi.n	8002098 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <SystemInit+0xe8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 030f 	bic.w	r3, r3, #15
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <SystemInit+0xe8>)
 8002092:	f043 0307 	orr.w	r3, r3, #7
 8002096:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002098:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <SystemInit+0xec>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2d      	ldr	r2, [pc, #180]	; (8002154 <SystemInit+0xec>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <SystemInit+0xec>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <SystemInit+0xec>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4929      	ldr	r1, [pc, #164]	; (8002154 <SystemInit+0xec>)
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <SystemInit+0xf0>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <SystemInit+0xe8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <SystemInit+0xe8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 030f 	bic.w	r3, r3, #15
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <SystemInit+0xe8>)
 80020cc:	f043 0307 	orr.w	r3, r3, #7
 80020d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <SystemInit+0xec>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <SystemInit+0xec>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <SystemInit+0xec>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <SystemInit+0xec>)
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <SystemInit+0xf4>)
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <SystemInit+0xec>)
 80020ec:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <SystemInit+0xf8>)
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <SystemInit+0xec>)
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <SystemInit+0xfc>)
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <SystemInit+0xec>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <SystemInit+0xec>)
 80020fe:	4a19      	ldr	r2, [pc, #100]	; (8002164 <SystemInit+0xfc>)
 8002100:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <SystemInit+0xec>)
 8002104:	2200      	movs	r2, #0
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <SystemInit+0xec>)
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <SystemInit+0xfc>)
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <SystemInit+0xec>)
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <SystemInit+0xec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <SystemInit+0xec>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <SystemInit+0xec>)
 8002122:	2200      	movs	r2, #0
 8002124:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <SystemInit+0x100>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <SystemInit+0x104>)
 800212c:	4013      	ands	r3, r2
 800212e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002132:	d202      	bcs.n	800213a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <SystemInit+0x108>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <SystemInit+0x10c>)
 800213c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002140:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	52002000 	.word	0x52002000
 8002154:	58024400 	.word	0x58024400
 8002158:	eaf6ed7f 	.word	0xeaf6ed7f
 800215c:	02020200 	.word	0x02020200
 8002160:	01ff0000 	.word	0x01ff0000
 8002164:	01010280 	.word	0x01010280
 8002168:	5c001000 	.word	0x5c001000
 800216c:	ffff0000 	.word	0xffff0000
 8002170:	51008108 	.word	0x51008108
 8002174:	52004000 	.word	0x52004000

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800217c:	f7ff ff74 	bl	8002068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a6:	f008 fdd3 	bl	800ad50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7fe fedf 	bl	8000f6c <main>
  bx  lr
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021b8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80021bc:	0800b890 	.word	0x0800b890
  ldr r2, =_sbss
 80021c0:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80021c4:	24000ce0 	.word	0x24000ce0

080021c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC3_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f000 f9a0 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021d8:	f002 fcc0 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_Init+0x68>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	4913      	ldr	r1, [pc, #76]	; (8002238 <HAL_Init+0x6c>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_Init+0x68>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_Init+0x6c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <HAL_Init+0x70>)
 800220e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_Init+0x74>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f814 	bl	8002244 <HAL_InitTick>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e002      	b.n	800222c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002226:	f7ff fbf7 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	58024400 	.word	0x58024400
 8002238:	0800b814 	.word	0x0800b814
 800223c:	24000008 	.word	0x24000008
 8002240:	24000004 	.word	0x24000004

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_InitTick+0x60>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e021      	b.n	800229c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_InitTick+0x64>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_InitTick+0x60>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f985 	bl	800257e <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f000 f94f 	bl	800252e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x68>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	24000010 	.word	0x24000010
 80022a8:	24000004 	.word	0x24000004
 80022ac:	2400000c 	.word	0x2400000c

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	24000010 	.word	0x24000010
 80022d4:	24000ccc 	.word	0x24000ccc

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	24000ccc 	.word	0x24000ccc

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	24000010 	.word	0x24000010

08002338 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetREVID+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0c1b      	lsrs	r3, r3, #16
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	5c001000 	.word	0x5c001000

08002350 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002360:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	58000400 	.word	0x58000400

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	05fa0000 	.word	0x05fa0000

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e4:	d301      	bcc.n	80024ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <SysTick_Config+0x40>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f2:	210f      	movs	r1, #15
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f7ff ff8e 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <SysTick_Config+0x40>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SysTick_Config+0x40>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff29 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff40 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff90 	bl	800246c <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5f 	bl	8002418 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff33 	bl	80023dc <__NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa4 	bl	80024d4 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff fe9a 	bl	80022d8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e2dc      	b.n	8002b6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d008      	beq.n	80025ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e2cd      	b.n	8002b6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a76      	ldr	r2, [pc, #472]	; (80027ac <HAL_DMA_Abort+0x214>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d04a      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a74      	ldr	r2, [pc, #464]	; (80027b0 <HAL_DMA_Abort+0x218>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d045      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a73      	ldr	r2, [pc, #460]	; (80027b4 <HAL_DMA_Abort+0x21c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d040      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a71      	ldr	r2, [pc, #452]	; (80027b8 <HAL_DMA_Abort+0x220>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d03b      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a70      	ldr	r2, [pc, #448]	; (80027bc <HAL_DMA_Abort+0x224>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d036      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6e      	ldr	r2, [pc, #440]	; (80027c0 <HAL_DMA_Abort+0x228>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d031      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6d      	ldr	r2, [pc, #436]	; (80027c4 <HAL_DMA_Abort+0x22c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d02c      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6b      	ldr	r2, [pc, #428]	; (80027c8 <HAL_DMA_Abort+0x230>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d027      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_DMA_Abort+0x234>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d022      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <HAL_DMA_Abort+0x238>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01d      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a67      	ldr	r2, [pc, #412]	; (80027d4 <HAL_DMA_Abort+0x23c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d018      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a65      	ldr	r2, [pc, #404]	; (80027d8 <HAL_DMA_Abort+0x240>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a64      	ldr	r2, [pc, #400]	; (80027dc <HAL_DMA_Abort+0x244>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00e      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a62      	ldr	r2, [pc, #392]	; (80027e0 <HAL_DMA_Abort+0x248>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a61      	ldr	r2, [pc, #388]	; (80027e4 <HAL_DMA_Abort+0x24c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_DMA_Abort+0xd6>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a5f      	ldr	r2, [pc, #380]	; (80027e8 <HAL_DMA_Abort+0x250>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_DMA_Abort+0xda>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_DMA_Abort+0xdc>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 021e 	bic.w	r2, r2, #30
 8002686:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002696:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e00a      	b.n	80026b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 020e 	bic.w	r2, r2, #14
 80026ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3c      	ldr	r2, [pc, #240]	; (80027ac <HAL_DMA_Abort+0x214>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d072      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3a      	ldr	r2, [pc, #232]	; (80027b0 <HAL_DMA_Abort+0x218>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d06d      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <HAL_DMA_Abort+0x21c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d068      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a37      	ldr	r2, [pc, #220]	; (80027b8 <HAL_DMA_Abort+0x220>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d063      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a36      	ldr	r2, [pc, #216]	; (80027bc <HAL_DMA_Abort+0x224>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d05e      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <HAL_DMA_Abort+0x228>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d059      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <HAL_DMA_Abort+0x22c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d054      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a31      	ldr	r2, [pc, #196]	; (80027c8 <HAL_DMA_Abort+0x230>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04f      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a30      	ldr	r2, [pc, #192]	; (80027cc <HAL_DMA_Abort+0x234>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d04a      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <HAL_DMA_Abort+0x238>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d045      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <HAL_DMA_Abort+0x23c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d040      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <HAL_DMA_Abort+0x240>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d03b      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <HAL_DMA_Abort+0x244>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d036      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_DMA_Abort+0x248>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <HAL_DMA_Abort+0x24c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d02c      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <HAL_DMA_Abort+0x250>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d027      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a24      	ldr	r2, [pc, #144]	; (80027ec <HAL_DMA_Abort+0x254>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_DMA_Abort+0x258>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01d      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <HAL_DMA_Abort+0x25c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d018      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_DMA_Abort+0x260>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_DMA_Abort+0x264>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00e      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_DMA_Abort+0x268>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d009      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_DMA_Abort+0x26c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d004      	beq.n	80027a6 <HAL_DMA_Abort+0x20e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_DMA_Abort+0x270>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d132      	bne.n	800280c <HAL_DMA_Abort+0x274>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e031      	b.n	800280e <HAL_DMA_Abort+0x276>
 80027aa:	bf00      	nop
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
 80027ec:	58025408 	.word	0x58025408
 80027f0:	5802541c 	.word	0x5802541c
 80027f4:	58025430 	.word	0x58025430
 80027f8:	58025444 	.word	0x58025444
 80027fc:	58025458 	.word	0x58025458
 8002800:	5802546c 	.word	0x5802546c
 8002804:	58025480 	.word	0x58025480
 8002808:	58025494 	.word	0x58025494
 800280c:	2300      	movs	r3, #0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002820:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6d      	ldr	r2, [pc, #436]	; (80029dc <HAL_DMA_Abort+0x444>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6b      	ldr	r2, [pc, #428]	; (80029e0 <HAL_DMA_Abort+0x448>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_DMA_Abort+0x44c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a68      	ldr	r2, [pc, #416]	; (80029e8 <HAL_DMA_Abort+0x450>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a67      	ldr	r2, [pc, #412]	; (80029ec <HAL_DMA_Abort+0x454>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_DMA_Abort+0x458>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a64      	ldr	r2, [pc, #400]	; (80029f4 <HAL_DMA_Abort+0x45c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a62      	ldr	r2, [pc, #392]	; (80029f8 <HAL_DMA_Abort+0x460>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a61      	ldr	r2, [pc, #388]	; (80029fc <HAL_DMA_Abort+0x464>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5f      	ldr	r2, [pc, #380]	; (8002a00 <HAL_DMA_Abort+0x468>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5e      	ldr	r2, [pc, #376]	; (8002a04 <HAL_DMA_Abort+0x46c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a5c      	ldr	r2, [pc, #368]	; (8002a08 <HAL_DMA_Abort+0x470>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_DMA_Abort+0x474>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a59      	ldr	r2, [pc, #356]	; (8002a10 <HAL_DMA_Abort+0x478>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_DMA_Abort+0x47c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Abort+0x32a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a56      	ldr	r2, [pc, #344]	; (8002a18 <HAL_DMA_Abort+0x480>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d108      	bne.n	80028d4 <HAL_DMA_Abort+0x33c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e007      	b.n	80028e4 <HAL_DMA_Abort+0x34c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028e4:	e013      	b.n	800290e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e6:	f7ff fcf7 	bl	80022d8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d90c      	bls.n	800290e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e12d      	b.n	8002b6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e5      	bne.n	80028e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2f      	ldr	r2, [pc, #188]	; (80029dc <HAL_DMA_Abort+0x444>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d04a      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2d      	ldr	r2, [pc, #180]	; (80029e0 <HAL_DMA_Abort+0x448>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d045      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2c      	ldr	r2, [pc, #176]	; (80029e4 <HAL_DMA_Abort+0x44c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d040      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <HAL_DMA_Abort+0x450>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d03b      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a29      	ldr	r2, [pc, #164]	; (80029ec <HAL_DMA_Abort+0x454>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d036      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <HAL_DMA_Abort+0x458>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d031      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_DMA_Abort+0x45c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d02c      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a24      	ldr	r2, [pc, #144]	; (80029f8 <HAL_DMA_Abort+0x460>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d027      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a23      	ldr	r2, [pc, #140]	; (80029fc <HAL_DMA_Abort+0x464>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <HAL_DMA_Abort+0x468>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01d      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_DMA_Abort+0x46c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d018      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_DMA_Abort+0x470>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <HAL_DMA_Abort+0x474>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00e      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_DMA_Abort+0x478>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_DMA_Abort+0x47c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_DMA_Abort+0x422>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_DMA_Abort+0x480>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Abort+0x426>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_DMA_Abort+0x428>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02b      	beq.n	8002a1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	223f      	movs	r2, #63	; 0x3f
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	e02a      	b.n	8002a32 <HAL_DMA_Abort+0x49a>
 80029dc:	40020010 	.word	0x40020010
 80029e0:	40020028 	.word	0x40020028
 80029e4:	40020040 	.word	0x40020040
 80029e8:	40020058 	.word	0x40020058
 80029ec:	40020070 	.word	0x40020070
 80029f0:	40020088 	.word	0x40020088
 80029f4:	400200a0 	.word	0x400200a0
 80029f8:	400200b8 	.word	0x400200b8
 80029fc:	40020410 	.word	0x40020410
 8002a00:	40020428 	.word	0x40020428
 8002a04:	40020440 	.word	0x40020440
 8002a08:	40020458 	.word	0x40020458
 8002a0c:	40020470 	.word	0x40020470
 8002a10:	40020488 	.word	0x40020488
 8002a14:	400204a0 	.word	0x400204a0
 8002a18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <HAL_DMA_Abort+0x5dc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d072      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4d      	ldr	r2, [pc, #308]	; (8002b78 <HAL_DMA_Abort+0x5e0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d06d      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a4c      	ldr	r2, [pc, #304]	; (8002b7c <HAL_DMA_Abort+0x5e4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d068      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_DMA_Abort+0x5e8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d063      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_DMA_Abort+0x5ec>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d05e      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a47      	ldr	r2, [pc, #284]	; (8002b88 <HAL_DMA_Abort+0x5f0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d059      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a46      	ldr	r2, [pc, #280]	; (8002b8c <HAL_DMA_Abort+0x5f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d054      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a44      	ldr	r2, [pc, #272]	; (8002b90 <HAL_DMA_Abort+0x5f8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04f      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a43      	ldr	r2, [pc, #268]	; (8002b94 <HAL_DMA_Abort+0x5fc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d04a      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a41      	ldr	r2, [pc, #260]	; (8002b98 <HAL_DMA_Abort+0x600>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d045      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <HAL_DMA_Abort+0x604>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d040      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3e      	ldr	r2, [pc, #248]	; (8002ba0 <HAL_DMA_Abort+0x608>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d03b      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3d      	ldr	r2, [pc, #244]	; (8002ba4 <HAL_DMA_Abort+0x60c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d036      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_DMA_Abort+0x610>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d031      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <HAL_DMA_Abort+0x614>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d02c      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <HAL_DMA_Abort+0x618>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d027      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a37      	ldr	r2, [pc, #220]	; (8002bb4 <HAL_DMA_Abort+0x61c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d022      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <HAL_DMA_Abort+0x620>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01d      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_DMA_Abort+0x624>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d018      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <HAL_DMA_Abort+0x628>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_DMA_Abort+0x62c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00e      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <HAL_DMA_Abort+0x630>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2e      	ldr	r2, [pc, #184]	; (8002bcc <HAL_DMA_Abort+0x634>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d004      	beq.n	8002b22 <HAL_DMA_Abort+0x58a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <HAL_DMA_Abort+0x638>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_DMA_Abort+0x58e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_DMA_Abort+0x590>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
 8002bb4:	58025408 	.word	0x58025408
 8002bb8:	5802541c 	.word	0x5802541c
 8002bbc:	58025430 	.word	0x58025430
 8002bc0:	58025444 	.word	0x58025444
 8002bc4:	58025458 	.word	0x58025458
 8002bc8:	5802546c 	.word	0x5802546c
 8002bcc:	58025480 	.word	0x58025480
 8002bd0:	58025494 	.word	0x58025494

08002bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e237      	b.n	8003056 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e22c      	b.n	8003056 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5c      	ldr	r2, [pc, #368]	; (8002d74 <HAL_DMA_Abort_IT+0x1a0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d04a      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	; (8002d78 <HAL_DMA_Abort_IT+0x1a4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d045      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a59      	ldr	r2, [pc, #356]	; (8002d7c <HAL_DMA_Abort_IT+0x1a8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d040      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_DMA_Abort_IT+0x1ac>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d03b      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_DMA_Abort_IT+0x1b0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d036      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a55      	ldr	r2, [pc, #340]	; (8002d88 <HAL_DMA_Abort_IT+0x1b4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d031      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a53      	ldr	r2, [pc, #332]	; (8002d8c <HAL_DMA_Abort_IT+0x1b8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02c      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_DMA_Abort_IT+0x1bc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d027      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_DMA_Abort_IT+0x1c0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d022      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a4f      	ldr	r2, [pc, #316]	; (8002d98 <HAL_DMA_Abort_IT+0x1c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d01d      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4d      	ldr	r2, [pc, #308]	; (8002d9c <HAL_DMA_Abort_IT+0x1c8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <HAL_DMA_Abort_IT+0x1cc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4a      	ldr	r2, [pc, #296]	; (8002da4 <HAL_DMA_Abort_IT+0x1d0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00e      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_DMA_Abort_IT+0x1d4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a47      	ldr	r2, [pc, #284]	; (8002dac <HAL_DMA_Abort_IT+0x1d8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xc8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a46      	ldr	r2, [pc, #280]	; (8002db0 <HAL_DMA_Abort_IT+0x1dc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d101      	bne.n	8002ca0 <HAL_DMA_Abort_IT+0xcc>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xce>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8086 	beq.w	8002db4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2204      	movs	r2, #4
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_DMA_Abort_IT+0x1a0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d04a      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2e      	ldr	r2, [pc, #184]	; (8002d78 <HAL_DMA_Abort_IT+0x1a4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d045      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <HAL_DMA_Abort_IT+0x1a8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d040      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <HAL_DMA_Abort_IT+0x1ac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d03b      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_DMA_Abort_IT+0x1b0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d036      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <HAL_DMA_Abort_IT+0x1b4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d031      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <HAL_DMA_Abort_IT+0x1b8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02c      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <HAL_DMA_Abort_IT+0x1bc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d027      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a23      	ldr	r2, [pc, #140]	; (8002d94 <HAL_DMA_Abort_IT+0x1c0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d022      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <HAL_DMA_Abort_IT+0x1c4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d01d      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <HAL_DMA_Abort_IT+0x1c8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d018      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_DMA_Abort_IT+0x1cc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_DMA_Abort_IT+0x1d0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_DMA_Abort_IT+0x1d4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_DMA_Abort_IT+0x1d8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x17c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_DMA_Abort_IT+0x1dc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d108      	bne.n	8002d62 <HAL_DMA_Abort_IT+0x18e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e178      	b.n	8003054 <HAL_DMA_Abort_IT+0x480>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e16f      	b.n	8003054 <HAL_DMA_Abort_IT+0x480>
 8002d74:	40020010 	.word	0x40020010
 8002d78:	40020028 	.word	0x40020028
 8002d7c:	40020040 	.word	0x40020040
 8002d80:	40020058 	.word	0x40020058
 8002d84:	40020070 	.word	0x40020070
 8002d88:	40020088 	.word	0x40020088
 8002d8c:	400200a0 	.word	0x400200a0
 8002d90:	400200b8 	.word	0x400200b8
 8002d94:	40020410 	.word	0x40020410
 8002d98:	40020428 	.word	0x40020428
 8002d9c:	40020440 	.word	0x40020440
 8002da0:	40020458 	.word	0x40020458
 8002da4:	40020470 	.word	0x40020470
 8002da8:	40020488 	.word	0x40020488
 8002dac:	400204a0 	.word	0x400204a0
 8002db0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 020e 	bic.w	r2, r2, #14
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6c      	ldr	r2, [pc, #432]	; (8002f7c <HAL_DMA_Abort_IT+0x3a8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6b      	ldr	r2, [pc, #428]	; (8002f80 <HAL_DMA_Abort_IT+0x3ac>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d045      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a69      	ldr	r2, [pc, #420]	; (8002f84 <HAL_DMA_Abort_IT+0x3b0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d040      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a68      	ldr	r2, [pc, #416]	; (8002f88 <HAL_DMA_Abort_IT+0x3b4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03b      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a66      	ldr	r2, [pc, #408]	; (8002f8c <HAL_DMA_Abort_IT+0x3b8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a65      	ldr	r2, [pc, #404]	; (8002f90 <HAL_DMA_Abort_IT+0x3bc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d031      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a63      	ldr	r2, [pc, #396]	; (8002f94 <HAL_DMA_Abort_IT+0x3c0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02c      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a62      	ldr	r2, [pc, #392]	; (8002f98 <HAL_DMA_Abort_IT+0x3c4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d027      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a60      	ldr	r2, [pc, #384]	; (8002f9c <HAL_DMA_Abort_IT+0x3c8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5f      	ldr	r2, [pc, #380]	; (8002fa0 <HAL_DMA_Abort_IT+0x3cc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01d      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_DMA_Abort_IT+0x3d0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5c      	ldr	r2, [pc, #368]	; (8002fa8 <HAL_DMA_Abort_IT+0x3d4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5a      	ldr	r2, [pc, #360]	; (8002fac <HAL_DMA_Abort_IT+0x3d8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a59      	ldr	r2, [pc, #356]	; (8002fb0 <HAL_DMA_Abort_IT+0x3dc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a57      	ldr	r2, [pc, #348]	; (8002fb4 <HAL_DMA_Abort_IT+0x3e0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x290>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_DMA_Abort_IT+0x3e4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <HAL_DMA_Abort_IT+0x2a2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e007      	b.n	8002e86 <HAL_DMA_Abort_IT+0x2b2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a3c      	ldr	r2, [pc, #240]	; (8002f7c <HAL_DMA_Abort_IT+0x3a8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d072      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <HAL_DMA_Abort_IT+0x3ac>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d06d      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_DMA_Abort_IT+0x3b0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d068      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <HAL_DMA_Abort_IT+0x3b4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d063      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a36      	ldr	r2, [pc, #216]	; (8002f8c <HAL_DMA_Abort_IT+0x3b8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d05e      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <HAL_DMA_Abort_IT+0x3bc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d059      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_DMA_Abort_IT+0x3c0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d054      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_DMA_Abort_IT+0x3c4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04f      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_DMA_Abort_IT+0x3c8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d04a      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <HAL_DMA_Abort_IT+0x3cc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d045      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_DMA_Abort_IT+0x3d0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d040      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_DMA_Abort_IT+0x3d4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d03b      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <HAL_DMA_Abort_IT+0x3d8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d036      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_DMA_Abort_IT+0x3dc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_DMA_Abort_IT+0x3e0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d02c      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_DMA_Abort_IT+0x3e4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d027      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_DMA_Abort_IT+0x3e8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_DMA_Abort_IT+0x3ec>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <HAL_DMA_Abort_IT+0x3f0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_DMA_Abort_IT+0x3f4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_DMA_Abort_IT+0x3f8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <HAL_DMA_Abort_IT+0x3fc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <HAL_DMA_Abort_IT+0x400>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x3a2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_DMA_Abort_IT+0x404>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d132      	bne.n	8002fdc <HAL_DMA_Abort_IT+0x408>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e031      	b.n	8002fde <HAL_DMA_Abort_IT+0x40a>
 8002f7a:	bf00      	nop
 8002f7c:	40020010 	.word	0x40020010
 8002f80:	40020028 	.word	0x40020028
 8002f84:	40020040 	.word	0x40020040
 8002f88:	40020058 	.word	0x40020058
 8002f8c:	40020070 	.word	0x40020070
 8002f90:	40020088 	.word	0x40020088
 8002f94:	400200a0 	.word	0x400200a0
 8002f98:	400200b8 	.word	0x400200b8
 8002f9c:	40020410 	.word	0x40020410
 8002fa0:	40020428 	.word	0x40020428
 8002fa4:	40020440 	.word	0x40020440
 8002fa8:	40020458 	.word	0x40020458
 8002fac:	40020470 	.word	0x40020470
 8002fb0:	40020488 	.word	0x40020488
 8002fb4:	400204a0 	.word	0x400204a0
 8002fb8:	400204b8 	.word	0x400204b8
 8002fbc:	58025408 	.word	0x58025408
 8002fc0:	5802541c 	.word	0x5802541c
 8002fc4:	58025430 	.word	0x58025430
 8002fc8:	58025444 	.word	0x58025444
 8002fcc:	58025458 	.word	0x58025458
 8002fd0:	5802546c 	.word	0x5802546c
 8002fd4:	58025480 	.word	0x58025480
 8002fd8:	58025494 	.word	0x58025494
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d028      	beq.n	8003034 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003010:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00c      	beq.n	8003034 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003028:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003032:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop

08003060 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0cf      	b.n	8003212 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2223      	movs	r2, #35	; 0x23
 8003080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fe fcef 	bl	8001a68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_ETH_Init+0x1bc>)
 800308c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003090:	4a62      	ldr	r2, [pc, #392]	; (800321c <HAL_ETH_Init+0x1bc>)
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800309a:	4b60      	ldr	r3, [pc, #384]	; (800321c <HAL_ETH_Init+0x1bc>)
 800309c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7a1b      	ldrb	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d103      	bne.n	80030b8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7ff f94d 	bl	8002350 <HAL_SYSCFG_ETHInterfaceSelect>
 80030b6:	e003      	b.n	80030c0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80030b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80030bc:	f7ff f948 	bl	8002350 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80030c0:	4b57      	ldr	r3, [pc, #348]	; (8003220 <HAL_ETH_Init+0x1c0>)
 80030c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7ff f8fc 	bl	80022d8 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80030e2:	e011      	b.n	8003108 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80030e4:	f7ff f8f8 	bl	80022d8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030f2:	d909      	bls.n	8003108 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2204      	movs	r2, #4
 80030f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	22e0      	movs	r2, #224	; 0xe0
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e084      	b.n	8003212 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e4      	bne.n	80030e4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f886 	bl	800322c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003120:	f001 fe96 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8003124:	4603      	mov	r3, r0
 8003126:	4a3f      	ldr	r2, [pc, #252]	; (8003224 <HAL_ETH_Init+0x1c4>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	0c9a      	lsrs	r2, r3, #18
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3a01      	subs	r2, #1
 8003134:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fa71 	bl	8003620 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800314a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800315a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	22e0      	movs	r2, #224	; 0xe0
 8003176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e049      	b.n	8003212 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003186:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_ETH_Init+0x1c8>)
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6952      	ldr	r2, [r2, #20]
 8003192:	0051      	lsls	r1, r2, #1
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	430b      	orrs	r3, r1
 800319a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800319e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fad9 	bl	800375a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb1f 	bl	80037ec <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	3305      	adds	r3, #5
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	021a      	lsls	r2, r3, #8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	3303      	adds	r3, #3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	061a      	lsls	r2, r3, #24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	3302      	adds	r3, #2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	3301      	adds	r3, #1
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2210      	movs	r2, #16
 800320c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	58024400 	.word	0x58024400
 8003220:	58000400 	.word	0x58000400
 8003224:	431bde83 	.word	0x431bde83
 8003228:	ffff8001 	.word	0xffff8001

0800322c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800323c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003244:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003246:	f001 fe03 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 800324a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d908      	bls.n	8003266 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d804      	bhi.n	8003266 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e027      	b.n	80032b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d908      	bls.n	8003280 <HAL_ETH_SetMDIOClockRange+0x54>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d204      	bcs.n	8003280 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e01a      	b.n	80032b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d303      	bcc.n	8003290 <HAL_ETH_SetMDIOClockRange+0x64>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d911      	bls.n	80032b4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d908      	bls.n	80032aa <HAL_ETH_SetMDIOClockRange+0x7e>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d804      	bhi.n	80032aa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e005      	b.n	80032b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e000      	b.n	80032b6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80032b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	01312cff 	.word	0x01312cff
 80032cc:	02160ebf 	.word	0x02160ebf
 80032d0:	03938700 	.word	0x03938700
 80032d4:	05f5e0ff 	.word	0x05f5e0ff
 80032d8:	08f0d17f 	.word	0x08f0d17f

080032dc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80032ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80032f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	7b1b      	ldrb	r3, [r3, #12]
 80032fc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80032fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	7b5b      	ldrb	r3, [r3, #13]
 8003304:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	7b9b      	ldrb	r3, [r3, #14]
 800330c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800330e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	7bdb      	ldrb	r3, [r3, #15]
 8003314:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003316:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	7c12      	ldrb	r2, [r2, #16]
 800331c:	2a00      	cmp	r2, #0
 800331e:	d102      	bne.n	8003326 <ETH_SetMACConfig+0x4a>
 8003320:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003324:	e000      	b.n	8003328 <ETH_SetMACConfig+0x4c>
 8003326:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003328:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	7c52      	ldrb	r2, [r2, #17]
 800332e:	2a00      	cmp	r2, #0
 8003330:	d102      	bne.n	8003338 <ETH_SetMACConfig+0x5c>
 8003332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003336:	e000      	b.n	800333a <ETH_SetMACConfig+0x5e>
 8003338:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800333a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	7c9b      	ldrb	r3, [r3, #18]
 8003340:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003342:	431a      	orrs	r2, r3
               macconf->Speed |
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003348:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800334e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	7f1b      	ldrb	r3, [r3, #28]
 8003354:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003356:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	7f5b      	ldrb	r3, [r3, #29]
 800335c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800335e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	7f92      	ldrb	r2, [r2, #30]
 8003364:	2a00      	cmp	r2, #0
 8003366:	d102      	bne.n	800336e <ETH_SetMACConfig+0x92>
 8003368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336c:	e000      	b.n	8003370 <ETH_SetMACConfig+0x94>
 800336e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003370:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	7fdb      	ldrb	r3, [r3, #31]
 8003376:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003378:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003380:	2a00      	cmp	r2, #0
 8003382:	d102      	bne.n	800338a <ETH_SetMACConfig+0xae>
 8003384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003388:	e000      	b.n	800338c <ETH_SetMACConfig+0xb0>
 800338a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800338c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003392:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800339a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800339c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b56      	ldr	r3, [pc, #344]	; (8003508 <ETH_SetMACConfig+0x22c>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033d0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80033d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033da:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80033dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80033e4:	2a00      	cmp	r2, #0
 80033e6:	d102      	bne.n	80033ee <ETH_SetMACConfig+0x112>
 80033e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033ec:	e000      	b.n	80033f0 <ETH_SetMACConfig+0x114>
 80033ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80033f0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4b42      	ldr	r3, [pc, #264]	; (800350c <ETH_SetMACConfig+0x230>)
 8003402:	4013      	ands	r3, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	68f9      	ldr	r1, [r7, #12]
 800340a:	430b      	orrs	r3, r1
 800340c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003414:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <ETH_SetMACConfig+0x234>)
 8003426:	4013      	ands	r3, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003438:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800343e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003446:	2a00      	cmp	r2, #0
 8003448:	d101      	bne.n	800344e <ETH_SetMACConfig+0x172>
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	e000      	b.n	8003450 <ETH_SetMACConfig+0x174>
 800344e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003450:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003462:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003466:	4013      	ands	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	430b      	orrs	r3, r1
 8003470:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003478:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003480:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f023 0103 	bic.w	r1, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	430a      	orrs	r2, r1
 800349a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80034a6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	d101      	bne.n	80034ca <ETH_SetMACConfig+0x1ee>
 80034c6:	2240      	movs	r2, #64	; 0x40
 80034c8:	e000      	b.n	80034cc <ETH_SetMACConfig+0x1f0>
 80034ca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80034cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80034d4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80034de:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80034ec:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	00048083 	.word	0x00048083
 800350c:	c0f88000 	.word	0xc0f88000
 8003510:	fffffef0 	.word	0xfffffef0

08003514 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <ETH_SetDMAConfig+0xf8>)
 800352a:	4013      	ands	r3, r2
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	6811      	ldr	r1, [r2, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800353a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	791b      	ldrb	r3, [r3, #4]
 8003540:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003546:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	7b1b      	ldrb	r3, [r3, #12]
 800354c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <ETH_SetDMAConfig+0xfc>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	68f9      	ldr	r1, [r7, #12]
 8003566:	430b      	orrs	r3, r1
 8003568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800356c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	7b5b      	ldrb	r3, [r3, #13]
 8003572:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <ETH_SetDMAConfig+0x100>)
 800358a:	4013      	ands	r3, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	430b      	orrs	r3, r1
 8003594:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003598:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	7d1b      	ldrb	r3, [r3, #20]
 80035a4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80035a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	7f5b      	ldrb	r3, [r3, #29]
 80035ac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80035be:	4b16      	ldr	r3, [pc, #88]	; (8003618 <ETH_SetDMAConfig+0x104>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035ce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	7f1b      	ldrb	r3, [r3, #28]
 80035d6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <ETH_SetDMAConfig+0x108>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	68f9      	ldr	r1, [r7, #12]
 80035f6:	430b      	orrs	r3, r1
 80035f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035fc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	ffff87fd 	.word	0xffff87fd
 8003610:	ffff2ffe 	.word	0xffff2ffe
 8003614:	fffec000 	.word	0xfffec000
 8003618:	ffc0efef 	.word	0xffc0efef
 800361c:	7fc0ffff 	.word	0x7fc0ffff

08003620 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b0a4      	sub	sp, #144	; 0x90
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800362e:	2300      	movs	r3, #0
 8003630:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800365c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003668:	2300      	movs	r3, #0
 800366a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003678:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800367c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003684:	2300      	movs	r3, #0
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800369a:	2300      	movs	r3, #0
 800369c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800369e:	2300      	movs	r3, #0
 80036a0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80036a2:	2300      	movs	r3, #0
 80036a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80036b8:	2320      	movs	r3, #32
 80036ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80036ca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80036d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036d4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80036dc:	2302      	movs	r3, #2
 80036de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80036fa:	2300      	movs	r3, #0
 80036fc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fde6 	bl	80032dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003710:	2301      	movs	r3, #1
 8003712:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003714:	2301      	movs	r3, #1
 8003716:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003722:	2300      	movs	r3, #0
 8003724:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800372a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800372e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003730:	2300      	movs	r3, #0
 8003732:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003734:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003738:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003740:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003746:	f107 0308 	add.w	r3, r7, #8
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fee1 	bl	8003514 <ETH_SetDMAConfig>
}
 8003752:	bf00      	nop
 8003754:	3790      	adds	r7, #144	; 0x90
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e01d      	b.n	80037a4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68d9      	ldr	r1, [r3, #12]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2200      	movs	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	3206      	adds	r2, #6
 800379a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3301      	adds	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d9de      	bls.n	8003768 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b8:	461a      	mov	r2, r3
 80037ba:	2303      	movs	r3, #3
 80037bc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037dc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e023      	b.n	8003842 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6919      	ldr	r1, [r3, #16]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	3212      	adds	r2, #18
 8003838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d9d8      	bls.n	80037fa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386e:	461a      	mov	r2, r3
 8003870:	2303      	movs	r3, #3
 8003872:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003896:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038b6:	4b89      	ldr	r3, [pc, #548]	; (8003adc <HAL_GPIO_Init+0x234>)
 80038b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ba:	e194      	b.n	8003be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8186 	beq.w	8003be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d005      	beq.n	80038ec <HAL_GPIO_Init+0x44>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d130      	bne.n	800394e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003922:	2201      	movs	r2, #1
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0201 	and.w	r2, r3, #1
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b03      	cmp	r3, #3
 8003958:	d017      	beq.n	800398a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	2203      	movs	r2, #3
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d123      	bne.n	80039de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	220f      	movs	r2, #15
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	08da      	lsrs	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3208      	adds	r2, #8
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80e0 	beq.w	8003be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a20:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <HAL_GPIO_Init+0x238>)
 8003a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a26:	4a2e      	ldr	r2, [pc, #184]	; (8003ae0 <HAL_GPIO_Init+0x238>)
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_GPIO_Init+0x238>)
 8003a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3e:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <HAL_GPIO_Init+0x23c>)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	3302      	adds	r3, #2
 8003a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <HAL_GPIO_Init+0x240>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d052      	beq.n	8003b10 <HAL_GPIO_Init+0x268>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <HAL_GPIO_Init+0x244>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d031      	beq.n	8003ad6 <HAL_GPIO_Init+0x22e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <HAL_GPIO_Init+0x248>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02b      	beq.n	8003ad2 <HAL_GPIO_Init+0x22a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_GPIO_Init+0x24c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d025      	beq.n	8003ace <HAL_GPIO_Init+0x226>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <HAL_GPIO_Init+0x250>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01f      	beq.n	8003aca <HAL_GPIO_Init+0x222>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_GPIO_Init+0x254>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d019      	beq.n	8003ac6 <HAL_GPIO_Init+0x21e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_GPIO_Init+0x258>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_GPIO_Init+0x21a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_GPIO_Init+0x25c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00d      	beq.n	8003abe <HAL_GPIO_Init+0x216>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <HAL_GPIO_Init+0x260>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <HAL_GPIO_Init+0x212>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_GPIO_Init+0x264>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_GPIO_Init+0x20e>
 8003ab2:	2309      	movs	r3, #9
 8003ab4:	e02d      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ab6:	230a      	movs	r3, #10
 8003ab8:	e02b      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003aba:	2308      	movs	r3, #8
 8003abc:	e029      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003abe:	2307      	movs	r3, #7
 8003ac0:	e027      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ac2:	2306      	movs	r3, #6
 8003ac4:	e025      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	e023      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003aca:	2304      	movs	r3, #4
 8003acc:	e021      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e01f      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e01d      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e01b      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ada:	bf00      	nop
 8003adc:	58000080 	.word	0x58000080
 8003ae0:	58024400 	.word	0x58024400
 8003ae4:	58000400 	.word	0x58000400
 8003ae8:	58020000 	.word	0x58020000
 8003aec:	58020400 	.word	0x58020400
 8003af0:	58020800 	.word	0x58020800
 8003af4:	58020c00 	.word	0x58020c00
 8003af8:	58021000 	.word	0x58021000
 8003afc:	58021400 	.word	0x58021400
 8003b00:	58021800 	.word	0x58021800
 8003b04:	58021c00 	.word	0x58021c00
 8003b08:	58022000 	.word	0x58022000
 8003b0c:	58022400 	.word	0x58022400
 8003b10:	2300      	movs	r3, #0
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	f002 0203 	and.w	r2, r2, #3
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	4093      	lsls	r3, r2
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b22:	4938      	ldr	r1, [pc, #224]	; (8003c04 <HAL_GPIO_Init+0x35c>)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	3302      	adds	r3, #2
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f47f ae63 	bne.w	80038bc <HAL_GPIO_Init+0x14>
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	3724      	adds	r7, #36	; 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	58000400 	.word	0x58000400

08003c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
 8003c14:	4613      	mov	r3, r2
 8003c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c18:	787b      	ldrb	r3, [r7, #1]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c24:	e003      	b.n	8003c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	041a      	lsls	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	619a      	str	r2, [r3, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fd fd6b 	bl	800173c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c70:	b08f      	sub	sp, #60	; 0x3c
 8003c72:	af0a      	add	r7, sp, #40	; 0x28
 8003c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e116      	b.n	8003eae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fe f8e8 	bl	8001e70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f006 fda4 	bl	800a80c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	687e      	ldr	r6, [r7, #4]
 8003ccc:	466d      	mov	r5, sp
 8003cce:	f106 0410 	add.w	r4, r6, #16
 8003cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce2:	1d33      	adds	r3, r6, #4
 8003ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f006 fd22 	bl	800a730 <USB_CoreInit>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0d7      	b.n	8003eae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f006 fd92 	bl	800a82e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
 8003d0e:	e04a      	b.n	8003da6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	333d      	adds	r3, #61	; 0x3d
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d24:	7bfa      	ldrb	r2, [r7, #15]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	333c      	adds	r3, #60	; 0x3c
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	b298      	uxth	r0, r3
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3344      	adds	r3, #68	; 0x44
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3340      	adds	r3, #64	; 0x40
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3348      	adds	r3, #72	; 0x48
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	334c      	adds	r3, #76	; 0x4c
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3354      	adds	r3, #84	; 0x54
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	3301      	adds	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d3af      	bcc.n	8003d10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	e044      	b.n	8003e40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003dde:	7bfa      	ldrb	r2, [r7, #15]
 8003de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d3b5      	bcc.n	8003db6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	687e      	ldr	r6, [r7, #4]
 8003e52:	466d      	mov	r5, sp
 8003e54:	f106 0410 	add.w	r4, r6, #16
 8003e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e64:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e68:	1d33      	adds	r3, r6, #4
 8003e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6c:	6838      	ldr	r0, [r7, #0]
 8003e6e:	f006 fd2b 	bl	800a8c8 <USB_DevInit>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e014      	b.n	8003eae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f80b 	bl	8003eb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f006 fee9 	bl	800ac7e <USB_DevDisconnect>

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003eb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_PCDEx_ActivateLPM+0x44>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	10000003 	.word	0x10000003

08003f00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d00a      	beq.n	8003f2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e01f      	b.n	8003f66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e01d      	b.n	8003f66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	490f      	ldr	r1, [pc, #60]	; (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f3a:	f7fe f9cd 	bl	80022d8 <HAL_GetTick>
 8003f3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f40:	e009      	b.n	8003f56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f42:	f7fe f9c9 	bl	80022d8 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f50:	d901      	bls.n	8003f56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e007      	b.n	8003f66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	d1ee      	bne.n	8003f42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	58024800 	.word	0x58024800

08003f74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f82:	60d3      	str	r3, [r2, #12]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	58024800 	.word	0x58024800

08003f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f000 bc1d 	b.w	80047e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8087 	beq.w	80040c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb6:	4b99      	ldr	r3, [pc, #612]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fc0:	4b96      	ldr	r3, [pc, #600]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d007      	beq.n	8003fdc <HAL_RCC_OscConfig+0x48>
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2b18      	cmp	r3, #24
 8003fd0:	d110      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x60>
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d10b      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	4b8f      	ldr	r3, [pc, #572]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d06c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x12e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d168      	bne.n	80040c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e3f6      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_OscConfig+0x78>
 8003ffe:	4b87      	ldr	r3, [pc, #540]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a86      	ldr	r2, [pc, #536]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e02e      	b.n	800406a <HAL_RCC_OscConfig+0xd6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x9a>
 8004014:	4b81      	ldr	r3, [pc, #516]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a80      	ldr	r2, [pc, #512]	; (800421c <HAL_RCC_OscConfig+0x288>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b7e      	ldr	r3, [pc, #504]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a7d      	ldr	r2, [pc, #500]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e01d      	b.n	800406a <HAL_RCC_OscConfig+0xd6>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004036:	d10c      	bne.n	8004052 <HAL_RCC_OscConfig+0xbe>
 8004038:	4b78      	ldr	r3, [pc, #480]	; (800421c <HAL_RCC_OscConfig+0x288>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_RCC_OscConfig+0x288>)
 800403e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b75      	ldr	r3, [pc, #468]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a74      	ldr	r2, [pc, #464]	; (800421c <HAL_RCC_OscConfig+0x288>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e00b      	b.n	800406a <HAL_RCC_OscConfig+0xd6>
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a71      	ldr	r2, [pc, #452]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6e      	ldr	r2, [pc, #440]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d013      	beq.n	800409a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fe f931 	bl	80022d8 <HAL_GetTick>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800407a:	f7fe f92d 	bl	80022d8 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b64      	cmp	r3, #100	; 0x64
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e3aa      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800408c:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_OscConfig+0x288>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0xe6>
 8004098:	e014      	b.n	80040c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fe f91d 	bl	80022d8 <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a2:	f7fe f919 	bl	80022d8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b64      	cmp	r3, #100	; 0x64
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e396      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_OscConfig+0x10e>
 80040c0:	e000      	b.n	80040c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80cb 	beq.w	8004268 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d2:	4b52      	ldr	r3, [pc, #328]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_RCC_OscConfig+0x164>
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b18      	cmp	r3, #24
 80040ec:	d156      	bne.n	800419c <HAL_RCC_OscConfig+0x208>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d151      	bne.n	800419c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f8:	4b48      	ldr	r3, [pc, #288]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x17c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e368      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004110:	4b42      	ldr	r3, [pc, #264]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 0219 	bic.w	r2, r3, #25
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	493f      	ldr	r1, [pc, #252]	; (800421c <HAL_RCC_OscConfig+0x288>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004122:	f7fe f8d9 	bl	80022d8 <HAL_GetTick>
 8004126:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412a:	f7fe f8d5 	bl	80022d8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e352      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800413c:	4b37      	ldr	r3, [pc, #220]	; (800421c <HAL_RCC_OscConfig+0x288>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	f7fe f8f6 	bl	8002338 <HAL_GetREVID>
 800414c:	4603      	mov	r3, r0
 800414e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004152:	4293      	cmp	r3, r2
 8004154:	d817      	bhi.n	8004186 <HAL_RCC_OscConfig+0x1f2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d108      	bne.n	8004170 <HAL_RCC_OscConfig+0x1dc>
 800415e:	4b2f      	ldr	r3, [pc, #188]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004166:	4a2d      	ldr	r2, [pc, #180]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416e:	e07b      	b.n	8004268 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	031b      	lsls	r3, r3, #12
 800417e:	4927      	ldr	r1, [pc, #156]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004184:	e070      	b.n	8004268 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	4921      	ldr	r1, [pc, #132]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800419a:	e065      	b.n	8004268 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d048      	beq.n	8004236 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041a4:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 0219 	bic.w	r2, r3, #25
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	491a      	ldr	r1, [pc, #104]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fe f88f 	bl	80022d8 <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041be:	f7fe f88b 	bl	80022d8 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e308      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	f7fe f8ac 	bl	8002338 <HAL_GetREVID>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d81a      	bhi.n	8004220 <HAL_RCC_OscConfig+0x28c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d108      	bne.n	8004204 <HAL_RCC_OscConfig+0x270>
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041fa:	4a08      	ldr	r2, [pc, #32]	; (800421c <HAL_RCC_OscConfig+0x288>)
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004200:	6053      	str	r3, [r2, #4]
 8004202:	e031      	b.n	8004268 <HAL_RCC_OscConfig+0x2d4>
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	4902      	ldr	r1, [pc, #8]	; (800421c <HAL_RCC_OscConfig+0x288>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	e026      	b.n	8004268 <HAL_RCC_OscConfig+0x2d4>
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400
 8004220:	4b9a      	ldr	r3, [pc, #616]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	061b      	lsls	r3, r3, #24
 800422e:	4997      	ldr	r1, [pc, #604]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	e018      	b.n	8004268 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004236:	4b95      	ldr	r3, [pc, #596]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a94      	ldr	r2, [pc, #592]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fe f849 	bl	80022d8 <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424a:	f7fe f845 	bl	80022d8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e2c2      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800425c:	4b8b      	ldr	r3, [pc, #556]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80a9 	beq.w	80043c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004276:	4b85      	ldr	r3, [pc, #532]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800427e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004280:	4b82      	ldr	r3, [pc, #520]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d007      	beq.n	800429c <HAL_RCC_OscConfig+0x308>
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b18      	cmp	r3, #24
 8004290:	d13a      	bne.n	8004308 <HAL_RCC_OscConfig+0x374>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d135      	bne.n	8004308 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800429c:	4b7b      	ldr	r3, [pc, #492]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_OscConfig+0x320>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e296      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042b4:	f7fe f840 	bl	8002338 <HAL_GetREVID>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80042be:	4293      	cmp	r3, r2
 80042c0:	d817      	bhi.n	80042f2 <HAL_RCC_OscConfig+0x35e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d108      	bne.n	80042dc <HAL_RCC_OscConfig+0x348>
 80042ca:	4b70      	ldr	r3, [pc, #448]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042d2:	4a6e      	ldr	r2, [pc, #440]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80042d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042da:	e075      	b.n	80043c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042dc:	4b6b      	ldr	r3, [pc, #428]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	069b      	lsls	r3, r3, #26
 80042ea:	4968      	ldr	r1, [pc, #416]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042f0:	e06a      	b.n	80043c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042f2:	4b66      	ldr	r3, [pc, #408]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	4962      	ldr	r1, [pc, #392]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004302:	4313      	orrs	r3, r2
 8004304:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004306:	e05f      	b.n	80043c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d042      	beq.n	8004396 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004310:	4b5e      	ldr	r3, [pc, #376]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a5d      	ldr	r2, [pc, #372]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fd ffdc 	bl	80022d8 <HAL_GetTick>
 8004320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004324:	f7fd ffd8 	bl	80022d8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e255      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004336:	4b55      	ldr	r3, [pc, #340]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004342:	f7fd fff9 	bl	8002338 <HAL_GetREVID>
 8004346:	4603      	mov	r3, r0
 8004348:	f241 0203 	movw	r2, #4099	; 0x1003
 800434c:	4293      	cmp	r3, r2
 800434e:	d817      	bhi.n	8004380 <HAL_RCC_OscConfig+0x3ec>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	2b20      	cmp	r3, #32
 8004356:	d108      	bne.n	800436a <HAL_RCC_OscConfig+0x3d6>
 8004358:	4b4c      	ldr	r3, [pc, #304]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004360:	4a4a      	ldr	r2, [pc, #296]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004366:	6053      	str	r3, [r2, #4]
 8004368:	e02e      	b.n	80043c8 <HAL_RCC_OscConfig+0x434>
 800436a:	4b48      	ldr	r3, [pc, #288]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	069b      	lsls	r3, r3, #26
 8004378:	4944      	ldr	r1, [pc, #272]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
 800437e:	e023      	b.n	80043c8 <HAL_RCC_OscConfig+0x434>
 8004380:	4b42      	ldr	r3, [pc, #264]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	493f      	ldr	r1, [pc, #252]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004390:	4313      	orrs	r3, r2
 8004392:	60cb      	str	r3, [r1, #12]
 8004394:	e018      	b.n	80043c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004396:	4b3d      	ldr	r3, [pc, #244]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3c      	ldr	r2, [pc, #240]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800439c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fd ff99 	bl	80022d8 <HAL_GetTick>
 80043a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043aa:	f7fd ff95 	bl	80022d8 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e212      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d036      	beq.n	8004442 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d019      	beq.n	8004410 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fd ff76 	bl	80022d8 <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fd ff72 	bl	80022d8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1ef      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004402:	4b22      	ldr	r3, [pc, #136]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x45c>
 800440e:	e018      	b.n	8004442 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004410:	4b1e      	ldr	r3, [pc, #120]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	4a1d      	ldr	r2, [pc, #116]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fd ff5c 	bl	80022d8 <HAL_GetTick>
 8004420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004424:	f7fd ff58 	bl	80022d8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1d5      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d039      	beq.n	80044c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01c      	beq.n	8004490 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0c      	ldr	r2, [pc, #48]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800445c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004460:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004462:	f7fd ff39 	bl	80022d8 <HAL_GetTick>
 8004466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800446a:	f7fd ff35 	bl	80022d8 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e1b2      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCC_OscConfig+0x4f8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x4d6>
 8004488:	e01b      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
 800448a:	bf00      	nop
 800448c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004490:	4b9b      	ldr	r3, [pc, #620]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a9a      	ldr	r2, [pc, #616]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800449a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800449c:	f7fd ff1c 	bl	80022d8 <HAL_GetTick>
 80044a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80044a4:	f7fd ff18 	bl	80022d8 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e195      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044b6:	4b92      	ldr	r3, [pc, #584]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8081 	beq.w	80045d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044d0:	4b8c      	ldr	r3, [pc, #560]	; (8004704 <HAL_RCC_OscConfig+0x770>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a8b      	ldr	r2, [pc, #556]	; (8004704 <HAL_RCC_OscConfig+0x770>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044dc:	f7fd fefc 	bl	80022d8 <HAL_GetTick>
 80044e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fd fef8 	bl	80022d8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e175      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f6:	4b83      	ldr	r3, [pc, #524]	; (8004704 <HAL_RCC_OscConfig+0x770>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x584>
 800450a:	4b7d      	ldr	r3, [pc, #500]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a7c      	ldr	r2, [pc, #496]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	e02d      	b.n	8004574 <HAL_RCC_OscConfig+0x5e0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x5a6>
 8004520:	4b77      	ldr	r3, [pc, #476]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	4a76      	ldr	r2, [pc, #472]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	6713      	str	r3, [r2, #112]	; 0x70
 800452c:	4b74      	ldr	r3, [pc, #464]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	4a73      	ldr	r2, [pc, #460]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004532:	f023 0304 	bic.w	r3, r3, #4
 8004536:	6713      	str	r3, [r2, #112]	; 0x70
 8004538:	e01c      	b.n	8004574 <HAL_RCC_OscConfig+0x5e0>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x5c8>
 8004542:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b6c      	ldr	r3, [pc, #432]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a6b      	ldr	r2, [pc, #428]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0x5e0>
 800455c:	4b68      	ldr	r3, [pc, #416]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	4a67      	ldr	r2, [pc, #412]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	; 0x70
 8004568:	4b65      	ldr	r3, [pc, #404]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a64      	ldr	r2, [pc, #400]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd feac 	bl	80022d8 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd fea8 	bl	80022d8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e123      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800459a:	4b59      	ldr	r3, [pc, #356]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <HAL_RCC_OscConfig+0x5f0>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fe96 	bl	80022d8 <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fd fe92 	bl	80022d8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e10d      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ee      	bne.n	80045b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8102 	beq.w	80047e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e4:	2b18      	cmp	r3, #24
 80045e6:	f000 80bd 	beq.w	8004764 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	f040 809e 	bne.w	8004730 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a41      	ldr	r2, [pc, #260]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80045fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd fe6a 	bl	80022d8 <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd fe66 	bl	80022d8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0e3      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004626:	4b36      	ldr	r3, [pc, #216]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCC_OscConfig+0x774>)
 800462c:	4013      	ands	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004636:	0112      	lsls	r2, r2, #4
 8004638:	430a      	orrs	r2, r1
 800463a:	4931      	ldr	r1, [pc, #196]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800463c:	4313      	orrs	r3, r2
 800463e:	628b      	str	r3, [r1, #40]	; 0x28
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	3b01      	subs	r3, #1
 8004646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	3b01      	subs	r3, #1
 8004650:	025b      	lsls	r3, r3, #9
 8004652:	b29b      	uxth	r3, r3
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	3b01      	subs	r3, #1
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	3b01      	subs	r3, #1
 800466a:	061b      	lsls	r3, r3, #24
 800466c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004670:	4923      	ldr	r1, [pc, #140]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004676:	4b22      	ldr	r3, [pc, #136]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004682:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004686:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_RCC_OscConfig+0x778>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800468e:	00d2      	lsls	r2, r2, #3
 8004690:	491b      	ldr	r1, [pc, #108]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004696:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	f023 020c 	bic.w	r2, r3, #12
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4917      	ldr	r1, [pc, #92]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f023 0202 	bic.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	4912      	ldr	r1, [pc, #72]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	4a07      	ldr	r2, [pc, #28]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a04      	ldr	r2, [pc, #16]	; (8004700 <HAL_RCC_OscConfig+0x76c>)
 80046f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fd fdef 	bl	80022d8 <HAL_GetTick>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046fc:	e011      	b.n	8004722 <HAL_RCC_OscConfig+0x78e>
 80046fe:	bf00      	nop
 8004700:	58024400 	.word	0x58024400
 8004704:	58024800 	.word	0x58024800
 8004708:	fffffc0c 	.word	0xfffffc0c
 800470c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004710:	f7fd fde2 	bl	80022d8 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e05f      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004722:	4b32      	ldr	r3, [pc, #200]	; (80047ec <HAL_RCC_OscConfig+0x858>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x77c>
 800472e:	e057      	b.n	80047e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004730:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <HAL_RCC_OscConfig+0x858>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2d      	ldr	r2, [pc, #180]	; (80047ec <HAL_RCC_OscConfig+0x858>)
 8004736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fd fdcc 	bl	80022d8 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004744:	f7fd fdc8 	bl	80022d8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e045      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <HAL_RCC_OscConfig+0x858>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x7b0>
 8004762:	e03d      	b.n	80047e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <HAL_RCC_OscConfig+0x858>)
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_OscConfig+0x858>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b01      	cmp	r3, #1
 8004776:	d031      	beq.n	80047dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f003 0203 	and.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d12a      	bne.n	80047dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d122      	bne.n	80047dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11a      	bne.n	80047dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	0a5b      	lsrs	r3, r3, #9
 80047aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	0c1b      	lsrs	r3, r3, #16
 80047bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d108      	bne.n	80047dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0e1b      	lsrs	r3, r3, #24
 80047ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3730      	adds	r7, #48	; 0x30
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400

080047f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e19c      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004804:	4b8a      	ldr	r3, [pc, #552]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d910      	bls.n	8004834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b87      	ldr	r3, [pc, #540]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 020f 	bic.w	r2, r3, #15
 800481a:	4985      	ldr	r1, [pc, #532]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b83      	ldr	r3, [pc, #524]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e184      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d010      	beq.n	8004862 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	4b7b      	ldr	r3, [pc, #492]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800484c:	429a      	cmp	r2, r3
 800484e:	d908      	bls.n	8004862 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004850:	4b78      	ldr	r3, [pc, #480]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	4975      	ldr	r1, [pc, #468]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 800485e:	4313      	orrs	r3, r2
 8004860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d010      	beq.n	8004890 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	4b70      	ldr	r3, [pc, #448]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800487a:	429a      	cmp	r2, r3
 800487c:	d908      	bls.n	8004890 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800487e:	4b6d      	ldr	r3, [pc, #436]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	496a      	ldr	r1, [pc, #424]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 800488c:	4313      	orrs	r3, r2
 800488e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d010      	beq.n	80048be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	4b64      	ldr	r3, [pc, #400]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d908      	bls.n	80048be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048ac:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	495e      	ldr	r1, [pc, #376]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d010      	beq.n	80048ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	4b59      	ldr	r3, [pc, #356]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d908      	bls.n	80048ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048da:	4b56      	ldr	r3, [pc, #344]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4953      	ldr	r1, [pc, #332]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	429a      	cmp	r2, r3
 8004906:	d908      	bls.n	800491a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004908:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f023 020f 	bic.w	r2, r3, #15
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4947      	ldr	r1, [pc, #284]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004916:	4313      	orrs	r3, r2
 8004918:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d055      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004926:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4940      	ldr	r1, [pc, #256]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004934:	4313      	orrs	r3, r2
 8004936:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d107      	bne.n	8004950 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004940:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d121      	bne.n	8004990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0f6      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d107      	bne.n	8004968 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004958:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d115      	bne.n	8004990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0ea      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004970:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0de      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004980:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0d6      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004990:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f023 0207 	bic.w	r2, r3, #7
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	4925      	ldr	r1, [pc, #148]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a2:	f7fd fc99 	bl	80022d8 <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a8:	e00a      	b.n	80049c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049aa:	f7fd fc95 	bl	80022d8 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e0be      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d1eb      	bne.n	80049aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d010      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d208      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ee:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f023 020f 	bic.w	r2, r3, #15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	490e      	ldr	r1, [pc, #56]	; (8004a34 <HAL_RCC_ClockConfig+0x244>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d214      	bcs.n	8004a38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 020f 	bic.w	r2, r3, #15
 8004a16:	4906      	ldr	r1, [pc, #24]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <HAL_RCC_ClockConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e086      	b.n	8004b3e <HAL_RCC_ClockConfig+0x34e>
 8004a30:	52002000 	.word	0x52002000
 8004a34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d208      	bcs.n	8004a66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a54:	4b3c      	ldr	r3, [pc, #240]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	4939      	ldr	r1, [pc, #228]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d010      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d208      	bcs.n	8004a94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a82:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	492e      	ldr	r1, [pc, #184]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d208      	bcs.n	8004ac2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	4922      	ldr	r1, [pc, #136]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d010      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69da      	ldr	r2, [r3, #28]
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d208      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4917      	ldr	r1, [pc, #92]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004af0:	f000 f834 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	4912      	ldr	r1, [pc, #72]	; (8004b4c <HAL_RCC_ClockConfig+0x35c>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <HAL_RCC_ClockConfig+0x358>)
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <HAL_RCC_ClockConfig+0x35c>)
 8004b18:	5cd3      	ldrb	r3, [r2, r3]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <HAL_RCC_ClockConfig+0x360>)
 8004b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b28:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <HAL_RCC_ClockConfig+0x364>)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <HAL_RCC_ClockConfig+0x368>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd fb86 	bl	8002244 <HAL_InitTick>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	0800b814 	.word	0x0800b814
 8004b50:	24000008 	.word	0x24000008
 8004b54:	24000004 	.word	0x24000004
 8004b58:	2400000c 	.word	0x2400000c

08004b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b089      	sub	sp, #36	; 0x24
 8004b60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b62:	4bb3      	ldr	r3, [pc, #716]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6a:	2b18      	cmp	r3, #24
 8004b6c:	f200 8155 	bhi.w	8004e1a <HAL_RCC_GetSysClockFreq+0x2be>
 8004b70:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004bdd 	.word	0x08004bdd
 8004b7c:	08004e1b 	.word	0x08004e1b
 8004b80:	08004e1b 	.word	0x08004e1b
 8004b84:	08004e1b 	.word	0x08004e1b
 8004b88:	08004e1b 	.word	0x08004e1b
 8004b8c:	08004e1b 	.word	0x08004e1b
 8004b90:	08004e1b 	.word	0x08004e1b
 8004b94:	08004e1b 	.word	0x08004e1b
 8004b98:	08004c03 	.word	0x08004c03
 8004b9c:	08004e1b 	.word	0x08004e1b
 8004ba0:	08004e1b 	.word	0x08004e1b
 8004ba4:	08004e1b 	.word	0x08004e1b
 8004ba8:	08004e1b 	.word	0x08004e1b
 8004bac:	08004e1b 	.word	0x08004e1b
 8004bb0:	08004e1b 	.word	0x08004e1b
 8004bb4:	08004e1b 	.word	0x08004e1b
 8004bb8:	08004c09 	.word	0x08004c09
 8004bbc:	08004e1b 	.word	0x08004e1b
 8004bc0:	08004e1b 	.word	0x08004e1b
 8004bc4:	08004e1b 	.word	0x08004e1b
 8004bc8:	08004e1b 	.word	0x08004e1b
 8004bcc:	08004e1b 	.word	0x08004e1b
 8004bd0:	08004e1b 	.word	0x08004e1b
 8004bd4:	08004e1b 	.word	0x08004e1b
 8004bd8:	08004c0f 	.word	0x08004c0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bdc:	4b94      	ldr	r3, [pc, #592]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004be8:	4b91      	ldr	r3, [pc, #580]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	4a90      	ldr	r2, [pc, #576]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004bfa:	e111      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bfc:	4b8d      	ldr	r3, [pc, #564]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bfe:	61bb      	str	r3, [r7, #24]
    break;
 8004c00:	e10e      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c02:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c04:	61bb      	str	r3, [r7, #24]
    break;
 8004c06:	e10b      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004c08:	4b8c      	ldr	r3, [pc, #560]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004c0a:	61bb      	str	r3, [r7, #24]
    break;
 8004c0c:	e108      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c0e:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004c18:	4b85      	ldr	r3, [pc, #532]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c24:	4b82      	ldr	r3, [pc, #520]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c2e:	4b80      	ldr	r3, [pc, #512]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80e1 	beq.w	8004e14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	f000 8083 	beq.w	8004d60 <HAL_RCC_GetSysClockFreq+0x204>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	f200 80a1 	bhi.w	8004da4 <HAL_RCC_GetSysClockFreq+0x248>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x114>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d056      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004c6e:	e099      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c70:	4b6f      	ldr	r3, [pc, #444]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02d      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c7c:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	4a6b      	ldr	r2, [pc, #428]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b62      	ldr	r3, [pc, #392]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004cd6:	e087      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004e44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b51      	ldr	r3, [pc, #324]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cfe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1a:	e065      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004e48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d5e:	e043      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004e4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d72:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da2:	e021      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004de6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004de8:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	0a5b      	lsrs	r3, r3, #9
 8004dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df2:	3301      	adds	r3, #1
 8004df4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	ee07 3a90 	vmov	s15, r3
 8004dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0c:	ee17 3a90 	vmov	r3, s15
 8004e10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004e12:	e005      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
    break;
 8004e18:	e002      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004e1a:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e1c:	61bb      	str	r3, [r7, #24]
    break;
 8004e1e:	bf00      	nop
  }

  return sysclockfreq;
 8004e20:	69bb      	ldr	r3, [r7, #24]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3724      	adds	r7, #36	; 0x24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	58024400 	.word	0x58024400
 8004e34:	03d09000 	.word	0x03d09000
 8004e38:	003d0900 	.word	0x003d0900
 8004e3c:	007a1200 	.word	0x007a1200
 8004e40:	46000000 	.word	0x46000000
 8004e44:	4c742400 	.word	0x4c742400
 8004e48:	4a742400 	.word	0x4a742400
 8004e4c:	4af42400 	.word	0x4af42400

08004e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e56:	f7ff fe81 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	490f      	ldr	r1, [pc, #60]	; (8004ea4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e68:	5ccb      	ldrb	r3, [r1, r3]
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e7e:	5cd3      	ldrb	r3, [r2, r3]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8a:	4a07      	ldr	r2, [pc, #28]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e8e:	4a07      	ldr	r2, [pc, #28]	; (8004eac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	0800b814 	.word	0x0800b814
 8004ea8:	24000008 	.word	0x24000008
 8004eac:	24000004 	.word	0x24000004

08004eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004eb4:	f7ff ffcc 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4904      	ldr	r1, [pc, #16]	; (8004ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	0800b814 	.word	0x0800b814

08004edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ee0:	f7ff ffb6 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4904      	ldr	r1, [pc, #16]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	58024400 	.word	0x58024400
 8004f04:	0800b814 	.word	0x0800b814

08004f08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f10:	2300      	movs	r3, #0
 8004f12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f14:	2300      	movs	r3, #0
 8004f16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d03f      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f2c:	d02a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f32:	d824      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f38:	d018      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f3e:	d81e      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f48:	d007      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f4a:	e018      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4c:	4ba3      	ldr	r3, [pc, #652]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4aa2      	ldr	r2, [pc, #648]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f58:	e015      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	2102      	movs	r1, #2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 f9d5 	bl	8006310 <RCCEx_PLL2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f6a:	e00c      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3324      	adds	r3, #36	; 0x24
 8004f70:	2102      	movs	r1, #2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fa7e 	bl	8006474 <RCCEx_PLL3_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f7c:	e003      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]
      break;
 8004f82:	e000      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f8c:	4b93      	ldr	r3, [pc, #588]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f98:	4990      	ldr	r1, [pc, #576]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f9e:	e001      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d03d      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d826      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fd5 	.word	0x08004fd5
 8004fc4:	08004fe3 	.word	0x08004fe3
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	0800500d 	.word	0x0800500d
 8004fd0:	0800500d 	.word	0x0800500d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd4:	4b81      	ldr	r3, [pc, #516]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	4a80      	ldr	r2, [pc, #512]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fe0:	e015      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f991 	bl	8006310 <RCCEx_PLL2_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ff2:	e00c      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3324      	adds	r3, #36	; 0x24
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 fa3a 	bl	8006474 <RCCEx_PLL3_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005004:	e003      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
      break;
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800500c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005014:	4b71      	ldr	r3, [pc, #452]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	f023 0207 	bic.w	r2, r3, #7
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	496e      	ldr	r1, [pc, #440]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005022:	4313      	orrs	r3, r2
 8005024:	650b      	str	r3, [r1, #80]	; 0x50
 8005026:	e001      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005034:	2b00      	cmp	r3, #0
 8005036:	d042      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005040:	d02b      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005046:	d825      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005048:	2bc0      	cmp	r3, #192	; 0xc0
 800504a:	d028      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800504c:	2bc0      	cmp	r3, #192	; 0xc0
 800504e:	d821      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d016      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005054:	2b80      	cmp	r3, #128	; 0x80
 8005056:	d81d      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d007      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005060:	e018      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005062:	4b5e      	ldr	r3, [pc, #376]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	4a5d      	ldr	r2, [pc, #372]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800506e:	e017      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f001 f94a 	bl	8006310 <RCCEx_PLL2_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005080:	e00e      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3324      	adds	r3, #36	; 0x24
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f001 f9f3 	bl	8006474 <RCCEx_PLL3_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005092:	e005      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	75fb      	strb	r3, [r7, #23]
      break;
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800509e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050a6:	4b4d      	ldr	r3, [pc, #308]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	494a      	ldr	r1, [pc, #296]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	650b      	str	r3, [r1, #80]	; 0x50
 80050b8:	e001      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d049      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050d4:	d030      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80050d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050da:	d82a      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050e0:	d02c      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80050e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050e6:	d824      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ec:	d018      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80050ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f2:	d81e      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80050f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050fc:	d007      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80050fe:	e018      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a35      	ldr	r2, [pc, #212]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800510c:	e017      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3304      	adds	r3, #4
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f001 f8fb 	bl	8006310 <RCCEx_PLL2_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800511e:	e00e      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	2100      	movs	r1, #0
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f9a4 	bl	8006474 <RCCEx_PLL3_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005130:	e005      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
      break;
 8005136:	e002      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800513c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005144:	4b25      	ldr	r3, [pc, #148]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005152:	4922      	ldr	r1, [pc, #136]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005154:	4313      	orrs	r3, r2
 8005156:	658b      	str	r3, [r1, #88]	; 0x58
 8005158:	e001      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005166:	2b00      	cmp	r3, #0
 8005168:	d04b      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005174:	d030      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005176:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800517a:	d82a      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800517c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005180:	d02e      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005182:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005186:	d824      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800518c:	d018      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800518e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005192:	d81e      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800519c:	d007      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800519e:	e018      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051ac:	e019      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 f8ab 	bl	8006310 <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051be:	e010      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3324      	adds	r3, #36	; 0x24
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 f954 	bl	8006474 <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051d0:	e007      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
      break;
 80051d6:	e004      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80051d8:	bf00      	nop
 80051da:	e002      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80051dc:	58024400 	.word	0x58024400
      break;
 80051e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051e8:	4b99      	ldr	r3, [pc, #612]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051f6:	4996      	ldr	r1, [pc, #600]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	658b      	str	r3, [r1, #88]	; 0x58
 80051fc:	e001      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d032      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005212:	2b30      	cmp	r3, #48	; 0x30
 8005214:	d01c      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005216:	2b30      	cmp	r3, #48	; 0x30
 8005218:	d817      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800521a:	2b20      	cmp	r3, #32
 800521c:	d00c      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800521e:	2b20      	cmp	r3, #32
 8005220:	d813      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005226:	2b10      	cmp	r3, #16
 8005228:	d10f      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522a:	4b89      	ldr	r3, [pc, #548]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	4a88      	ldr	r2, [pc, #544]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005234:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005236:	e00e      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2102      	movs	r1, #2
 800523e:	4618      	mov	r0, r3
 8005240:	f001 f866 	bl	8006310 <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005248:	e005      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	75fb      	strb	r3, [r7, #23]
      break;
 800524e:	e002      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005250:	bf00      	nop
 8005252:	e000      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800525c:	4b7c      	ldr	r3, [pc, #496]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005268:	4979      	ldr	r1, [pc, #484]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800526a:	4313      	orrs	r3, r2
 800526c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800526e:	e001      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d047      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005288:	d030      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800528a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800528e:	d82a      	bhi.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005290:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005294:	d02c      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800529a:	d824      	bhi.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800529c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a0:	d018      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80052a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a6:	d81e      	bhi.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	d007      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80052b2:	e018      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b4:	4b66      	ldr	r3, [pc, #408]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	4a65      	ldr	r2, [pc, #404]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052c0:	e017      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f821 	bl	8006310 <RCCEx_PLL2_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052d2:	e00e      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3324      	adds	r3, #36	; 0x24
 80052d8:	2100      	movs	r1, #0
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 f8ca 	bl	8006474 <RCCEx_PLL3_Config>
 80052e0:	4603      	mov	r3, r0
 80052e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052e4:	e005      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
      break;
 80052ea:	e002      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80052f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052f8:	4b55      	ldr	r3, [pc, #340]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	4952      	ldr	r1, [pc, #328]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005306:	4313      	orrs	r3, r2
 8005308:	650b      	str	r3, [r1, #80]	; 0x50
 800530a:	e001      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d049      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005324:	d02e      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005326:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800532a:	d828      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800532c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005330:	d02a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005336:	d822      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800533c:	d026      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800533e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005342:	d81c      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005348:	d010      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800534a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800534e:	d816      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01d      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005358:	d111      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f000 ffd5 	bl	8006310 <RCCEx_PLL2_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800536a:	e012      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3324      	adds	r3, #36	; 0x24
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f001 f87e 	bl	8006474 <RCCEx_PLL3_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800537c:	e009      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
      break;
 8005382:	e006      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005384:	bf00      	nop
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a4:	492a      	ldr	r1, [pc, #168]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	650b      	str	r3, [r1, #80]	; 0x50
 80053aa:	e001      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d04d      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053c6:	d02e      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80053c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053cc:	d828      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d2:	d02a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d822      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053de:	d026      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80053e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053e4:	d81c      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ea:	d010      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80053ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f0:	d816      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01d      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80053f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053fa:	d111      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	2101      	movs	r1, #1
 8005402:	4618      	mov	r0, r3
 8005404:	f000 ff84 	bl	8006310 <RCCEx_PLL2_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800540c:	e012      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3324      	adds	r3, #36	; 0x24
 8005412:	2101      	movs	r1, #1
 8005414:	4618      	mov	r0, r3
 8005416:	f001 f82d 	bl	8006474 <RCCEx_PLL3_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800541e:	e009      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	75fb      	strb	r3, [r7, #23]
      break;
 8005424:	e006      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005426:	bf00      	nop
 8005428:	e004      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800542a:	bf00      	nop
 800542c:	e002      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005448:	4901      	ldr	r1, [pc, #4]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800544a:	4313      	orrs	r3, r2
 800544c:	658b      	str	r3, [r1, #88]	; 0x58
 800544e:	e003      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800546c:	d00e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800546e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005472:	d814      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d015      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547c:	d10f      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547e:	4baf      	ldr	r3, [pc, #700]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	4aae      	ldr	r2, [pc, #696]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800548a:	e00c      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ff3c 	bl	8006310 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
      break;
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80054a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054ac:	4ba3      	ldr	r3, [pc, #652]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b8:	49a0      	ldr	r1, [pc, #640]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	650b      	str	r3, [r1, #80]	; 0x50
 80054be:	e001      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
 80054c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d032      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d81b      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005517 	.word	0x08005517
 80054e4:	080054f1 	.word	0x080054f1
 80054e8:	080054ff 	.word	0x080054ff
 80054ec:	08005517 	.word	0x08005517
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f0:	4b92      	ldr	r3, [pc, #584]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	4a91      	ldr	r2, [pc, #580]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054fc:	e00c      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	2102      	movs	r1, #2
 8005504:	4618      	mov	r0, r3
 8005506:	f000 ff03 	bl	8006310 <RCCEx_PLL2_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
      break;
 8005514:	e000      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800551e:	4b87      	ldr	r3, [pc, #540]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	f023 0203 	bic.w	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	4984      	ldr	r1, [pc, #528]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800552c:	4313      	orrs	r3, r2
 800552e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005530:	e001      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8086 	beq.w	8005650 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005544:	4b7e      	ldr	r3, [pc, #504]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a7d      	ldr	r2, [pc, #500]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800554a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005550:	f7fc fec2 	bl	80022d8 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005556:	e009      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005558:	f7fc febe 	bl	80022d8 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	; 0x64
 8005564:	d902      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	75fb      	strb	r3, [r7, #23]
        break;
 800556a:	e005      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800556c:	4b74      	ldr	r3, [pc, #464]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0ef      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d166      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800557e:	4b6f      	ldr	r3, [pc, #444]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005580:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005588:	4053      	eors	r3, r2
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d013      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005592:	4b6a      	ldr	r3, [pc, #424]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800559c:	4b67      	ldr	r3, [pc, #412]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	4a66      	ldr	r2, [pc, #408]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055a8:	4b64      	ldr	r3, [pc, #400]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a63      	ldr	r2, [pc, #396]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055b4:	4a61      	ldr	r2, [pc, #388]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c4:	d115      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fc fe87 	bl	80022d8 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055cc:	e00b      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ce:	f7fc fe83 	bl	80022d8 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055dc:	4293      	cmp	r3, r2
 80055de:	d902      	bls.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	75fb      	strb	r3, [r7, #23]
            break;
 80055e4:	e005      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055e6:	4b55      	ldr	r3, [pc, #340]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0ed      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d126      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005606:	d10d      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005608:	4b4c      	ldr	r3, [pc, #304]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005616:	0919      	lsrs	r1, r3, #4
 8005618:	4b4a      	ldr	r3, [pc, #296]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800561a:	400b      	ands	r3, r1
 800561c:	4947      	ldr	r1, [pc, #284]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800561e:	4313      	orrs	r3, r2
 8005620:	610b      	str	r3, [r1, #16]
 8005622:	e005      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005624:	4b45      	ldr	r3, [pc, #276]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	4a44      	ldr	r2, [pc, #272]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800562a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800562e:	6113      	str	r3, [r2, #16]
 8005630:	4b42      	ldr	r3, [pc, #264]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800563a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563e:	493f      	ldr	r1, [pc, #252]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005640:	4313      	orrs	r3, r2
 8005642:	670b      	str	r3, [r1, #112]	; 0x70
 8005644:	e004      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	75bb      	strb	r3, [r7, #22]
 800564a:	e001      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 8085 	beq.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005662:	2b28      	cmp	r3, #40	; 0x28
 8005664:	d866      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	08005749 	.word	0x08005749
 8005670:	08005735 	.word	0x08005735
 8005674:	08005735 	.word	0x08005735
 8005678:	08005735 	.word	0x08005735
 800567c:	08005735 	.word	0x08005735
 8005680:	08005735 	.word	0x08005735
 8005684:	08005735 	.word	0x08005735
 8005688:	08005735 	.word	0x08005735
 800568c:	08005711 	.word	0x08005711
 8005690:	08005735 	.word	0x08005735
 8005694:	08005735 	.word	0x08005735
 8005698:	08005735 	.word	0x08005735
 800569c:	08005735 	.word	0x08005735
 80056a0:	08005735 	.word	0x08005735
 80056a4:	08005735 	.word	0x08005735
 80056a8:	08005735 	.word	0x08005735
 80056ac:	08005723 	.word	0x08005723
 80056b0:	08005735 	.word	0x08005735
 80056b4:	08005735 	.word	0x08005735
 80056b8:	08005735 	.word	0x08005735
 80056bc:	08005735 	.word	0x08005735
 80056c0:	08005735 	.word	0x08005735
 80056c4:	08005735 	.word	0x08005735
 80056c8:	08005735 	.word	0x08005735
 80056cc:	08005749 	.word	0x08005749
 80056d0:	08005735 	.word	0x08005735
 80056d4:	08005735 	.word	0x08005735
 80056d8:	08005735 	.word	0x08005735
 80056dc:	08005735 	.word	0x08005735
 80056e0:	08005735 	.word	0x08005735
 80056e4:	08005735 	.word	0x08005735
 80056e8:	08005735 	.word	0x08005735
 80056ec:	08005749 	.word	0x08005749
 80056f0:	08005735 	.word	0x08005735
 80056f4:	08005735 	.word	0x08005735
 80056f8:	08005735 	.word	0x08005735
 80056fc:	08005735 	.word	0x08005735
 8005700:	08005735 	.word	0x08005735
 8005704:	08005735 	.word	0x08005735
 8005708:	08005735 	.word	0x08005735
 800570c:	08005749 	.word	0x08005749
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	2101      	movs	r1, #1
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fdfa 	bl	8006310 <RCCEx_PLL2_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005720:	e013      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3324      	adds	r3, #36	; 0x24
 8005726:	2101      	movs	r1, #1
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fea3 	bl	8006474 <RCCEx_PLL3_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005732:	e00a      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]
      break;
 8005738:	e007      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800573a:	bf00      	nop
 800573c:	58024400 	.word	0x58024400
 8005740:	58024800 	.word	0x58024800
 8005744:	00ffffcf 	.word	0x00ffffcf
      break;
 8005748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005750:	4b96      	ldr	r3, [pc, #600]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800575c:	4993      	ldr	r1, [pc, #588]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800575e:	4313      	orrs	r3, r2
 8005760:	654b      	str	r3, [r1, #84]	; 0x54
 8005762:	e001      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d038      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005778:	2b05      	cmp	r3, #5
 800577a:	d821      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	080057c7 	.word	0x080057c7
 8005788:	0800579d 	.word	0x0800579d
 800578c:	080057af 	.word	0x080057af
 8005790:	080057c7 	.word	0x080057c7
 8005794:	080057c7 	.word	0x080057c7
 8005798:	080057c7 	.word	0x080057c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	2101      	movs	r1, #1
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fdb4 	bl	8006310 <RCCEx_PLL2_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057ac:	e00c      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3324      	adds	r3, #36	; 0x24
 80057b2:	2101      	movs	r1, #1
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fe5d 	bl	8006474 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057be:	e003      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
      break;
 80057c4:	e000      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80057c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057ce:	4b77      	ldr	r3, [pc, #476]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	f023 0207 	bic.w	r2, r3, #7
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	4974      	ldr	r1, [pc, #464]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	654b      	str	r3, [r1, #84]	; 0x54
 80057e0:	e001      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	2b05      	cmp	r3, #5
 80057fa:	d821      	bhi.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005847 	.word	0x08005847
 8005808:	0800581d 	.word	0x0800581d
 800580c:	0800582f 	.word	0x0800582f
 8005810:	08005847 	.word	0x08005847
 8005814:	08005847 	.word	0x08005847
 8005818:	08005847 	.word	0x08005847
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	2101      	movs	r1, #1
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fd74 	bl	8006310 <RCCEx_PLL2_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800582c:	e00c      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3324      	adds	r3, #36	; 0x24
 8005832:	2101      	movs	r1, #1
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fe1d 	bl	8006474 <RCCEx_PLL3_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	75fb      	strb	r3, [r7, #23]
      break;
 8005844:	e000      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800584e:	4b57      	ldr	r3, [pc, #348]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	f023 0207 	bic.w	r2, r3, #7
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	4953      	ldr	r1, [pc, #332]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	658b      	str	r3, [r1, #88]	; 0x58
 8005862:	e001      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d04b      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800587e:	d02e      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005884:	d828      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d02a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d822      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005896:	d026      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005898:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800589c:	d81c      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800589e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a2:	d010      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80058a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a8:	d816      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01d      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80058ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b2:	d111      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fd28 	bl	8006310 <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058c4:	e012      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3324      	adds	r3, #36	; 0x24
 80058ca:	2102      	movs	r1, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fdd1 	bl	8006474 <RCCEx_PLL3_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058d6:	e009      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058de:	bf00      	nop
 80058e0:	e004      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005900:	492a      	ldr	r1, [pc, #168]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005902:	4313      	orrs	r3, r2
 8005904:	654b      	str	r3, [r1, #84]	; 0x54
 8005906:	e001      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d04d      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800591e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005922:	d02e      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005924:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005928:	d828      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800592a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592e:	d02a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d822      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800593a:	d026      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800593c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005940:	d81c      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005946:	d010      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d816      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01d      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005956:	d111      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	2100      	movs	r1, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fcd6 	bl	8006310 <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005968:	e012      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3324      	adds	r3, #36	; 0x24
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fd7f 	bl	8006474 <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800597a:	e009      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
      break;
 8005980:	e006      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005982:	bf00      	nop
 8005984:	e004      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005986:	bf00      	nop
 8005988:	e002      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800598a:	bf00      	nop
 800598c:	e000      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800598e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a4:	4901      	ldr	r1, [pc, #4]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	658b      	str	r3, [r1, #88]	; 0x58
 80059aa:	e003      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80059ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d04b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059ca:	d02e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80059cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059d0:	d828      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d02a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80059d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059dc:	d822      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059e2:	d026      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80059e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059e8:	d81c      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ee:	d010      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80059f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f4:	d816      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01d      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80059fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fe:	d111      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fc82 	bl	8006310 <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a10:	e012      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3324      	adds	r3, #36	; 0x24
 8005a16:	2102      	movs	r1, #2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fd2b 	bl	8006474 <RCCEx_PLL3_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a22:	e009      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
      break;
 8005a28:	e006      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a3e:	4b9d      	ldr	r3, [pc, #628]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4c:	4999      	ldr	r1, [pc, #612]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	658b      	str	r3, [r1, #88]	; 0x58
 8005a52:	e001      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6e:	d10a      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3324      	adds	r3, #36	; 0x24
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fcfc 	bl	8006474 <RCCEx_PLL3_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a86:	4b8b      	ldr	r3, [pc, #556]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a94:	4987      	ldr	r1, [pc, #540]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3324      	adds	r3, #36	; 0x24
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fcdb 	bl	8006474 <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ac8:	4b7a      	ldr	r3, [pc, #488]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad6:	4977      	ldr	r1, [pc, #476]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d034      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af2:	d01d      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af8:	d817      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b02:	d009      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005b04:	e011      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fbff 	bl	8006310 <RCCEx_PLL2_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b16:	e00c      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	2102      	movs	r1, #2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fca8 	bl	8006474 <RCCEx_PLL3_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b28:	e003      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b38:	4b5e      	ldr	r3, [pc, #376]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b46:	495b      	ldr	r1, [pc, #364]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b4c:	e001      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
 8005b50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d033      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b68:	d01c      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005b6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b6e:	d816      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b74:	d003      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b7a:	d007      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005b7c:	e00f      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7e:	4b4d      	ldr	r3, [pc, #308]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	4a4c      	ldr	r2, [pc, #304]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b8a:	e00c      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3324      	adds	r3, #36	; 0x24
 8005b90:	2101      	movs	r1, #1
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fc6e 	bl	8006474 <RCCEx_PLL3_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b9c:	e003      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bac:	4b41      	ldr	r3, [pc, #260]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bba:	493e      	ldr	r1, [pc, #248]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	654b      	str	r3, [r1, #84]	; 0x54
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d029      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bde:	d007      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005be0:	e00f      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be2:	4b34      	ldr	r3, [pc, #208]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	4a33      	ldr	r2, [pc, #204]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005bee:	e00b      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	2102      	movs	r1, #2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fb8a 	bl	8006310 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c00:	e002      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
      break;
 8005c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c0e:	4b29      	ldr	r3, [pc, #164]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	4926      	ldr	r1, [pc, #152]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c20:	e001      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3324      	adds	r3, #36	; 0x24
 8005c36:	2102      	movs	r1, #2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fc1b 	bl	8006474 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d033      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5c:	d017      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c62:	d811      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c68:	d013      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6e:	d80b      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d010      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c78:	d106      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a0d      	ldr	r2, [pc, #52]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005c86:	e007      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	e004      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e002      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005c92:	bf00      	nop
 8005c94:	e000      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005caa:	4902      	ldr	r1, [pc, #8]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	654b      	str	r3, [r1, #84]	; 0x54
 8005cb0:	e004      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005cb2:	bf00      	nop
 8005cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cc8:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ccc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd4:	492e      	ldr	r1, [pc, #184]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ce6:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cf4:	4926      	ldr	r1, [pc, #152]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d06:	4b22      	ldr	r3, [pc, #136]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d12:	491f      	ldr	r1, [pc, #124]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00d      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d24:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d2e:	6113      	str	r3, [r2, #16]
 8005d30:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d3a:	4915      	ldr	r1, [pc, #84]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da08      	bge.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	490e      	ldr	r1, [pc, #56]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	4906      	ldr	r1, [pc, #24]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005d7a:	7dbb      	ldrb	r3, [r7, #22]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	58024400 	.word	0x58024400

08005d94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d98:	f7ff f85a 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	091b      	lsrs	r3, r3, #4
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4904      	ldr	r1, [pc, #16]	; (8005dbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	0800b814 	.word	0x0800b814

08005dc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dc8:	4ba1      	ldr	r3, [pc, #644]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005dd2:	4b9f      	ldr	r3, [pc, #636]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	0b1b      	lsrs	r3, r3, #12
 8005dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ddc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dde:	4b9c      	ldr	r3, [pc, #624]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005dea:	4b99      	ldr	r3, [pc, #612]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	08db      	lsrs	r3, r3, #3
 8005df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8111 	beq.w	8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	f000 8083 	beq.w	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	f200 80a1 	bhi.w	8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d056      	beq.n	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e2a:	e099      	b.n	8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e2c:	4b88      	ldr	r3, [pc, #544]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d02d      	beq.n	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e38:	4b85      	ldr	r3, [pc, #532]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	08db      	lsrs	r3, r3, #3
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	4a84      	ldr	r2, [pc, #528]	; (8006054 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
 8005e48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e62:	4b7b      	ldr	r3, [pc, #492]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e92:	e087      	b.n	8005fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800605c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea6:	4b6a      	ldr	r3, [pc, #424]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ed6:	e065      	b.n	8005fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eea:	4b59      	ldr	r3, [pc, #356]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f1a:	e043      	b.n	8005fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2e:	4b48      	ldr	r3, [pc, #288]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f5e:	e021      	b.n	8005fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f72:	4b37      	ldr	r3, [pc, #220]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005fa4:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	0a5b      	lsrs	r3, r3, #9
 8005faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fca:	ee17 2a90 	vmov	r2, s15
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005fd2:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff8:	ee17 2a90 	vmov	r2, s15
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006000:	4b13      	ldr	r3, [pc, #76]	; (8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	0e1b      	lsrs	r3, r3, #24
 8006006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800601a:	edd7 6a07 	vldr	s13, [r7, #28]
 800601e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006026:	ee17 2a90 	vmov	r2, s15
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800602e:	e008      	b.n	8006042 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	609a      	str	r2, [r3, #8]
}
 8006042:	bf00      	nop
 8006044:	3724      	adds	r7, #36	; 0x24
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
 8006054:	03d09000 	.word	0x03d09000
 8006058:	46000000 	.word	0x46000000
 800605c:	4c742400 	.word	0x4c742400
 8006060:	4a742400 	.word	0x4a742400
 8006064:	4af42400 	.word	0x4af42400

08006068 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006068:	b480      	push	{r7}
 800606a:	b089      	sub	sp, #36	; 0x24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006070:	4ba1      	ldr	r3, [pc, #644]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800607a:	4b9f      	ldr	r3, [pc, #636]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	0d1b      	lsrs	r3, r3, #20
 8006080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006084:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006086:	4b9c      	ldr	r3, [pc, #624]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006092:	4b99      	ldr	r3, [pc, #612]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	08db      	lsrs	r3, r3, #3
 8006098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8111 	beq.w	80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	f000 8083 	beq.w	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	f200 80a1 	bhi.w	8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d056      	beq.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060d2:	e099      	b.n	8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d4:	4b88      	ldr	r3, [pc, #544]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02d      	beq.n	800613c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060e0:	4b85      	ldr	r3, [pc, #532]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	08db      	lsrs	r3, r3, #3
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	4a84      	ldr	r2, [pc, #528]	; (80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
 80060f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610a:	4b7b      	ldr	r3, [pc, #492]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	ed97 6a03 	vldr	s12, [r7, #12]
 800611e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800613a:	e087      	b.n	800624c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800614a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614e:	4b6a      	ldr	r3, [pc, #424]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006162:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800617e:	e065      	b.n	800624c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800618e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006192:	4b59      	ldr	r3, [pc, #356]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061c2:	e043      	b.n	800624c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800630c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d6:	4b48      	ldr	r3, [pc, #288]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006206:	e021      	b.n	800624c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800621a:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622a:	ed97 6a03 	vldr	s12, [r7, #12]
 800622e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800623a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800623e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800624a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800624c:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	0a5b      	lsrs	r3, r3, #9
 8006252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006266:	edd7 6a07 	vldr	s13, [r7, #28]
 800626a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006272:	ee17 2a90 	vmov	r2, s15
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	0c1b      	lsrs	r3, r3, #16
 8006280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006294:	edd7 6a07 	vldr	s13, [r7, #28]
 8006298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a0:	ee17 2a90 	vmov	r2, s15
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80062a8:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	0e1b      	lsrs	r3, r3, #24
 80062ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ce:	ee17 2a90 	vmov	r2, s15
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062d6:	e008      	b.n	80062ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]
}
 80062ea:	bf00      	nop
 80062ec:	3724      	adds	r7, #36	; 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
 80062fc:	03d09000 	.word	0x03d09000
 8006300:	46000000 	.word	0x46000000
 8006304:	4c742400 	.word	0x4c742400
 8006308:	4a742400 	.word	0x4a742400
 800630c:	4af42400 	.word	0x4af42400

08006310 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800631e:	4b53      	ldr	r3, [pc, #332]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d101      	bne.n	800632e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e099      	b.n	8006462 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800632e:	4b4f      	ldr	r3, [pc, #316]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a4e      	ldr	r2, [pc, #312]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006334:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800633a:	f7fb ffcd 	bl	80022d8 <HAL_GetTick>
 800633e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006340:	e008      	b.n	8006354 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006342:	f7fb ffc9 	bl	80022d8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e086      	b.n	8006462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006354:	4b45      	ldr	r3, [pc, #276]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f0      	bne.n	8006342 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006360:	4b42      	ldr	r3, [pc, #264]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	493f      	ldr	r1, [pc, #252]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006370:	4313      	orrs	r3, r2
 8006372:	628b      	str	r3, [r1, #40]	; 0x28
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	3b01      	subs	r3, #1
 800637a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	3b01      	subs	r3, #1
 8006384:	025b      	lsls	r3, r3, #9
 8006386:	b29b      	uxth	r3, r3
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	3b01      	subs	r3, #1
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	3b01      	subs	r3, #1
 800639e:	061b      	lsls	r3, r3, #24
 80063a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063a4:	4931      	ldr	r1, [pc, #196]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063aa:	4b30      	ldr	r3, [pc, #192]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	492d      	ldr	r1, [pc, #180]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063bc:	4b2b      	ldr	r3, [pc, #172]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	f023 0220 	bic.w	r2, r3, #32
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	4928      	ldr	r1, [pc, #160]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063ce:	4b27      	ldr	r3, [pc, #156]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	4a26      	ldr	r2, [pc, #152]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063d4:	f023 0310 	bic.w	r3, r3, #16
 80063d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063da:	4b24      	ldr	r3, [pc, #144]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063de:	4b24      	ldr	r3, [pc, #144]	; (8006470 <RCCEx_PLL2_Config+0x160>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	69d2      	ldr	r2, [r2, #28]
 80063e6:	00d2      	lsls	r2, r2, #3
 80063e8:	4920      	ldr	r1, [pc, #128]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063ee:	4b1f      	ldr	r3, [pc, #124]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	4a1e      	ldr	r2, [pc, #120]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 80063f4:	f043 0310 	orr.w	r3, r3, #16
 80063f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006400:	4b1a      	ldr	r3, [pc, #104]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	4a19      	ldr	r2, [pc, #100]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800640c:	e00f      	b.n	800642e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006414:	4b15      	ldr	r3, [pc, #84]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a14      	ldr	r2, [pc, #80]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 800641a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800641e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006420:	e005      	b.n	800642e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006422:	4b12      	ldr	r3, [pc, #72]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	4a11      	ldr	r2, [pc, #68]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800642c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800642e:	4b0f      	ldr	r3, [pc, #60]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a0e      	ldr	r2, [pc, #56]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800643a:	f7fb ff4d 	bl	80022d8 <HAL_GetTick>
 800643e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006440:	e008      	b.n	8006454 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006442:	f7fb ff49 	bl	80022d8 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e006      	b.n	8006462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <RCCEx_PLL2_Config+0x15c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0f0      	beq.n	8006442 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	58024400 	.word	0x58024400
 8006470:	ffff0007 	.word	0xffff0007

08006474 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006482:	4b53      	ldr	r3, [pc, #332]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	2b03      	cmp	r3, #3
 800648c:	d101      	bne.n	8006492 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e099      	b.n	80065c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006492:	4b4f      	ldr	r3, [pc, #316]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4e      	ldr	r2, [pc, #312]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800649c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800649e:	f7fb ff1b 	bl	80022d8 <HAL_GetTick>
 80064a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064a4:	e008      	b.n	80064b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064a6:	f7fb ff17 	bl	80022d8 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e086      	b.n	80065c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064b8:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f0      	bne.n	80064a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064c4:	4b42      	ldr	r3, [pc, #264]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	051b      	lsls	r3, r3, #20
 80064d2:	493f      	ldr	r1, [pc, #252]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	628b      	str	r3, [r1, #40]	; 0x28
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	3b01      	subs	r3, #1
 80064de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	025b      	lsls	r3, r3, #9
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	3b01      	subs	r3, #1
 8006502:	061b      	lsls	r3, r3, #24
 8006504:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006508:	4931      	ldr	r1, [pc, #196]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800650e:	4b30      	ldr	r3, [pc, #192]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	492d      	ldr	r1, [pc, #180]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800651c:	4313      	orrs	r3, r2
 800651e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006520:	4b2b      	ldr	r3, [pc, #172]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	4928      	ldr	r1, [pc, #160]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006532:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	4a26      	ldr	r2, [pc, #152]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800653e:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <RCCEx_PLL3_Config+0x160>)
 8006544:	4013      	ands	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	69d2      	ldr	r2, [r2, #28]
 800654a:	00d2      	lsls	r2, r2, #3
 800654c:	4920      	ldr	r1, [pc, #128]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006552:	4b1f      	ldr	r3, [pc, #124]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006564:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800656a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800656e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006570:	e00f      	b.n	8006592 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d106      	bne.n	8006586 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006578:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800657e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006584:	e005      	b.n	8006592 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	4a11      	ldr	r2, [pc, #68]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 800658c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006590:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a0e      	ldr	r2, [pc, #56]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fb fe9b 	bl	80022d8 <HAL_GetTick>
 80065a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065a4:	e008      	b.n	80065b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065a6:	f7fb fe97 	bl	80022d8 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e006      	b.n	80065c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <RCCEx_PLL3_Config+0x15c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0f0      	beq.n	80065a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	58024400 	.word	0x58024400
 80065d4:	ffff0007 	.word	0xffff0007

080065d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0f1      	b.n	80067ce <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a78      	ldr	r2, [pc, #480]	; (80067d8 <HAL_SPI_Init+0x200>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <HAL_SPI_Init+0x42>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a77      	ldr	r2, [pc, #476]	; (80067dc <HAL_SPI_Init+0x204>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00a      	beq.n	800661a <HAL_SPI_Init+0x42>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a75      	ldr	r2, [pc, #468]	; (80067e0 <HAL_SPI_Init+0x208>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d005      	beq.n	800661a <HAL_SPI_Init+0x42>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d901      	bls.n	800661a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e0d9      	b.n	80067ce <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 ff74 	bl	8007508 <SPI_GetPacketSize>
 8006620:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a6c      	ldr	r2, [pc, #432]	; (80067d8 <HAL_SPI_Init+0x200>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00c      	beq.n	8006646 <HAL_SPI_Init+0x6e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6a      	ldr	r2, [pc, #424]	; (80067dc <HAL_SPI_Init+0x204>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <HAL_SPI_Init+0x6e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a69      	ldr	r2, [pc, #420]	; (80067e0 <HAL_SPI_Init+0x208>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Init+0x6e>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b08      	cmp	r3, #8
 8006644:	d811      	bhi.n	800666a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800664a:	4a63      	ldr	r2, [pc, #396]	; (80067d8 <HAL_SPI_Init+0x200>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a61      	ldr	r2, [pc, #388]	; (80067dc <HAL_SPI_Init+0x204>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_SPI_Init+0x8c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a60      	ldr	r2, [pc, #384]	; (80067e0 <HAL_SPI_Init+0x208>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d104      	bne.n	800666e <HAL_SPI_Init+0x96>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b10      	cmp	r3, #16
 8006668:	d901      	bls.n	800666e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0af      	b.n	80067ce <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fb fabe 	bl	8001c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80066aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b4:	d119      	bne.n	80066ea <HAL_SPI_Init+0x112>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066be:	d103      	bne.n	80066c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10c      	bne.n	80066ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d8:	d107      	bne.n	80066ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69da      	ldr	r2, [r3, #28]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	431a      	orrs	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	ea42 0103 	orr.w	r1, r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674a:	ea42 0103 	orr.w	r1, r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d113      	bne.n	800678a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006774:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006788:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40013000 	.word	0x40013000
 80067dc:	40003800 	.word	0x40003800
 80067e0:	40003c00 	.word	0x40003c00

080067e4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	; 0x28
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3320      	adds	r3, #32
 80067fa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_SPI_Transmit+0x2a>
 800680a:	2302      	movs	r3, #2
 800680c:	e1d7      	b.n	8006bbe <HAL_SPI_Transmit+0x3da>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006816:	f7fb fd5f 	bl	80022d8 <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	d007      	beq.n	8006838 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006828:	2302      	movs	r3, #2
 800682a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006834:	7efb      	ldrb	r3, [r7, #27]
 8006836:	e1c2      	b.n	8006bbe <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_SPI_Transmit+0x60>
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006850:	7efb      	ldrb	r3, [r7, #27]
 8006852:	e1b4      	b.n	8006bbe <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2203      	movs	r2, #3
 8006858:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	88fa      	ldrh	r2, [r7, #6]
 800686e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80068a4:	d107      	bne.n	80068b6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b96      	ldr	r3, [pc, #600]	; (8006b18 <HAL_SPI_Transmit+0x334>)
 80068be:	4013      	ands	r3, r2
 80068c0:	88f9      	ldrh	r1, [r7, #6]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e2:	d107      	bne.n	80068f4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2b0f      	cmp	r3, #15
 80068fa:	d947      	bls.n	800698c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80068fc:	e03f      	b.n	800697e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b02      	cmp	r3, #2
 800690a:	d114      	bne.n	8006936 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006934:	e023      	b.n	800697e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006936:	f7fb fccf 	bl	80022d8 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d803      	bhi.n	800694e <HAL_SPI_Transmit+0x16a>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d102      	bne.n	8006954 <HAL_SPI_Transmit+0x170>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d114      	bne.n	800697e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fd09 	bl	800736c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006968:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e11f      	b.n	8006bbe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1b9      	bne.n	80068fe <HAL_SPI_Transmit+0x11a>
 800698a:	e0f2      	b.n	8006b72 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b07      	cmp	r3, #7
 8006992:	f240 80e7 	bls.w	8006b64 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006996:	e05d      	b.n	8006a54 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d132      	bne.n	8006a0c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d918      	bls.n	80069e4 <HAL_SPI_Transmit+0x200>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d014      	beq.n	80069e4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b02      	subs	r3, #2
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80069e2:	e037      	b.n	8006a54 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a0a:	e023      	b.n	8006a54 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0c:	f7fb fc64 	bl	80022d8 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d803      	bhi.n	8006a24 <HAL_SPI_Transmit+0x240>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d102      	bne.n	8006a2a <HAL_SPI_Transmit+0x246>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d114      	bne.n	8006a54 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fc9e 	bl	800736c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e0b4      	b.n	8006bbe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d19b      	bne.n	8006998 <HAL_SPI_Transmit+0x1b4>
 8006a60:	e087      	b.n	8006b72 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d155      	bne.n	8006b1c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d918      	bls.n	8006aae <HAL_SPI_Transmit+0x2ca>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d914      	bls.n	8006aae <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	1d1a      	adds	r2, r3, #4
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b04      	subs	r3, #4
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006aac:	e05a      	b.n	8006b64 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d917      	bls.n	8006aea <HAL_SPI_Transmit+0x306>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d013      	beq.n	8006aea <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac6:	881a      	ldrh	r2, [r3, #0]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad0:	1c9a      	adds	r2, r3, #2
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b02      	subs	r3, #2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006ae8:	e03c      	b.n	8006b64 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3320      	adds	r3, #32
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006b14:	e026      	b.n	8006b64 <HAL_SPI_Transmit+0x380>
 8006b16:	bf00      	nop
 8006b18:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1c:	f7fb fbdc 	bl	80022d8 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d803      	bhi.n	8006b34 <HAL_SPI_Transmit+0x350>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d102      	bne.n	8006b3a <HAL_SPI_Transmit+0x356>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d114      	bne.n	8006b64 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fc16 	bl	800736c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e02c      	b.n	8006bbe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f af78 	bne.w	8006a62 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2108      	movs	r1, #8
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fc95 	bl	80074ac <SPI_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fbe7 	bl	800736c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006bbc:	7efb      	ldrb	r3, [r7, #27]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	; 0x28
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3330      	adds	r3, #48	; 0x30
 8006be2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bec:	d112      	bne.n	8006c14 <HAL_SPI_Receive+0x4c>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10e      	bne.n	8006c14 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f978 	bl	8006f00 <HAL_SPI_TransmitReceive>
 8006c10:	4603      	mov	r3, r0
 8006c12:	e16f      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_SPI_Receive+0x5a>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e168      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c2a:	f7fb fb55 	bl	80022d8 <HAL_GetTick>
 8006c2e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d007      	beq.n	8006c4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006c48:	7ffb      	ldrb	r3, [r7, #31]
 8006c4a:	e153      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_SPI_Receive+0x90>
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006c64:	7ffb      	ldrb	r3, [r7, #31]
 8006c66:	e145      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006cb8:	d107      	bne.n	8006cca <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4b8a      	ldr	r3, [pc, #552]	; (8006efc <HAL_SPI_Receive+0x334>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	88f9      	ldrh	r1, [r7, #6]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0201 	orr.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf6:	d107      	bne.n	8006d08 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b0f      	cmp	r3, #15
 8006d0e:	d948      	bls.n	8006da2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006d10:	e040      	b.n	8006d94 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	f248 0308 	movw	r3, #32776	; 0x8008
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d014      	beq.n	8006d4c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d2c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d32:	1d1a      	adds	r2, r3, #4
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006d4a:	e023      	b.n	8006d94 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4c:	f7fb fac4 	bl	80022d8 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d803      	bhi.n	8006d64 <HAL_SPI_Receive+0x19c>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d62:	d102      	bne.n	8006d6a <HAL_SPI_Receive+0x1a2>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d114      	bne.n	8006d94 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fafe 	bl	800736c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e0af      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1b8      	bne.n	8006d12 <HAL_SPI_Receive+0x14a>
 8006da0:	e095      	b.n	8006ece <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	2b07      	cmp	r3, #7
 8006da8:	f240 808b 	bls.w	8006ec2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006dac:	e03f      	b.n	8006e2e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d114      	bne.n	8006de6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	8812      	ldrh	r2, [r2, #0]
 8006dc4:	b292      	uxth	r2, r2
 8006dc6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dcc:	1c9a      	adds	r2, r3, #2
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006de4:	e023      	b.n	8006e2e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006de6:	f7fb fa77 	bl	80022d8 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d803      	bhi.n	8006dfe <HAL_SPI_Receive+0x236>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d102      	bne.n	8006e04 <HAL_SPI_Receive+0x23c>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d114      	bne.n	8006e2e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fab1 	bl	800736c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e062      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1b9      	bne.n	8006dae <HAL_SPI_Receive+0x1e6>
 8006e3a:	e048      	b.n	8006ece <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d117      	bne.n	8006e7a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006e78:	e023      	b.n	8006ec2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7a:	f7fb fa2d 	bl	80022d8 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d803      	bhi.n	8006e92 <HAL_SPI_Receive+0x2ca>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d102      	bne.n	8006e98 <HAL_SPI_Receive+0x2d0>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d114      	bne.n	8006ec2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fa67 	bl	800736c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e018      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1b6      	bne.n	8006e3c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fa4c 	bl	800736c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	ffff0000 	.word	0xffff0000

08006f00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08e      	sub	sp, #56	; 0x38
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3320      	adds	r3, #32
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3330      	adds	r3, #48	; 0x30
 8006f22:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_SPI_TransmitReceive+0x32>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e209      	b.n	8007346 <HAL_SPI_TransmitReceive+0x446>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3a:	f7fb f9cd 	bl	80022d8 <HAL_GetTick>
 8006f3e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006f40:	887b      	ldrh	r3, [r7, #2]
 8006f42:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006f44:	887b      	ldrh	r3, [r7, #2]
 8006f46:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f4e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f56:	7efb      	ldrb	r3, [r7, #27]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d014      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x86>
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f62:	d106      	bne.n	8006f72 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006f6c:	7efb      	ldrb	r3, [r7, #27]
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d009      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
 8006f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006f80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f84:	e1df      	b.n	8007346 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x98>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x98>
 8006f92:	887b      	ldrh	r3, [r7, #2]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006faa:	e1cc      	b.n	8007346 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d003      	beq.n	8006fc0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2205      	movs	r2, #5
 8006fbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	887a      	ldrh	r2, [r7, #2]
 8006fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	887a      	ldrh	r2, [r7, #2]
 8006fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	887a      	ldrh	r2, [r7, #2]
 8006fe8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	887a      	ldrh	r2, [r7, #2]
 8006ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4b82      	ldr	r3, [pc, #520]	; (8007210 <HAL_SPI_TransmitReceive+0x310>)
 8007008:	4013      	ands	r3, r2
 800700a:	8879      	ldrh	r1, [r7, #2]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	430b      	orrs	r3, r1
 8007012:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702c:	d107      	bne.n	800703e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	2b0f      	cmp	r3, #15
 8007044:	d970      	bls.n	8007128 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007046:	e068      	b.n	800711a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d11a      	bne.n	800708c <HAL_SPI_TransmitReceive+0x18c>
 8007056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007058:	2b00      	cmp	r3, #0
 800705a:	d017      	beq.n	800708c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	1d1a      	adds	r2, r3, #4
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800708a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	f248 0308 	movw	r3, #32776	; 0x8008
 8007096:	4013      	ands	r3, r2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01a      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x1d2>
 800709c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070d2:	f7fb f901 	bl	80022d8 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070de:	429a      	cmp	r2, r3
 80070e0:	d803      	bhi.n	80070ea <HAL_SPI_TransmitReceive+0x1ea>
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d102      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x1f0>
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d114      	bne.n	800711a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f93b 	bl	800736c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e115      	b.n	8007346 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800711a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800711c:	2b00      	cmp	r3, #0
 800711e:	d193      	bne.n	8007048 <HAL_SPI_TransmitReceive+0x148>
 8007120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d190      	bne.n	8007048 <HAL_SPI_TransmitReceive+0x148>
 8007126:	e0e7      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b07      	cmp	r3, #7
 800712e:	f240 80dd 	bls.w	80072ec <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007132:	e066      	b.n	8007202 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b02      	cmp	r3, #2
 8007140:	d119      	bne.n	8007176 <HAL_SPI_TransmitReceive+0x276>
 8007142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007144:	2b00      	cmp	r3, #0
 8007146:	d016      	beq.n	8007176 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714c:	881a      	ldrh	r2, [r3, #0]
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	1c9a      	adds	r2, r3, #2
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007174:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d11a      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x2ba>
 8007184:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800718e:	6a3a      	ldr	r2, [r7, #32]
 8007190:	8812      	ldrh	r2, [r2, #0]
 8007192:	b292      	uxth	r2, r2
 8007194:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800719a:	1c9a      	adds	r2, r3, #2
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ba:	f7fb f88d 	bl	80022d8 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d803      	bhi.n	80071d2 <HAL_SPI_TransmitReceive+0x2d2>
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d102      	bne.n	80071d8 <HAL_SPI_TransmitReceive+0x2d8>
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d114      	bne.n	8007202 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f8c7 	bl	800736c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e0a1      	b.n	8007346 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007204:	2b00      	cmp	r3, #0
 8007206:	d195      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x234>
 8007208:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d192      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x234>
 800720e:	e073      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x3f8>
 8007210:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	d11b      	bne.n	800725a <HAL_SPI_TransmitReceive+0x35a>
 8007222:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007224:	2b00      	cmp	r3, #0
 8007226:	d018      	beq.n	800725a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3320      	adds	r3, #32
 8007232:	7812      	ldrb	r2, [r2, #0]
 8007234:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007258:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b01      	cmp	r3, #1
 8007266:	d11d      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x3a4>
 8007268:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d01a      	beq.n	80072a4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072a4:	f7fb f818 	bl	80022d8 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d803      	bhi.n	80072bc <HAL_SPI_TransmitReceive+0x3bc>
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d102      	bne.n	80072c2 <HAL_SPI_TransmitReceive+0x3c2>
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d114      	bne.n	80072ec <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f852 	bl	800736c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e02c      	b.n	8007346 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80072ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d190      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x314>
 80072f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d18d      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2200      	movs	r2, #0
 8007300:	2108      	movs	r1, #8
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f8d2 	bl	80074ac <SPI_WaitOnFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007314:	f043 0220 	orr.w	r2, r3, #32
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f824 	bl	800736c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e001      	b.n	8007346 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007346:	4618      	mov	r0, r3
 8007348:	3730      	adds	r7, #48	; 0x30
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop

08007350 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800735e:	b2db      	uxtb	r3, r3
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0208 	orr.w	r2, r2, #8
 800738a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0210 	orr.w	r2, r2, #16
 800739a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0201 	bic.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6919      	ldr	r1, [r3, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b3c      	ldr	r3, [pc, #240]	; (80074a8 <SPI_CloseTransfer+0x13c>)
 80073b8:	400b      	ands	r3, r1
 80073ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80073ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d014      	beq.n	8007402 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00f      	beq.n	8007402 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 0220 	orr.w	r2, r2, #32
 8007400:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b03      	cmp	r3, #3
 800740c:	d014      	beq.n	8007438 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00f      	beq.n	8007438 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800741e:	f043 0204 	orr.w	r2, r3, #4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007436:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00f      	beq.n	8007462 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007448:	f043 0201 	orr.w	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007460:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007472:	f043 0208 	orr.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800748a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	fffffc90 	.word	0xfffffc90

080074ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	4613      	mov	r3, r2
 80074ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80074bc:	e010      	b.n	80074e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074be:	f7fa ff0b 	bl	80022d8 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d803      	bhi.n	80074d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d102      	bne.n	80074dc <SPI_WaitOnFlagUntilTimeout+0x30>
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e00f      	b.n	8007500 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	4013      	ands	r3, r2
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	bf0c      	ite	eq
 80074f0:	2301      	moveq	r3, #1
 80074f2:	2300      	movne	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	461a      	mov	r2, r3
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d0df      	beq.n	80074be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	3307      	adds	r3, #7
 8007526:	08db      	lsrs	r3, r3, #3
 8007528:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e049      	b.n	80075e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d106      	bne.n	800756a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7fa fbd7 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f000 fb8b 	bl	8007c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d001      	beq.n	8007604 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e04c      	b.n	800769e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a26      	ldr	r2, [pc, #152]	; (80076ac <HAL_TIM_Base_Start+0xc0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d022      	beq.n	800765c <HAL_TIM_Base_Start+0x70>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d01d      	beq.n	800765c <HAL_TIM_Base_Start+0x70>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a22      	ldr	r2, [pc, #136]	; (80076b0 <HAL_TIM_Base_Start+0xc4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d018      	beq.n	800765c <HAL_TIM_Base_Start+0x70>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <HAL_TIM_Base_Start+0xc8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d013      	beq.n	800765c <HAL_TIM_Base_Start+0x70>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <HAL_TIM_Base_Start+0xcc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00e      	beq.n	800765c <HAL_TIM_Base_Start+0x70>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <HAL_TIM_Base_Start+0xd0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_TIM_Base_Start+0x70>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1c      	ldr	r2, [pc, #112]	; (80076c0 <HAL_TIM_Base_Start+0xd4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_TIM_Base_Start+0x70>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1b      	ldr	r2, [pc, #108]	; (80076c4 <HAL_TIM_Base_Start+0xd8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d115      	bne.n	8007688 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	4b19      	ldr	r3, [pc, #100]	; (80076c8 <HAL_TIM_Base_Start+0xdc>)
 8007664:	4013      	ands	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b06      	cmp	r3, #6
 800766c:	d015      	beq.n	800769a <HAL_TIM_Base_Start+0xae>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007674:	d011      	beq.n	800769a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007686:	e008      	b.n	800769a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e000      	b.n	800769c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40010400 	.word	0x40010400
 80076c0:	40001800 	.word	0x40001800
 80076c4:	40014000 	.word	0x40014000
 80076c8:	00010007 	.word	0x00010007

080076cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d001      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e054      	b.n	800778e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a26      	ldr	r2, [pc, #152]	; (800779c <HAL_TIM_Base_Start_IT+0xd0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d022      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770e:	d01d      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a22      	ldr	r2, [pc, #136]	; (80077a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d018      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1f      	ldr	r2, [pc, #124]	; (80077a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00e      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1e      	ldr	r2, [pc, #120]	; (80077ac <HAL_TIM_Base_Start_IT+0xe0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1c      	ldr	r2, [pc, #112]	; (80077b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d115      	bne.n	8007778 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <HAL_TIM_Base_Start_IT+0xec>)
 8007754:	4013      	ands	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b06      	cmp	r3, #6
 800775c:	d015      	beq.n	800778a <HAL_TIM_Base_Start_IT+0xbe>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007764:	d011      	beq.n	800778a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0201 	orr.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	e008      	b.n	800778a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e000      	b.n	800778c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40010000 	.word	0x40010000
 80077a0:	40000400 	.word	0x40000400
 80077a4:	40000800 	.word	0x40000800
 80077a8:	40000c00 	.word	0x40000c00
 80077ac:	40010400 	.word	0x40010400
 80077b0:	40001800 	.word	0x40001800
 80077b4:	40014000 	.word	0x40014000
 80077b8:	00010007 	.word	0x00010007

080077bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	f241 1311 	movw	r3, #4369	; 0x1111
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10f      	bne.n	8007804 <HAL_TIM_Base_Stop_IT+0x48>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	f240 4344 	movw	r3, #1092	; 0x444
 80077ee:	4013      	ands	r3, r2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <HAL_TIM_Base_Stop_IT+0x48>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b02      	cmp	r3, #2
 800782e:	d122      	bne.n	8007876 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b02      	cmp	r3, #2
 800783c:	d11b      	bne.n	8007876 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f06f 0202 	mvn.w	r2, #2
 8007846:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f9fd 	bl	8007c5c <HAL_TIM_IC_CaptureCallback>
 8007862:	e005      	b.n	8007870 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f9ef 	bl	8007c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa00 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b04      	cmp	r3, #4
 8007882:	d122      	bne.n	80078ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b04      	cmp	r3, #4
 8007890:	d11b      	bne.n	80078ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f06f 0204 	mvn.w	r2, #4
 800789a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f9d3 	bl	8007c5c <HAL_TIM_IC_CaptureCallback>
 80078b6:	e005      	b.n	80078c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f9c5 	bl	8007c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9d6 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d122      	bne.n	800791e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d11b      	bne.n	800791e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f06f 0208 	mvn.w	r2, #8
 80078ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2204      	movs	r2, #4
 80078f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f9a9 	bl	8007c5c <HAL_TIM_IC_CaptureCallback>
 800790a:	e005      	b.n	8007918 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f99b 	bl	8007c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9ac 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b10      	cmp	r3, #16
 800792a:	d122      	bne.n	8007972 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b10      	cmp	r3, #16
 8007938:	d11b      	bne.n	8007972 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f06f 0210 	mvn.w	r2, #16
 8007942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2208      	movs	r2, #8
 8007948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f97f 	bl	8007c5c <HAL_TIM_IC_CaptureCallback>
 800795e:	e005      	b.n	800796c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f971 	bl	8007c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f982 	bl	8007c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10e      	bne.n	800799e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b01      	cmp	r3, #1
 800798c:	d107      	bne.n	800799e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f06f 0201 	mvn.w	r2, #1
 8007996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7f9 ff53 	bl	8001844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a8:	2b80      	cmp	r3, #128	; 0x80
 80079aa:	d10e      	bne.n	80079ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d107      	bne.n	80079ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fb37 	bl	8008038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d8:	d10e      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d107      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fb2a 	bl	800804c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d10e      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a10:	2b40      	cmp	r3, #64	; 0x40
 8007a12:	d107      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f930 	bl	8007c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d10e      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d107      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f06f 0220 	mvn.w	r2, #32
 8007a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 faea 	bl	8008024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_TIM_ConfigClockSource+0x1c>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e0dc      	b.n	8007c2e <HAL_TIM_ConfigClockSource+0x1d6>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	4b6a      	ldr	r3, [pc, #424]	; (8007c38 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a64      	ldr	r2, [pc, #400]	; (8007c3c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	f000 80a9 	beq.w	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ab0:	4a62      	ldr	r2, [pc, #392]	; (8007c3c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	f200 80ae 	bhi.w	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ab8:	4a61      	ldr	r2, [pc, #388]	; (8007c40 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	f000 80a1 	beq.w	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ac0:	4a5f      	ldr	r2, [pc, #380]	; (8007c40 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	f200 80a6 	bhi.w	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ac8:	4a5e      	ldr	r2, [pc, #376]	; (8007c44 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	f000 8099 	beq.w	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ad0:	4a5c      	ldr	r2, [pc, #368]	; (8007c44 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	f200 809e 	bhi.w	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ad8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007adc:	f000 8091 	beq.w	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ae0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ae4:	f200 8096 	bhi.w	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aec:	f000 8089 	beq.w	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007af4:	f200 808e 	bhi.w	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afc:	d03e      	beq.n	8007b7c <HAL_TIM_ConfigClockSource+0x124>
 8007afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b02:	f200 8087 	bhi.w	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0a:	f000 8086 	beq.w	8007c1a <HAL_TIM_ConfigClockSource+0x1c2>
 8007b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b12:	d87f      	bhi.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b14:	2b70      	cmp	r3, #112	; 0x70
 8007b16:	d01a      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0xf6>
 8007b18:	2b70      	cmp	r3, #112	; 0x70
 8007b1a:	d87b      	bhi.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b1c:	2b60      	cmp	r3, #96	; 0x60
 8007b1e:	d050      	beq.n	8007bc2 <HAL_TIM_ConfigClockSource+0x16a>
 8007b20:	2b60      	cmp	r3, #96	; 0x60
 8007b22:	d877      	bhi.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b24:	2b50      	cmp	r3, #80	; 0x50
 8007b26:	d03c      	beq.n	8007ba2 <HAL_TIM_ConfigClockSource+0x14a>
 8007b28:	2b50      	cmp	r3, #80	; 0x50
 8007b2a:	d873      	bhi.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d058      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x18a>
 8007b30:	2b40      	cmp	r3, #64	; 0x40
 8007b32:	d86f      	bhi.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b34:	2b30      	cmp	r3, #48	; 0x30
 8007b36:	d064      	beq.n	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b38:	2b30      	cmp	r3, #48	; 0x30
 8007b3a:	d86b      	bhi.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d060      	beq.n	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d867      	bhi.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d05c      	beq.n	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	d05a      	beq.n	8007c02 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b4c:	e062      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	6899      	ldr	r1, [r3, #8]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f000 f9b3 	bl	8007ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	609a      	str	r2, [r3, #8]
      break;
 8007b7a:	e04f      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	6899      	ldr	r1, [r3, #8]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f000 f99c 	bl	8007ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b9e:	609a      	str	r2, [r3, #8]
      break;
 8007ba0:	e03c      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6859      	ldr	r1, [r3, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f000 f90c 	bl	8007dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2150      	movs	r1, #80	; 0x50
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f966 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007bc0:	e02c      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f000 f92b 	bl	8007e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2160      	movs	r1, #96	; 0x60
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f956 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007be0:	e01c      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	6859      	ldr	r1, [r3, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f000 f8ec 	bl	8007dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2140      	movs	r1, #64	; 0x40
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f946 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007c00:	e00c      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	f000 f93d 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007c12:	e003      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
      break;
 8007c18:	e000      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	ffceff88 	.word	0xffceff88
 8007c3c:	00100040 	.word	0x00100040
 8007c40:	00100030 	.word	0x00100030
 8007c44:	00100020 	.word	0x00100020

08007c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a40      	ldr	r2, [pc, #256]	; (8007dac <TIM_Base_SetConfig+0x114>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d013      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb6:	d00f      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a3d      	ldr	r2, [pc, #244]	; (8007db0 <TIM_Base_SetConfig+0x118>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00b      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <TIM_Base_SetConfig+0x11c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d007      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <TIM_Base_SetConfig+0x120>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a3a      	ldr	r2, [pc, #232]	; (8007dbc <TIM_Base_SetConfig+0x124>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d108      	bne.n	8007cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2f      	ldr	r2, [pc, #188]	; (8007dac <TIM_Base_SetConfig+0x114>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01f      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf8:	d01b      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2c      	ldr	r2, [pc, #176]	; (8007db0 <TIM_Base_SetConfig+0x118>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d017      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a2b      	ldr	r2, [pc, #172]	; (8007db4 <TIM_Base_SetConfig+0x11c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d013      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <TIM_Base_SetConfig+0x120>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00f      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a29      	ldr	r2, [pc, #164]	; (8007dbc <TIM_Base_SetConfig+0x124>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00b      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a28      	ldr	r2, [pc, #160]	; (8007dc0 <TIM_Base_SetConfig+0x128>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d007      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a27      	ldr	r2, [pc, #156]	; (8007dc4 <TIM_Base_SetConfig+0x12c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a26      	ldr	r2, [pc, #152]	; (8007dc8 <TIM_Base_SetConfig+0x130>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d108      	bne.n	8007d44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a10      	ldr	r2, [pc, #64]	; (8007dac <TIM_Base_SetConfig+0x114>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00f      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <TIM_Base_SetConfig+0x124>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00b      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <TIM_Base_SetConfig+0x128>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d007      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <TIM_Base_SetConfig+0x12c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a0f      	ldr	r2, [pc, #60]	; (8007dc8 <TIM_Base_SetConfig+0x130>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d103      	bne.n	8007d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	615a      	str	r2, [r3, #20]
}
 8007d9e:	bf00      	nop
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40000c00 	.word	0x40000c00
 8007dbc:	40010400 	.word	0x40010400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800

08007dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f023 030a 	bic.w	r3, r3, #10
 8007e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	621a      	str	r2, [r3, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f023 0210 	bic.w	r2, r3, #16
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	031b      	lsls	r3, r3, #12
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	621a      	str	r2, [r3, #32]
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
	...

08007e8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <TIM_ITRx_SetConfig+0x38>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f043 0307 	orr.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	609a      	str	r2, [r3, #8]
}
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	ffcfff8f 	.word	0xffcfff8f

08007ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	021a      	lsls	r2, r3, #8
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	609a      	str	r2, [r3, #8]
}
 8007efc:	bf00      	nop
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e06d      	b.n	8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a30      	ldr	r2, [pc, #192]	; (8008008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d004      	beq.n	8007f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2f      	ldr	r2, [pc, #188]	; (800800c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d108      	bne.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a20      	ldr	r2, [pc, #128]	; (8008008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d01d      	beq.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1d      	ldr	r2, [pc, #116]	; (8008010 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	; (8008014 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1a      	ldr	r2, [pc, #104]	; (8008018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a15      	ldr	r2, [pc, #84]	; (800800c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a15      	ldr	r2, [pc, #84]	; (8008020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10c      	bne.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	40010000 	.word	0x40010000
 800800c:	40010400 	.word	0x40010400
 8008010:	40000400 	.word	0x40000400
 8008014:	40000800 	.word	0x40000800
 8008018:	40000c00 	.word	0x40000c00
 800801c:	40001800 	.word	0x40001800
 8008020:	40014000 	.word	0x40014000

08008024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e042      	b.n	80080f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008078:	2b00      	cmp	r3, #0
 800807a:	d106      	bne.n	800808a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7f9 fe85 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2224      	movs	r2, #36	; 0x24
 800808e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0201 	bic.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fcd6 	bl	8008a54 <UART_SetConfig>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e022      	b.n	80080f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 fa32 	bl	8009524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f042 0201 	orr.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fab9 	bl	8009668 <UART_CheckIdleState>
 80080f6:	4603      	mov	r3, r0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	; 0x28
 8008104:	af02      	add	r7, sp, #8
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	4613      	mov	r3, r2
 800810e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008116:	2b20      	cmp	r3, #32
 8008118:	f040 8083 	bne.w	8008222 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_UART_Transmit+0x28>
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e07b      	b.n	8008224 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_UART_Transmit+0x3a>
 8008136:	2302      	movs	r3, #2
 8008138:	e074      	b.n	8008224 <HAL_UART_Transmit+0x124>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2221      	movs	r2, #33	; 0x21
 800814e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008152:	f7fa f8c1 	bl	80022d8 <HAL_GetTick>
 8008156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008170:	d108      	bne.n	8008184 <HAL_UART_Transmit+0x84>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	e003      	b.n	800818c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008188:	2300      	movs	r3, #0
 800818a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008194:	e02c      	b.n	80081f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	2180      	movs	r1, #128	; 0x80
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f001 faac 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e039      	b.n	8008224 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10b      	bne.n	80081ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	3302      	adds	r3, #2
 80081ca:	61bb      	str	r3, [r7, #24]
 80081cc:	e007      	b.n	80081de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3301      	adds	r3, #1
 80081dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1cc      	bne.n	8008196 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2200      	movs	r2, #0
 8008204:	2140      	movs	r1, #64	; 0x40
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f001 fa79 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e006      	b.n	8008224 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e000      	b.n	8008224 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008222:	2302      	movs	r3, #2
  }
}
 8008224:	4618      	mov	r0, r3
 8008226:	3720      	adds	r7, #32
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008240:	2b20      	cmp	r3, #32
 8008242:	d142      	bne.n	80082ca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <HAL_UART_Receive_IT+0x24>
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e03b      	b.n	80082cc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UART_Receive_IT+0x36>
 800825e:	2302      	movs	r3, #2
 8008260:	e034      	b.n	80082cc <HAL_UART_Receive_IT+0xa0>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a17      	ldr	r2, [pc, #92]	; (80082d4 <HAL_UART_Receive_IT+0xa8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01f      	beq.n	80082ba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d018      	beq.n	80082ba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	613b      	str	r3, [r7, #16]
   return(result);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	623b      	str	r3, [r7, #32]
 80082a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	69f9      	ldr	r1, [r7, #28]
 80082ac:	6a3a      	ldr	r2, [r7, #32]
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e6      	bne.n	8008288 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	461a      	mov	r2, r3
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f001 fae5 	bl	8009890 <UART_Start_Receive_IT>
 80082c6:	4603      	mov	r3, r0
 80082c8:	e000      	b.n	80082cc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082ca:	2302      	movs	r3, #2
  }
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	; 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	58000c00 	.word	0x58000c00

080082d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b0ba      	sub	sp, #232	; 0xe8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008302:	f640 030f 	movw	r3, #2063	; 0x80f
 8008306:	4013      	ands	r3, r2
 8008308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800830c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11b      	bne.n	800834c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d015      	beq.n	800834c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d105      	bne.n	8008338 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800832c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 835a 	beq.w	80089f6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
      }
      return;
 800834a:	e354      	b.n	80089f6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800834c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 811f 	beq.w	8008594 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008356:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800835a:	4b8b      	ldr	r3, [pc, #556]	; (8008588 <HAL_UART_IRQHandler+0x2b0>)
 800835c:	4013      	ands	r3, r2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008366:	4b89      	ldr	r3, [pc, #548]	; (800858c <HAL_UART_IRQHandler+0x2b4>)
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8112 	beq.w	8008594 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d011      	beq.n	80083a0 <HAL_UART_IRQHandler+0xc8>
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2201      	movs	r2, #1
 800838e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008396:	f043 0201 	orr.w	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <HAL_UART_IRQHandler+0xf8>
 80083ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2202      	movs	r2, #2
 80083be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c6:	f043 0204 	orr.w	r2, r3, #4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d011      	beq.n	8008400 <HAL_UART_IRQHandler+0x128>
 80083dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2204      	movs	r2, #4
 80083ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f6:	f043 0202 	orr.w	r2, r3, #2
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d017      	beq.n	800843c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800840c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800841c:	4b5a      	ldr	r3, [pc, #360]	; (8008588 <HAL_UART_IRQHandler+0x2b0>)
 800841e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2208      	movs	r2, #8
 800842a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008432:	f043 0208 	orr.w	r2, r3, #8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800843c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008444:	2b00      	cmp	r3, #0
 8008446:	d012      	beq.n	800846e <HAL_UART_IRQHandler+0x196>
 8008448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800844c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00c      	beq.n	800846e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800845c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008464:	f043 0220 	orr.w	r2, r3, #32
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 82c0 	beq.w	80089fa <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800847a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847e:	f003 0320 	and.w	r3, r3, #32
 8008482:	2b00      	cmp	r3, #0
 8008484:	d013      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d04f      	beq.n	8008572 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 fb06 	bl	8009ae4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	d141      	bne.n	800856a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008512:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800851e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800852a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1d9      	bne.n	80084e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d013      	beq.n	8008562 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853e:	4a14      	ldr	r2, [pc, #80]	; (8008590 <HAL_UART_IRQHandler+0x2b8>)
 8008540:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008546:	4618      	mov	r0, r3
 8008548:	f7fa fb44 	bl	8002bd4 <HAL_DMA_Abort_IT>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d017      	beq.n	8008582 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008560:	e00f      	b.n	8008582 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa60 	bl	8008a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	e00b      	b.n	8008582 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fa5c 	bl	8008a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008570:	e007      	b.n	8008582 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa58 	bl	8008a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008580:	e23b      	b.n	80089fa <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008582:	bf00      	nop
    return;
 8008584:	e239      	b.n	80089fa <HAL_UART_IRQHandler+0x722>
 8008586:	bf00      	nop
 8008588:	10000001 	.word	0x10000001
 800858c:	04000120 	.word	0x04000120
 8008590:	08009bb1 	.word	0x08009bb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008598:	2b01      	cmp	r3, #1
 800859a:	f040 81ce 	bne.w	800893a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 81c7 	beq.w	800893a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b0:	f003 0310 	and.w	r3, r3, #16
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 81c0 	beq.w	800893a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2210      	movs	r2, #16
 80085c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	f040 813b 	bne.w	8008848 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a8b      	ldr	r2, [pc, #556]	; (8008808 <HAL_UART_IRQHandler+0x530>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d059      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a89      	ldr	r2, [pc, #548]	; (800880c <HAL_UART_IRQHandler+0x534>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d053      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a87      	ldr	r2, [pc, #540]	; (8008810 <HAL_UART_IRQHandler+0x538>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d04d      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a85      	ldr	r2, [pc, #532]	; (8008814 <HAL_UART_IRQHandler+0x53c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d047      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a83      	ldr	r2, [pc, #524]	; (8008818 <HAL_UART_IRQHandler+0x540>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d041      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a81      	ldr	r2, [pc, #516]	; (800881c <HAL_UART_IRQHandler+0x544>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d03b      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a7f      	ldr	r2, [pc, #508]	; (8008820 <HAL_UART_IRQHandler+0x548>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d035      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a7d      	ldr	r2, [pc, #500]	; (8008824 <HAL_UART_IRQHandler+0x54c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d02f      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a7b      	ldr	r2, [pc, #492]	; (8008828 <HAL_UART_IRQHandler+0x550>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d029      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a79      	ldr	r2, [pc, #484]	; (800882c <HAL_UART_IRQHandler+0x554>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d023      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a77      	ldr	r2, [pc, #476]	; (8008830 <HAL_UART_IRQHandler+0x558>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01d      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a75      	ldr	r2, [pc, #468]	; (8008834 <HAL_UART_IRQHandler+0x55c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d017      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a73      	ldr	r2, [pc, #460]	; (8008838 <HAL_UART_IRQHandler+0x560>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d011      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a71      	ldr	r2, [pc, #452]	; (800883c <HAL_UART_IRQHandler+0x564>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00b      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a6f      	ldr	r2, [pc, #444]	; (8008840 <HAL_UART_IRQHandler+0x568>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d005      	beq.n	8008692 <HAL_UART_IRQHandler+0x3ba>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a6d      	ldr	r2, [pc, #436]	; (8008844 <HAL_UART_IRQHandler+0x56c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d105      	bne.n	800869e <HAL_UART_IRQHandler+0x3c6>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	b29b      	uxth	r3, r3
 800869c:	e004      	b.n	80086a8 <HAL_UART_IRQHandler+0x3d0>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 81a4 	beq.w	80089fe <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086c0:	429a      	cmp	r2, r3
 80086c2:	f080 819c 	bcs.w	80089fe <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086da:	f000 8086 	beq.w	80087ea <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800870c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008714:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1da      	bne.n	80086de <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800874c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008750:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008754:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800875e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e1      	bne.n	8008728 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3308      	adds	r3, #8
 800876a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800877a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008788:	66fa      	str	r2, [r7, #108]	; 0x6c
 800878a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800878e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e3      	bne.n	8008764 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ba:	f023 0310 	bic.w	r3, r3, #16
 80087be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80087ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e4      	bne.n	80087aa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7f9 fed7 	bl	8002598 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f91c 	bl	8008a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008804:	e0fb      	b.n	80089fe <HAL_UART_IRQHandler+0x726>
 8008806:	bf00      	nop
 8008808:	40020010 	.word	0x40020010
 800880c:	40020028 	.word	0x40020028
 8008810:	40020040 	.word	0x40020040
 8008814:	40020058 	.word	0x40020058
 8008818:	40020070 	.word	0x40020070
 800881c:	40020088 	.word	0x40020088
 8008820:	400200a0 	.word	0x400200a0
 8008824:	400200b8 	.word	0x400200b8
 8008828:	40020410 	.word	0x40020410
 800882c:	40020428 	.word	0x40020428
 8008830:	40020440 	.word	0x40020440
 8008834:	40020458 	.word	0x40020458
 8008838:	40020470 	.word	0x40020470
 800883c:	40020488 	.word	0x40020488
 8008840:	400204a0 	.word	0x400204a0
 8008844:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008854:	b29b      	uxth	r3, r3
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008862:	b29b      	uxth	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 80cc 	beq.w	8008a02 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800886a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80c7 	beq.w	8008a02 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008896:	647b      	str	r3, [r7, #68]	; 0x44
 8008898:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800889c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e4      	bne.n	8008874 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3308      	adds	r3, #8
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	623b      	str	r3, [r7, #32]
   return(result);
 80088ba:	6a3a      	ldr	r2, [r7, #32]
 80088bc:	4b54      	ldr	r3, [pc, #336]	; (8008a10 <HAL_UART_IRQHandler+0x738>)
 80088be:	4013      	ands	r3, r2
 80088c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3308      	adds	r3, #8
 80088ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088ce:	633a      	str	r2, [r7, #48]	; 0x30
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e3      	bne.n	80088aa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	60fb      	str	r3, [r7, #12]
   return(result);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0310 	bic.w	r3, r3, #16
 800890a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008918:	61fb      	str	r3, [r7, #28]
 800891a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	69b9      	ldr	r1, [r7, #24]
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	617b      	str	r3, [r7, #20]
   return(result);
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e4      	bne.n	80088f6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800892c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f882 	bl	8008a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008938:	e063      	b.n	8008a02 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00e      	beq.n	8008964 <HAL_UART_IRQHandler+0x68c>
 8008946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800894a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d008      	beq.n	8008964 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800895a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fdc5 	bl	800a4ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008962:	e051      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896c:	2b00      	cmp	r3, #0
 800896e:	d014      	beq.n	800899a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008978:	2b00      	cmp	r3, #0
 800897a:	d105      	bne.n	8008988 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800897c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d008      	beq.n	800899a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800898c:	2b00      	cmp	r3, #0
 800898e:	d03a      	beq.n	8008a06 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
    }
    return;
 8008998:	e035      	b.n	8008a06 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <HAL_UART_IRQHandler+0x6e2>
 80089a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 f912 	bl	8009bdc <UART_EndTransmit_IT>
    return;
 80089b8:	e026      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <HAL_UART_IRQHandler+0x702>
 80089c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 fd9e 	bl	800a514 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089d8:	e016      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d010      	beq.n	8008a08 <HAL_UART_IRQHandler+0x730>
 80089e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da0c      	bge.n	8008a08 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 fd86 	bl	800a500 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089f4:	e008      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
      return;
 80089f6:	bf00      	nop
 80089f8:	e006      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
    return;
 80089fa:	bf00      	nop
 80089fc:	e004      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
      return;
 80089fe:	bf00      	nop
 8008a00:	e002      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
      return;
 8008a02:	bf00      	nop
 8008a04:	e000      	b.n	8008a08 <HAL_UART_IRQHandler+0x730>
    return;
 8008a06:	bf00      	nop
  }
}
 8008a08:	37e8      	adds	r7, #232	; 0xe8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	effffffe 	.word	0xeffffffe

08008a14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a58:	b092      	sub	sp, #72	; 0x48
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4bbe      	ldr	r3, [pc, #760]	; (8008d7c <UART_SetConfig+0x328>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4ab3      	ldr	r2, [pc, #716]	; (8008d80 <UART_SetConfig+0x32c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d004      	beq.n	8008ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008abc:	4313      	orrs	r3, r2
 8008abe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	4baf      	ldr	r3, [pc, #700]	; (8008d84 <UART_SetConfig+0x330>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	6812      	ldr	r2, [r2, #0]
 8008ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	f023 010f 	bic.w	r1, r3, #15
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4aa6      	ldr	r2, [pc, #664]	; (8008d88 <UART_SetConfig+0x334>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d177      	bne.n	8008be4 <UART_SetConfig+0x190>
 8008af4:	4ba5      	ldr	r3, [pc, #660]	; (8008d8c <UART_SetConfig+0x338>)
 8008af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008afc:	2b28      	cmp	r3, #40	; 0x28
 8008afe:	d86d      	bhi.n	8008bdc <UART_SetConfig+0x188>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0xb4>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008bad 	.word	0x08008bad
 8008b0c:	08008bdd 	.word	0x08008bdd
 8008b10:	08008bdd 	.word	0x08008bdd
 8008b14:	08008bdd 	.word	0x08008bdd
 8008b18:	08008bdd 	.word	0x08008bdd
 8008b1c:	08008bdd 	.word	0x08008bdd
 8008b20:	08008bdd 	.word	0x08008bdd
 8008b24:	08008bdd 	.word	0x08008bdd
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bdd 	.word	0x08008bdd
 8008b30:	08008bdd 	.word	0x08008bdd
 8008b34:	08008bdd 	.word	0x08008bdd
 8008b38:	08008bdd 	.word	0x08008bdd
 8008b3c:	08008bdd 	.word	0x08008bdd
 8008b40:	08008bdd 	.word	0x08008bdd
 8008b44:	08008bdd 	.word	0x08008bdd
 8008b48:	08008bbd 	.word	0x08008bbd
 8008b4c:	08008bdd 	.word	0x08008bdd
 8008b50:	08008bdd 	.word	0x08008bdd
 8008b54:	08008bdd 	.word	0x08008bdd
 8008b58:	08008bdd 	.word	0x08008bdd
 8008b5c:	08008bdd 	.word	0x08008bdd
 8008b60:	08008bdd 	.word	0x08008bdd
 8008b64:	08008bdd 	.word	0x08008bdd
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bdd 	.word	0x08008bdd
 8008b70:	08008bdd 	.word	0x08008bdd
 8008b74:	08008bdd 	.word	0x08008bdd
 8008b78:	08008bdd 	.word	0x08008bdd
 8008b7c:	08008bdd 	.word	0x08008bdd
 8008b80:	08008bdd 	.word	0x08008bdd
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008bcd 	.word	0x08008bcd
 8008b8c:	08008bdd 	.word	0x08008bdd
 8008b90:	08008bdd 	.word	0x08008bdd
 8008b94:	08008bdd 	.word	0x08008bdd
 8008b98:	08008bdd 	.word	0x08008bdd
 8008b9c:	08008bdd 	.word	0x08008bdd
 8008ba0:	08008bdd 	.word	0x08008bdd
 8008ba4:	08008bdd 	.word	0x08008bdd
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb2:	e222      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e21e      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e21a      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e216      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008bcc:	2320      	movs	r3, #32
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e212      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008bd4:	2340      	movs	r3, #64	; 0x40
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e20e      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008bdc:	2380      	movs	r3, #128	; 0x80
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e20a      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a69      	ldr	r2, [pc, #420]	; (8008d90 <UART_SetConfig+0x33c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d130      	bne.n	8008c50 <UART_SetConfig+0x1fc>
 8008bee:	4b67      	ldr	r3, [pc, #412]	; (8008d8c <UART_SetConfig+0x338>)
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	d826      	bhi.n	8008c48 <UART_SetConfig+0x1f4>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <UART_SetConfig+0x1ac>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c21 	.word	0x08008c21
 8008c08:	08008c29 	.word	0x08008c29
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1e:	e1ec      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c20:	2304      	movs	r3, #4
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e1e8      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e1e4      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c30:	2310      	movs	r3, #16
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e1e0      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c38:	2320      	movs	r3, #32
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e1dc      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c40:	2340      	movs	r3, #64	; 0x40
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e1d8      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c48:	2380      	movs	r3, #128	; 0x80
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e1d4      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a4f      	ldr	r2, [pc, #316]	; (8008d94 <UART_SetConfig+0x340>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d130      	bne.n	8008cbc <UART_SetConfig+0x268>
 8008c5a:	4b4c      	ldr	r3, [pc, #304]	; (8008d8c <UART_SetConfig+0x338>)
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d826      	bhi.n	8008cb4 <UART_SetConfig+0x260>
 8008c66:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <UART_SetConfig+0x218>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c85 	.word	0x08008c85
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8a:	e1b6      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e1b2      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c94:	2308      	movs	r3, #8
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e1ae      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e1aa      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008ca4:	2320      	movs	r3, #32
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e1a6      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008cac:	2340      	movs	r3, #64	; 0x40
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e1a2      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008cb4:	2380      	movs	r3, #128	; 0x80
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e19e      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a35      	ldr	r2, [pc, #212]	; (8008d98 <UART_SetConfig+0x344>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d130      	bne.n	8008d28 <UART_SetConfig+0x2d4>
 8008cc6:	4b31      	ldr	r3, [pc, #196]	; (8008d8c <UART_SetConfig+0x338>)
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d826      	bhi.n	8008d20 <UART_SetConfig+0x2cc>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <UART_SetConfig+0x284>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d19 	.word	0x08008d19
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf6:	e180      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfe:	e17c      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d00:	2308      	movs	r3, #8
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d06:	e178      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0e:	e174      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d10:	2320      	movs	r3, #32
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e170      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d1e:	e16c      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d20:	2380      	movs	r3, #128	; 0x80
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d26:	e168      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1b      	ldr	r2, [pc, #108]	; (8008d9c <UART_SetConfig+0x348>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d142      	bne.n	8008db8 <UART_SetConfig+0x364>
 8008d32:	4b16      	ldr	r3, [pc, #88]	; (8008d8c <UART_SetConfig+0x338>)
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d838      	bhi.n	8008db0 <UART_SetConfig+0x35c>
 8008d3e:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <UART_SetConfig+0x2f0>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d5d 	.word	0x08008d5d
 8008d48:	08008d65 	.word	0x08008d65
 8008d4c:	08008d6d 	.word	0x08008d6d
 8008d50:	08008d75 	.word	0x08008d75
 8008d54:	08008da1 	.word	0x08008da1
 8008d58:	08008da9 	.word	0x08008da9
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e14a      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d64:	2304      	movs	r3, #4
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6a:	e146      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d72:	e142      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d74:	2310      	movs	r3, #16
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d7a:	e13e      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008d7c:	cfff69f3 	.word	0xcfff69f3
 8008d80:	58000c00 	.word	0x58000c00
 8008d84:	11fff4ff 	.word	0x11fff4ff
 8008d88:	40011000 	.word	0x40011000
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	40004400 	.word	0x40004400
 8008d94:	40004800 	.word	0x40004800
 8008d98:	40004c00 	.word	0x40004c00
 8008d9c:	40005000 	.word	0x40005000
 8008da0:	2320      	movs	r3, #32
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e128      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008da8:	2340      	movs	r3, #64	; 0x40
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e124      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e120      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4acb      	ldr	r2, [pc, #812]	; (80090ec <UART_SetConfig+0x698>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d176      	bne.n	8008eb0 <UART_SetConfig+0x45c>
 8008dc2:	4bcb      	ldr	r3, [pc, #812]	; (80090f0 <UART_SetConfig+0x69c>)
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dca:	2b28      	cmp	r3, #40	; 0x28
 8008dcc:	d86c      	bhi.n	8008ea8 <UART_SetConfig+0x454>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <UART_SetConfig+0x380>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e79 	.word	0x08008e79
 8008dd8:	08008ea9 	.word	0x08008ea9
 8008ddc:	08008ea9 	.word	0x08008ea9
 8008de0:	08008ea9 	.word	0x08008ea9
 8008de4:	08008ea9 	.word	0x08008ea9
 8008de8:	08008ea9 	.word	0x08008ea9
 8008dec:	08008ea9 	.word	0x08008ea9
 8008df0:	08008ea9 	.word	0x08008ea9
 8008df4:	08008e81 	.word	0x08008e81
 8008df8:	08008ea9 	.word	0x08008ea9
 8008dfc:	08008ea9 	.word	0x08008ea9
 8008e00:	08008ea9 	.word	0x08008ea9
 8008e04:	08008ea9 	.word	0x08008ea9
 8008e08:	08008ea9 	.word	0x08008ea9
 8008e0c:	08008ea9 	.word	0x08008ea9
 8008e10:	08008ea9 	.word	0x08008ea9
 8008e14:	08008e89 	.word	0x08008e89
 8008e18:	08008ea9 	.word	0x08008ea9
 8008e1c:	08008ea9 	.word	0x08008ea9
 8008e20:	08008ea9 	.word	0x08008ea9
 8008e24:	08008ea9 	.word	0x08008ea9
 8008e28:	08008ea9 	.word	0x08008ea9
 8008e2c:	08008ea9 	.word	0x08008ea9
 8008e30:	08008ea9 	.word	0x08008ea9
 8008e34:	08008e91 	.word	0x08008e91
 8008e38:	08008ea9 	.word	0x08008ea9
 8008e3c:	08008ea9 	.word	0x08008ea9
 8008e40:	08008ea9 	.word	0x08008ea9
 8008e44:	08008ea9 	.word	0x08008ea9
 8008e48:	08008ea9 	.word	0x08008ea9
 8008e4c:	08008ea9 	.word	0x08008ea9
 8008e50:	08008ea9 	.word	0x08008ea9
 8008e54:	08008e99 	.word	0x08008e99
 8008e58:	08008ea9 	.word	0x08008ea9
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008ea9 	.word	0x08008ea9
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008ea9 	.word	0x08008ea9
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008ea9 	.word	0x08008ea9
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7e:	e0bc      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008e80:	2304      	movs	r3, #4
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e0b8      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008e88:	2308      	movs	r3, #8
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e0b4      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008e90:	2310      	movs	r3, #16
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e0b0      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008e98:	2320      	movs	r3, #32
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9e:	e0ac      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008ea0:	2340      	movs	r3, #64	; 0x40
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e0a8      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e0a4      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a8f      	ldr	r2, [pc, #572]	; (80090f4 <UART_SetConfig+0x6a0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d130      	bne.n	8008f1c <UART_SetConfig+0x4c8>
 8008eba:	4b8d      	ldr	r3, [pc, #564]	; (80090f0 <UART_SetConfig+0x69c>)
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	d826      	bhi.n	8008f14 <UART_SetConfig+0x4c0>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <UART_SetConfig+0x478>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008ee5 	.word	0x08008ee5
 8008ed0:	08008eed 	.word	0x08008eed
 8008ed4:	08008ef5 	.word	0x08008ef5
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008f05 	.word	0x08008f05
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eea:	e086      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008eec:	2304      	movs	r3, #4
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef2:	e082      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e07e      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008efc:	2310      	movs	r3, #16
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f02:	e07a      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f04:	2320      	movs	r3, #32
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0a:	e076      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f0c:	2340      	movs	r3, #64	; 0x40
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f12:	e072      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f14:	2380      	movs	r3, #128	; 0x80
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1a:	e06e      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a75      	ldr	r2, [pc, #468]	; (80090f8 <UART_SetConfig+0x6a4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d130      	bne.n	8008f88 <UART_SetConfig+0x534>
 8008f26:	4b72      	ldr	r3, [pc, #456]	; (80090f0 <UART_SetConfig+0x69c>)
 8008f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	d826      	bhi.n	8008f80 <UART_SetConfig+0x52c>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <UART_SetConfig+0x4e4>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f51 	.word	0x08008f51
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	08008f61 	.word	0x08008f61
 8008f44:	08008f69 	.word	0x08008f69
 8008f48:	08008f71 	.word	0x08008f71
 8008f4c:	08008f79 	.word	0x08008f79
 8008f50:	2300      	movs	r3, #0
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e050      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e04c      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f60:	2308      	movs	r3, #8
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e048      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6e:	e044      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f70:	2320      	movs	r3, #32
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f76:	e040      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f78:	2340      	movs	r3, #64	; 0x40
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7e:	e03c      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f80:	2380      	movs	r3, #128	; 0x80
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f86:	e038      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a5b      	ldr	r2, [pc, #364]	; (80090fc <UART_SetConfig+0x6a8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d130      	bne.n	8008ff4 <UART_SetConfig+0x5a0>
 8008f92:	4b57      	ldr	r3, [pc, #348]	; (80090f0 <UART_SetConfig+0x69c>)
 8008f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	2b05      	cmp	r3, #5
 8008f9c:	d826      	bhi.n	8008fec <UART_SetConfig+0x598>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <UART_SetConfig+0x550>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fbd 	.word	0x08008fbd
 8008fa8:	08008fc5 	.word	0x08008fc5
 8008fac:	08008fcd 	.word	0x08008fcd
 8008fb0:	08008fd5 	.word	0x08008fd5
 8008fb4:	08008fdd 	.word	0x08008fdd
 8008fb8:	08008fe5 	.word	0x08008fe5
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc2:	e01a      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fca:	e016      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008fcc:	2308      	movs	r3, #8
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd2:	e012      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fda:	e00e      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008fdc:	2320      	movs	r3, #32
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe2:	e00a      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008fe4:	2340      	movs	r3, #64	; 0x40
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fea:	e006      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008fec:	2380      	movs	r3, #128	; 0x80
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff2:	e002      	b.n	8008ffa <UART_SetConfig+0x5a6>
 8008ff4:	2380      	movs	r3, #128	; 0x80
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a3f      	ldr	r2, [pc, #252]	; (80090fc <UART_SetConfig+0x6a8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	f040 80f8 	bne.w	80091f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009006:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800900a:	2b20      	cmp	r3, #32
 800900c:	dc46      	bgt.n	800909c <UART_SetConfig+0x648>
 800900e:	2b02      	cmp	r3, #2
 8009010:	f2c0 8082 	blt.w	8009118 <UART_SetConfig+0x6c4>
 8009014:	3b02      	subs	r3, #2
 8009016:	2b1e      	cmp	r3, #30
 8009018:	d87e      	bhi.n	8009118 <UART_SetConfig+0x6c4>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <UART_SetConfig+0x5cc>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	080090a3 	.word	0x080090a3
 8009024:	08009119 	.word	0x08009119
 8009028:	080090ab 	.word	0x080090ab
 800902c:	08009119 	.word	0x08009119
 8009030:	08009119 	.word	0x08009119
 8009034:	08009119 	.word	0x08009119
 8009038:	080090bb 	.word	0x080090bb
 800903c:	08009119 	.word	0x08009119
 8009040:	08009119 	.word	0x08009119
 8009044:	08009119 	.word	0x08009119
 8009048:	08009119 	.word	0x08009119
 800904c:	08009119 	.word	0x08009119
 8009050:	08009119 	.word	0x08009119
 8009054:	08009119 	.word	0x08009119
 8009058:	080090cb 	.word	0x080090cb
 800905c:	08009119 	.word	0x08009119
 8009060:	08009119 	.word	0x08009119
 8009064:	08009119 	.word	0x08009119
 8009068:	08009119 	.word	0x08009119
 800906c:	08009119 	.word	0x08009119
 8009070:	08009119 	.word	0x08009119
 8009074:	08009119 	.word	0x08009119
 8009078:	08009119 	.word	0x08009119
 800907c:	08009119 	.word	0x08009119
 8009080:	08009119 	.word	0x08009119
 8009084:	08009119 	.word	0x08009119
 8009088:	08009119 	.word	0x08009119
 800908c:	08009119 	.word	0x08009119
 8009090:	08009119 	.word	0x08009119
 8009094:	08009119 	.word	0x08009119
 8009098:	0800910b 	.word	0x0800910b
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	d037      	beq.n	8009110 <UART_SetConfig+0x6bc>
 80090a0:	e03a      	b.n	8009118 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80090a2:	f7fc fe77 	bl	8005d94 <HAL_RCCEx_GetD3PCLK1Freq>
 80090a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090a8:	e03c      	b.n	8009124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fc fe86 	bl	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b8:	e034      	b.n	8009124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ba:	f107 0318 	add.w	r3, r7, #24
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fc ffd2 	bl	8006068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c8:	e02c      	b.n	8009124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <UART_SetConfig+0x69c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d016      	beq.n	8009104 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090d6:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <UART_SetConfig+0x69c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	08db      	lsrs	r3, r3, #3
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	4a07      	ldr	r2, [pc, #28]	; (8009100 <UART_SetConfig+0x6ac>)
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090e8:	e01c      	b.n	8009124 <UART_SetConfig+0x6d0>
 80090ea:	bf00      	nop
 80090ec:	40011400 	.word	0x40011400
 80090f0:	58024400 	.word	0x58024400
 80090f4:	40007800 	.word	0x40007800
 80090f8:	40007c00 	.word	0x40007c00
 80090fc:	58000c00 	.word	0x58000c00
 8009100:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009104:	4b9d      	ldr	r3, [pc, #628]	; (800937c <UART_SetConfig+0x928>)
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009108:	e00c      	b.n	8009124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800910a:	4b9d      	ldr	r3, [pc, #628]	; (8009380 <UART_SetConfig+0x92c>)
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800910e:	e009      	b.n	8009124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009116:	e005      	b.n	8009124 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009122:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 81de 	beq.w	80094e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	4a94      	ldr	r2, [pc, #592]	; (8009384 <UART_SetConfig+0x930>)
 8009132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009136:	461a      	mov	r2, r3
 8009138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913a:	fbb3 f3f2 	udiv	r3, r3, r2
 800913e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914c:	429a      	cmp	r2, r3
 800914e:	d305      	bcc.n	800915c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009158:	429a      	cmp	r2, r3
 800915a:	d903      	bls.n	8009164 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009162:	e1c1      	b.n	80094e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009166:	2200      	movs	r2, #0
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	60fa      	str	r2, [r7, #12]
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	4a84      	ldr	r2, [pc, #528]	; (8009384 <UART_SetConfig+0x930>)
 8009172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009176:	b29b      	uxth	r3, r3
 8009178:	2200      	movs	r2, #0
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	607a      	str	r2, [r7, #4]
 800917e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009186:	f7f7 f8fb 	bl	8000380 <__aeabi_uldivmod>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4610      	mov	r0, r2
 8009190:	4619      	mov	r1, r3
 8009192:	f04f 0200 	mov.w	r2, #0
 8009196:	f04f 0300 	mov.w	r3, #0
 800919a:	020b      	lsls	r3, r1, #8
 800919c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091a0:	0202      	lsls	r2, r0, #8
 80091a2:	6979      	ldr	r1, [r7, #20]
 80091a4:	6849      	ldr	r1, [r1, #4]
 80091a6:	0849      	lsrs	r1, r1, #1
 80091a8:	2000      	movs	r0, #0
 80091aa:	460c      	mov	r4, r1
 80091ac:	4605      	mov	r5, r0
 80091ae:	eb12 0804 	adds.w	r8, r2, r4
 80091b2:	eb43 0905 	adc.w	r9, r3, r5
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	469a      	mov	sl, r3
 80091be:	4693      	mov	fp, r2
 80091c0:	4652      	mov	r2, sl
 80091c2:	465b      	mov	r3, fp
 80091c4:	4640      	mov	r0, r8
 80091c6:	4649      	mov	r1, r9
 80091c8:	f7f7 f8da 	bl	8000380 <__aeabi_uldivmod>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4613      	mov	r3, r2
 80091d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091da:	d308      	bcc.n	80091ee <UART_SetConfig+0x79a>
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e2:	d204      	bcs.n	80091ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ea:	60da      	str	r2, [r3, #12]
 80091ec:	e17c      	b.n	80094e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80091f4:	e178      	b.n	80094e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091fe:	f040 80c5 	bne.w	800938c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009202:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009206:	2b20      	cmp	r3, #32
 8009208:	dc48      	bgt.n	800929c <UART_SetConfig+0x848>
 800920a:	2b00      	cmp	r3, #0
 800920c:	db7b      	blt.n	8009306 <UART_SetConfig+0x8b2>
 800920e:	2b20      	cmp	r3, #32
 8009210:	d879      	bhi.n	8009306 <UART_SetConfig+0x8b2>
 8009212:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <UART_SetConfig+0x7c4>)
 8009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009218:	080092a3 	.word	0x080092a3
 800921c:	080092ab 	.word	0x080092ab
 8009220:	08009307 	.word	0x08009307
 8009224:	08009307 	.word	0x08009307
 8009228:	080092b3 	.word	0x080092b3
 800922c:	08009307 	.word	0x08009307
 8009230:	08009307 	.word	0x08009307
 8009234:	08009307 	.word	0x08009307
 8009238:	080092c3 	.word	0x080092c3
 800923c:	08009307 	.word	0x08009307
 8009240:	08009307 	.word	0x08009307
 8009244:	08009307 	.word	0x08009307
 8009248:	08009307 	.word	0x08009307
 800924c:	08009307 	.word	0x08009307
 8009250:	08009307 	.word	0x08009307
 8009254:	08009307 	.word	0x08009307
 8009258:	080092d3 	.word	0x080092d3
 800925c:	08009307 	.word	0x08009307
 8009260:	08009307 	.word	0x08009307
 8009264:	08009307 	.word	0x08009307
 8009268:	08009307 	.word	0x08009307
 800926c:	08009307 	.word	0x08009307
 8009270:	08009307 	.word	0x08009307
 8009274:	08009307 	.word	0x08009307
 8009278:	08009307 	.word	0x08009307
 800927c:	08009307 	.word	0x08009307
 8009280:	08009307 	.word	0x08009307
 8009284:	08009307 	.word	0x08009307
 8009288:	08009307 	.word	0x08009307
 800928c:	08009307 	.word	0x08009307
 8009290:	08009307 	.word	0x08009307
 8009294:	08009307 	.word	0x08009307
 8009298:	080092f9 	.word	0x080092f9
 800929c:	2b40      	cmp	r3, #64	; 0x40
 800929e:	d02e      	beq.n	80092fe <UART_SetConfig+0x8aa>
 80092a0:	e031      	b.n	8009306 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a2:	f7fb fe05 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
 80092a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092a8:	e033      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092aa:	f7fb fe17 	bl	8004edc <HAL_RCC_GetPCLK2Freq>
 80092ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092b0:	e02f      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fc fd82 	bl	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c0:	e027      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c2:	f107 0318 	add.w	r3, r7, #24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fc fece 	bl	8006068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092d0:	e01f      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092d2:	4b2d      	ldr	r3, [pc, #180]	; (8009388 <UART_SetConfig+0x934>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092de:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <UART_SetConfig+0x934>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	08db      	lsrs	r3, r3, #3
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	4a24      	ldr	r2, [pc, #144]	; (800937c <UART_SetConfig+0x928>)
 80092ea:	fa22 f303 	lsr.w	r3, r2, r3
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092f0:	e00f      	b.n	8009312 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092f2:	4b22      	ldr	r3, [pc, #136]	; (800937c <UART_SetConfig+0x928>)
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f6:	e00c      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092f8:	4b21      	ldr	r3, [pc, #132]	; (8009380 <UART_SetConfig+0x92c>)
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092fc:	e009      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009304:	e005      	b.n	8009312 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 80e7 	beq.w	80094e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	4a19      	ldr	r2, [pc, #100]	; (8009384 <UART_SetConfig+0x930>)
 8009320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009324:	461a      	mov	r2, r3
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	fbb3 f3f2 	udiv	r3, r3, r2
 800932c:	005a      	lsls	r2, r3, #1
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	441a      	add	r2, r3
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	fbb2 f3f3 	udiv	r3, r2, r3
 800933e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	2b0f      	cmp	r3, #15
 8009344:	d916      	bls.n	8009374 <UART_SetConfig+0x920>
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800934c:	d212      	bcs.n	8009374 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	b29b      	uxth	r3, r3
 8009352:	f023 030f 	bic.w	r3, r3, #15
 8009356:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	b29b      	uxth	r3, r3
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	b29a      	uxth	r2, r3
 8009364:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009366:	4313      	orrs	r3, r2
 8009368:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009370:	60da      	str	r2, [r3, #12]
 8009372:	e0b9      	b.n	80094e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800937a:	e0b5      	b.n	80094e8 <UART_SetConfig+0xa94>
 800937c:	03d09000 	.word	0x03d09000
 8009380:	003d0900 	.word	0x003d0900
 8009384:	0800b824 	.word	0x0800b824
 8009388:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800938c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009390:	2b20      	cmp	r3, #32
 8009392:	dc49      	bgt.n	8009428 <UART_SetConfig+0x9d4>
 8009394:	2b00      	cmp	r3, #0
 8009396:	db7c      	blt.n	8009492 <UART_SetConfig+0xa3e>
 8009398:	2b20      	cmp	r3, #32
 800939a:	d87a      	bhi.n	8009492 <UART_SetConfig+0xa3e>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <UART_SetConfig+0x950>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	0800942f 	.word	0x0800942f
 80093a8:	08009437 	.word	0x08009437
 80093ac:	08009493 	.word	0x08009493
 80093b0:	08009493 	.word	0x08009493
 80093b4:	0800943f 	.word	0x0800943f
 80093b8:	08009493 	.word	0x08009493
 80093bc:	08009493 	.word	0x08009493
 80093c0:	08009493 	.word	0x08009493
 80093c4:	0800944f 	.word	0x0800944f
 80093c8:	08009493 	.word	0x08009493
 80093cc:	08009493 	.word	0x08009493
 80093d0:	08009493 	.word	0x08009493
 80093d4:	08009493 	.word	0x08009493
 80093d8:	08009493 	.word	0x08009493
 80093dc:	08009493 	.word	0x08009493
 80093e0:	08009493 	.word	0x08009493
 80093e4:	0800945f 	.word	0x0800945f
 80093e8:	08009493 	.word	0x08009493
 80093ec:	08009493 	.word	0x08009493
 80093f0:	08009493 	.word	0x08009493
 80093f4:	08009493 	.word	0x08009493
 80093f8:	08009493 	.word	0x08009493
 80093fc:	08009493 	.word	0x08009493
 8009400:	08009493 	.word	0x08009493
 8009404:	08009493 	.word	0x08009493
 8009408:	08009493 	.word	0x08009493
 800940c:	08009493 	.word	0x08009493
 8009410:	08009493 	.word	0x08009493
 8009414:	08009493 	.word	0x08009493
 8009418:	08009493 	.word	0x08009493
 800941c:	08009493 	.word	0x08009493
 8009420:	08009493 	.word	0x08009493
 8009424:	08009485 	.word	0x08009485
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d02e      	beq.n	800948a <UART_SetConfig+0xa36>
 800942c:	e031      	b.n	8009492 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800942e:	f7fb fd3f 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
 8009432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009434:	e033      	b.n	800949e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009436:	f7fb fd51 	bl	8004edc <HAL_RCC_GetPCLK2Freq>
 800943a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800943c:	e02f      	b.n	800949e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009442:	4618      	mov	r0, r3
 8009444:	f7fc fcbc 	bl	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800944c:	e027      	b.n	800949e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944e:	f107 0318 	add.w	r3, r7, #24
 8009452:	4618      	mov	r0, r3
 8009454:	f7fc fe08 	bl	8006068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800945c:	e01f      	b.n	800949e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800945e:	4b2d      	ldr	r3, [pc, #180]	; (8009514 <UART_SetConfig+0xac0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800946a:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <UART_SetConfig+0xac0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	08db      	lsrs	r3, r3, #3
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	4a28      	ldr	r2, [pc, #160]	; (8009518 <UART_SetConfig+0xac4>)
 8009476:	fa22 f303 	lsr.w	r3, r2, r3
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800947c:	e00f      	b.n	800949e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800947e:	4b26      	ldr	r3, [pc, #152]	; (8009518 <UART_SetConfig+0xac4>)
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009482:	e00c      	b.n	800949e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009484:	4b25      	ldr	r3, [pc, #148]	; (800951c <UART_SetConfig+0xac8>)
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009488:	e009      	b.n	800949e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800948a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009490:	e005      	b.n	800949e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800949c:	bf00      	nop
    }

    if (pclk != 0U)
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d021      	beq.n	80094e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <UART_SetConfig+0xacc>)
 80094aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ae:	461a      	mov	r2, r3
 80094b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	441a      	add	r2, r3
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	2b0f      	cmp	r3, #15
 80094cc:	d909      	bls.n	80094e2 <UART_SetConfig+0xa8e>
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d4:	d205      	bcs.n	80094e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	b29a      	uxth	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60da      	str	r2, [r3, #12]
 80094e0:	e002      	b.n	80094e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2200      	movs	r2, #0
 80094fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2200      	movs	r2, #0
 8009502:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009504:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009508:	4618      	mov	r0, r3
 800950a:	3748      	adds	r7, #72	; 0x48
 800950c:	46bd      	mov	sp, r7
 800950e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009512:	bf00      	nop
 8009514:	58024400 	.word	0x58024400
 8009518:	03d09000 	.word	0x03d09000
 800951c:	003d0900 	.word	0x003d0900
 8009520:	0800b824 	.word	0x0800b824

08009524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00a      	beq.n	800954e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009596:	f003 0308 	and.w	r3, r3, #8
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b8:	f003 0310 	and.w	r3, r3, #16
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009600:	2b00      	cmp	r3, #0
 8009602:	d01a      	beq.n	800963a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009622:	d10a      	bne.n	800963a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	605a      	str	r2, [r3, #4]
  }
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af02      	add	r7, sp, #8
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009678:	f7f8 fe2e 	bl	80022d8 <HAL_GetTick>
 800967c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0308 	and.w	r3, r3, #8
 8009688:	2b08      	cmp	r3, #8
 800968a:	d10e      	bne.n	80096aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800968c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f82f 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e025      	b.n	80096f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d10e      	bne.n	80096d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f819 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e00f      	b.n	80096f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2220      	movs	r2, #32
 80096da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b09c      	sub	sp, #112	; 0x70
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	603b      	str	r3, [r7, #0]
 800970a:	4613      	mov	r3, r2
 800970c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970e:	e0a9      	b.n	8009864 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	f000 80a5 	beq.w	8009864 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7f8 fddd 	bl	80022d8 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <UART_WaitOnFlagUntilTimeout+0x32>
 800972a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800972c:	2b00      	cmp	r3, #0
 800972e:	d140      	bne.n	80097b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800973e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009744:	667b      	str	r3, [r7, #100]	; 0x64
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800974e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009750:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800975c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e6      	bne.n	8009730 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	663b      	str	r3, [r7, #96]	; 0x60
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009782:	64ba      	str	r2, [r7, #72]	; 0x48
 8009784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e5      	bne.n	8009762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e069      	b.n	8009886 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d051      	beq.n	8009864 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ce:	d149      	bne.n	8009864 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f8:	637b      	str	r3, [r7, #52]	; 0x34
 80097fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e6      	bne.n	80097da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	613b      	str	r3, [r7, #16]
   return(result);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f023 0301 	bic.w	r3, r3, #1
 8009822:	66bb      	str	r3, [r7, #104]	; 0x68
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3308      	adds	r3, #8
 800982a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800982c:	623a      	str	r2, [r7, #32]
 800982e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	69f9      	ldr	r1, [r7, #28]
 8009832:	6a3a      	ldr	r2, [r7, #32]
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	61bb      	str	r3, [r7, #24]
   return(result);
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e5      	bne.n	800980c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2220      	movs	r2, #32
 8009844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2220      	movs	r2, #32
 800984c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e010      	b.n	8009886 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	69da      	ldr	r2, [r3, #28]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	4013      	ands	r3, r2
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	429a      	cmp	r2, r3
 8009872:	bf0c      	ite	eq
 8009874:	2301      	moveq	r3, #1
 8009876:	2300      	movne	r3, #0
 8009878:	b2db      	uxtb	r3, r3
 800987a:	461a      	mov	r2, r3
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	429a      	cmp	r2, r3
 8009880:	f43f af46 	beq.w	8009710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3770      	adds	r7, #112	; 0x70
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009890:	b480      	push	{r7}
 8009892:	b0a3      	sub	sp, #140	; 0x8c
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	88fa      	ldrh	r2, [r7, #6]
 80098a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	88fa      	ldrh	r2, [r7, #6]
 80098b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c2:	d10e      	bne.n	80098e2 <UART_Start_Receive_IT+0x52>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d105      	bne.n	80098d8 <UART_Start_Receive_IT+0x48>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098d6:	e02d      	b.n	8009934 <UART_Start_Receive_IT+0xa4>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	22ff      	movs	r2, #255	; 0xff
 80098dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098e0:	e028      	b.n	8009934 <UART_Start_Receive_IT+0xa4>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10d      	bne.n	8009906 <UART_Start_Receive_IT+0x76>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d104      	bne.n	80098fc <UART_Start_Receive_IT+0x6c>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	22ff      	movs	r2, #255	; 0xff
 80098f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098fa:	e01b      	b.n	8009934 <UART_Start_Receive_IT+0xa4>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	227f      	movs	r2, #127	; 0x7f
 8009900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009904:	e016      	b.n	8009934 <UART_Start_Receive_IT+0xa4>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800990e:	d10d      	bne.n	800992c <UART_Start_Receive_IT+0x9c>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d104      	bne.n	8009922 <UART_Start_Receive_IT+0x92>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	227f      	movs	r2, #127	; 0x7f
 800991c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009920:	e008      	b.n	8009934 <UART_Start_Receive_IT+0xa4>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	223f      	movs	r2, #63	; 0x3f
 8009926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800992a:	e003      	b.n	8009934 <UART_Start_Receive_IT+0xa4>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2222      	movs	r2, #34	; 0x22
 8009940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3308      	adds	r3, #8
 800994a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009968:	673a      	str	r2, [r7, #112]	; 0x70
 800996a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800996e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e3      	bne.n	8009944 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009984:	d153      	bne.n	8009a2e <UART_Start_Receive_IT+0x19e>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800998c:	88fa      	ldrh	r2, [r7, #6]
 800998e:	429a      	cmp	r2, r3
 8009990:	d34d      	bcc.n	8009a2e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999a:	d107      	bne.n	80099ac <UART_Start_Receive_IT+0x11c>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d103      	bne.n	80099ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a4b      	ldr	r2, [pc, #300]	; (8009ad4 <UART_Start_Receive_IT+0x244>)
 80099a8:	671a      	str	r2, [r3, #112]	; 0x70
 80099aa:	e002      	b.n	80099b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4a4a      	ldr	r2, [pc, #296]	; (8009ad8 <UART_Start_Receive_IT+0x248>)
 80099b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01a      	beq.n	80099f8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e4      	bne.n	80099c2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3308      	adds	r3, #8
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a02:	e853 3f00 	ldrex	r3, [r3]
 8009a06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3308      	adds	r3, #8
 8009a16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a18:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a20:	e841 2300 	strex	r3, r2, [r1]
 8009a24:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1e5      	bne.n	80099f8 <UART_Start_Receive_IT+0x168>
 8009a2c:	e04a      	b.n	8009ac4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a36:	d107      	bne.n	8009a48 <UART_Start_Receive_IT+0x1b8>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4a26      	ldr	r2, [pc, #152]	; (8009adc <UART_Start_Receive_IT+0x24c>)
 8009a44:	671a      	str	r2, [r3, #112]	; 0x70
 8009a46:	e002      	b.n	8009a4e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4a25      	ldr	r2, [pc, #148]	; (8009ae0 <UART_Start_Receive_IT+0x250>)
 8009a4c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d019      	beq.n	8009a92 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a72:	677b      	str	r3, [r7, #116]	; 0x74
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e6      	bne.n	8009a5e <UART_Start_Receive_IT+0x1ce>
 8009a90:	e018      	b.n	8009ac4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f043 0320 	orr.w	r3, r3, #32
 8009aa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ab0:	623b      	str	r3, [r7, #32]
 8009ab2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	69f9      	ldr	r1, [r7, #28]
 8009ab6:	6a3a      	ldr	r2, [r7, #32]
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e6      	bne.n	8009a92 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	378c      	adds	r7, #140	; 0x8c
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	0800a1ed 	.word	0x0800a1ed
 8009ad8:	08009ef5 	.word	0x08009ef5
 8009adc:	08009d93 	.word	0x08009d93
 8009ae0:	08009c33 	.word	0x08009c33

08009ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b095      	sub	sp, #84	; 0x54
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e6      	bne.n	8009aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	4b1e      	ldr	r3, [pc, #120]	; (8009bac <UART_EndRxTransfer+0xc8>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e5      	bne.n	8009b1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d118      	bne.n	8009b8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f023 0310 	bic.w	r3, r3, #16
 8009b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	461a      	mov	r2, r3
 8009b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	6979      	ldr	r1, [r7, #20]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	613b      	str	r3, [r7, #16]
   return(result);
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e6      	bne.n	8009b5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009ba0:	bf00      	nop
 8009ba2:	3754      	adds	r7, #84	; 0x54
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	effffffe 	.word	0xeffffffe

08009bb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7fe ff2a 	bl	8008a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bd4:	bf00      	nop
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	6979      	ldr	r1, [r7, #20]
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e6      	bne.n	8009be4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7fe fef5 	bl	8008a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c2a:	bf00      	nop
 8009c2c:	3720      	adds	r7, #32
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b096      	sub	sp, #88	; 0x58
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4a:	2b22      	cmp	r3, #34	; 0x22
 8009c4c:	f040 8095 	bne.w	8009d7a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009c5e:	b2d9      	uxtb	r1, r3
 8009c60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c6a:	400a      	ands	r2, r1
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d178      	bne.n	8009d8a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cac:	653b      	str	r3, [r7, #80]	; 0x50
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cbe:	e841 2300 	strex	r3, r2, [r1]
 8009cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e6      	bne.n	8009c98 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3308      	adds	r3, #8
 8009cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	f023 0301 	bic.w	r3, r3, #1
 8009ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cea:	633a      	str	r2, [r7, #48]	; 0x30
 8009cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e5      	bne.n	8009cca <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d12e      	bne.n	8009d72 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0310 	bic.w	r3, r3, #16
 8009d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d38:	61fb      	str	r3, [r7, #28]
 8009d3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	69b9      	ldr	r1, [r7, #24]
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	e841 2300 	strex	r3, r2, [r1]
 8009d44:	617b      	str	r3, [r7, #20]
   return(result);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e6      	bne.n	8009d1a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b10      	cmp	r3, #16
 8009d58:	d103      	bne.n	8009d62 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2210      	movs	r2, #16
 8009d60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7fe fe66 	bl	8008a3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d70:	e00b      	b.n	8009d8a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7f7 f8cc 	bl	8000f10 <HAL_UART_RxCpltCallback>
}
 8009d78:	e007      	b.n	8009d8a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	699a      	ldr	r2, [r3, #24]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f042 0208 	orr.w	r2, r2, #8
 8009d88:	619a      	str	r2, [r3, #24]
}
 8009d8a:	bf00      	nop
 8009d8c:	3758      	adds	r7, #88	; 0x58
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b096      	sub	sp, #88	; 0x58
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009da0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009daa:	2b22      	cmp	r3, #34	; 0x22
 8009dac:	f040 8095 	bne.w	8009eda <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dbe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009dc0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009dc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009dc8:	4013      	ands	r3, r2
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd4:	1c9a      	adds	r2, r3, #2
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	3b01      	subs	r3, #1
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d178      	bne.n	8009eea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e16:	643b      	str	r3, [r7, #64]	; 0x40
 8009e18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e6      	bne.n	8009df8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	f023 0301 	bic.w	r3, r3, #1
 8009e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e5      	bne.n	8009e2a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d12e      	bne.n	8009ed2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f023 0310 	bic.w	r3, r3, #16
 8009e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	461a      	mov	r2, r3
 8009e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e98:	61bb      	str	r3, [r7, #24]
 8009e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6979      	ldr	r1, [r7, #20]
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e6      	bne.n	8009e7a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f003 0310 	and.w	r3, r3, #16
 8009eb6:	2b10      	cmp	r3, #16
 8009eb8:	d103      	bne.n	8009ec2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7fe fdb6 	bl	8008a3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ed0:	e00b      	b.n	8009eea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7f7 f81c 	bl	8000f10 <HAL_UART_RxCpltCallback>
}
 8009ed8:	e007      	b.n	8009eea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699a      	ldr	r2, [r3, #24]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0208 	orr.w	r2, r2, #8
 8009ee8:	619a      	str	r2, [r3, #24]
}
 8009eea:	bf00      	nop
 8009eec:	3758      	adds	r7, #88	; 0x58
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b0a6      	sub	sp, #152	; 0x98
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f02:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2a:	2b22      	cmp	r3, #34	; 0x22
 8009f2c:	f040 814d 	bne.w	800a1ca <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f36:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f3a:	e0f4      	b.n	800a126 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f46:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009f4a:	b2d9      	uxtb	r1, r3
 8009f4c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f56:	400a      	ands	r2, r1
 8009f58:	b2d2      	uxtb	r2, r2
 8009f5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d053      	beq.n	800a036 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d011      	beq.n	8009fbe <UART_RxISR_8BIT_FIFOEN+0xca>
 8009f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2201      	movs	r2, #1
 8009fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb4:	f043 0201 	orr.w	r2, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00b      	beq.n	8009fee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fe4:	f043 0204 	orr.w	r2, r3, #4
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d011      	beq.n	800a01e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00b      	beq.n	800a01e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2204      	movs	r2, #4
 800a00c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a014:	f043 0202 	orr.w	r2, r3, #2
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d006      	beq.n	800a036 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7fe fcfd 	bl	8008a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d171      	bne.n	800a126 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a04a:	e853 3f00 	ldrex	r3, [r3]
 800a04e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a064:	66bb      	str	r3, [r7, #104]	; 0x68
 800a066:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a068:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a06a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a06c:	e841 2300 	strex	r3, r2, [r1]
 800a070:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1e4      	bne.n	800a042 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3308      	adds	r3, #8
 800a07e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a082:	e853 3f00 	ldrex	r3, [r3]
 800a086:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a08a:	4b56      	ldr	r3, [pc, #344]	; (800a1e4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3308      	adds	r3, #8
 800a096:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a098:	657a      	str	r2, [r7, #84]	; 0x54
 800a09a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a09e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0a0:	e841 2300 	strex	r3, r2, [r1]
 800a0a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1e5      	bne.n	800a078 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d12e      	bne.n	800a120 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	f023 0310 	bic.w	r3, r3, #16
 800a0dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e6:	643b      	str	r3, [r7, #64]	; 0x40
 800a0e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0ee:	e841 2300 	strex	r3, r2, [r1]
 800a0f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1e6      	bne.n	800a0c8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	2b10      	cmp	r3, #16
 800a106:	d103      	bne.n	800a110 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2210      	movs	r2, #16
 800a10e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7fe fc8f 	bl	8008a3c <HAL_UARTEx_RxEventCallback>
 800a11e:	e002      	b.n	800a126 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7f6 fef5 	bl	8000f10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d006      	beq.n	800a13c <UART_RxISR_8BIT_FIFOEN+0x248>
 800a12e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a132:	f003 0320 	and.w	r3, r3, #32
 800a136:	2b00      	cmp	r3, #0
 800a138:	f47f af00 	bne.w	8009f3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a142:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a146:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d045      	beq.n	800a1da <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a158:	429a      	cmp	r2, r3
 800a15a:	d23e      	bcs.n	800a1da <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3308      	adds	r3, #8
 800a162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a172:	673b      	str	r3, [r7, #112]	; 0x70
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3308      	adds	r3, #8
 800a17a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a17c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a184:	e841 2300 	strex	r3, r2, [r1]
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e5      	bne.n	800a15c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a194:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	f043 0320 	orr.w	r3, r3, #32
 800a1aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b4:	61bb      	str	r3, [r7, #24]
 800a1b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6979      	ldr	r1, [r7, #20]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e6      	bne.n	800a196 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1c8:	e007      	b.n	800a1da <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f042 0208 	orr.w	r2, r2, #8
 800a1d8:	619a      	str	r2, [r3, #24]
}
 800a1da:	bf00      	nop
 800a1dc:	3798      	adds	r7, #152	; 0x98
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	effffffe 	.word	0xeffffffe
 800a1e8:	08009c33 	.word	0x08009c33

0800a1ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b0a8      	sub	sp, #160	; 0xa0
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a222:	2b22      	cmp	r3, #34	; 0x22
 800a224:	f040 8151 	bne.w	800a4ca <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a22e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a232:	e0f8      	b.n	800a426 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a246:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a24a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a24e:	4013      	ands	r3, r2
 800a250:	b29a      	uxth	r2, r3
 800a252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a256:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25c:	1c9a      	adds	r2, r3, #2
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a27e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	2b00      	cmp	r3, #0
 800a288:	d053      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a28a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d011      	beq.n	800a2ba <UART_RxISR_16BIT_FIFOEN+0xce>
 800a296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2b0:	f043 0201 	orr.w	r2, r3, #1
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d011      	beq.n	800a2ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a2c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2e0:	f043 0204 	orr.w	r2, r3, #4
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d011      	beq.n	800a31a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a2f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00b      	beq.n	800a31a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2204      	movs	r2, #4
 800a308:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a310:	f043 0202 	orr.w	r2, r3, #2
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a320:	2b00      	cmp	r3, #0
 800a322:	d006      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7fe fb7f 	bl	8008a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a338:	b29b      	uxth	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d173      	bne.n	800a426 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a34c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a34e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a360:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a362:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a366:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a36e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e4      	bne.n	800a33e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3308      	adds	r3, #8
 800a37a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a386:	4b57      	ldr	r3, [pc, #348]	; (800a4e4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800a388:	4013      	ands	r3, r2
 800a38a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a398:	65ba      	str	r2, [r7, #88]	; 0x58
 800a39a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a39e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e3      	bne.n	800a374 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d12e      	bne.n	800a420 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d8:	f023 0310 	bic.w	r3, r3, #16
 800a3dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a3e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a3e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e6      	bne.n	800a3c8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	f003 0310 	and.w	r3, r3, #16
 800a404:	2b10      	cmp	r3, #16
 800a406:	d103      	bne.n	800a410 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2210      	movs	r2, #16
 800a40e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7fe fb0f 	bl	8008a3c <HAL_UARTEx_RxEventCallback>
 800a41e:	e002      	b.n	800a426 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7f6 fd75 	bl	8000f10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a426:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d006      	beq.n	800a43c <UART_RxISR_16BIT_FIFOEN+0x250>
 800a42e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a432:	f003 0320 	and.w	r3, r3, #32
 800a436:	2b00      	cmp	r3, #0
 800a438:	f47f aefc 	bne.w	800a234 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a442:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a446:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d045      	beq.n	800a4da <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a454:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a458:	429a      	cmp	r2, r3
 800a45a:	d23e      	bcs.n	800a4da <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3308      	adds	r3, #8
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	e853 3f00 	ldrex	r3, [r3]
 800a46a:	623b      	str	r3, [r7, #32]
   return(result);
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a472:	677b      	str	r3, [r7, #116]	; 0x74
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a47c:	633a      	str	r2, [r7, #48]	; 0x30
 800a47e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a484:	e841 2300 	strex	r3, r2, [r1]
 800a488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e5      	bne.n	800a45c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a15      	ldr	r2, [pc, #84]	; (800a4e8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a494:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	e853 3f00 	ldrex	r3, [r3]
 800a4a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f043 0320 	orr.w	r3, r3, #32
 800a4aa:	673b      	str	r3, [r7, #112]	; 0x70
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4b4:	61fb      	str	r3, [r7, #28]
 800a4b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b8:	69b9      	ldr	r1, [r7, #24]
 800a4ba:	69fa      	ldr	r2, [r7, #28]
 800a4bc:	e841 2300 	strex	r3, r2, [r1]
 800a4c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1e6      	bne.n	800a496 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4c8:	e007      	b.n	800a4da <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699a      	ldr	r2, [r3, #24]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0208 	orr.w	r2, r2, #8
 800a4d8:	619a      	str	r2, [r3, #24]
}
 800a4da:	bf00      	nop
 800a4dc:	37a0      	adds	r7, #160	; 0xa0
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	effffffe 	.word	0xeffffffe
 800a4e8:	08009d93 	.word	0x08009d93

0800a4ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <HAL_UARTEx_DisableFifoMode+0x16>
 800a53a:	2302      	movs	r3, #2
 800a53c:	e027      	b.n	800a58e <HAL_UARTEx_DisableFifoMode+0x66>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2224      	movs	r2, #36	; 0x24
 800a54a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 0201 	bic.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a56c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2220      	movs	r2, #32
 800a580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e02d      	b.n	800a60e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2224      	movs	r2, #36	; 0x24
 800a5be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0201 	bic.w	r2, r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f850 	bl	800a694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a62a:	2302      	movs	r3, #2
 800a62c:	e02d      	b.n	800a68a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2224      	movs	r2, #36	; 0x24
 800a63a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f022 0201 	bic.w	r2, r2, #1
 800a654:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f812 	bl	800a694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d108      	bne.n	800a6b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6b4:	e031      	b.n	800a71a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6b6:	2310      	movs	r3, #16
 800a6b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	0e5b      	lsrs	r3, r3, #25
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	0f5b      	lsrs	r3, r3, #29
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f003 0307 	and.w	r3, r3, #7
 800a6dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
 800a6e0:	7b3a      	ldrb	r2, [r7, #12]
 800a6e2:	4911      	ldr	r1, [pc, #68]	; (800a728 <UARTEx_SetNbDataToProcess+0x94>)
 800a6e4:	5c8a      	ldrb	r2, [r1, r2]
 800a6e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ea:	7b3a      	ldrb	r2, [r7, #12]
 800a6ec:	490f      	ldr	r1, [pc, #60]	; (800a72c <UARTEx_SetNbDataToProcess+0x98>)
 800a6ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
 800a6fe:	7b7a      	ldrb	r2, [r7, #13]
 800a700:	4909      	ldr	r1, [pc, #36]	; (800a728 <UARTEx_SetNbDataToProcess+0x94>)
 800a702:	5c8a      	ldrb	r2, [r1, r2]
 800a704:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a708:	7b7a      	ldrb	r2, [r7, #13]
 800a70a:	4908      	ldr	r1, [pc, #32]	; (800a72c <UARTEx_SetNbDataToProcess+0x98>)
 800a70c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a70e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a712:	b29a      	uxth	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a71a:	bf00      	nop
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	0800b83c 	.word	0x0800b83c
 800a72c:	0800b844 	.word	0x0800b844

0800a730 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a730:	b084      	sub	sp, #16
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	f107 001c 	add.w	r0, r7, #28
 800a73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	2b01      	cmp	r3, #1
 800a746:	d120      	bne.n	800a78a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	4b2a      	ldr	r3, [pc, #168]	; (800a804 <USB_CoreInit+0xd4>)
 800a75a:	4013      	ands	r3, r2
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d105      	bne.n	800a77e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 faac 	bl	800acdc <USB_CoreReset>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]
 800a788:	e01a      	b.n	800a7c0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 faa0 	bl	800acdc <USB_CoreReset>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	639a      	str	r2, [r3, #56]	; 0x38
 800a7b2:	e005      	b.n	800a7c0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d116      	bne.n	800a7f4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <USB_CoreInit+0xd8>)
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f043 0206 	orr.w	r2, r3, #6
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f043 0220 	orr.w	r2, r3, #32
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a800:	b004      	add	sp, #16
 800a802:	4770      	bx	lr
 800a804:	ffbdffbf 	.word	0xffbdffbf
 800a808:	03ee0000 	.word	0x03ee0000

0800a80c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f023 0201 	bic.w	r2, r3, #1
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	460b      	mov	r3, r1
 800a838:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d115      	bne.n	800a87c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a85c:	2001      	movs	r0, #1
 800a85e:	f7f7 fd47 	bl	80022f0 <HAL_Delay>
      ms++;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3301      	adds	r3, #1
 800a866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fa29 	bl	800acc0 <USB_GetMode>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b01      	cmp	r3, #1
 800a872:	d01e      	beq.n	800a8b2 <USB_SetCurrentMode+0x84>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b31      	cmp	r3, #49	; 0x31
 800a878:	d9f0      	bls.n	800a85c <USB_SetCurrentMode+0x2e>
 800a87a:	e01a      	b.n	800a8b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d115      	bne.n	800a8ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a88e:	2001      	movs	r0, #1
 800a890:	f7f7 fd2e 	bl	80022f0 <HAL_Delay>
      ms++;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3301      	adds	r3, #1
 800a898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fa10 	bl	800acc0 <USB_GetMode>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d005      	beq.n	800a8b2 <USB_SetCurrentMode+0x84>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b31      	cmp	r3, #49	; 0x31
 800a8aa:	d9f0      	bls.n	800a88e <USB_SetCurrentMode+0x60>
 800a8ac:	e001      	b.n	800a8b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e005      	b.n	800a8be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b32      	cmp	r3, #50	; 0x32
 800a8b6:	d101      	bne.n	800a8bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e000      	b.n	800a8be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b086      	sub	sp, #24
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	613b      	str	r3, [r7, #16]
 800a8e6:	e009      	b.n	800a8fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	3340      	adds	r3, #64	; 0x40
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	613b      	str	r3, [r7, #16]
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2b0e      	cmp	r3, #14
 800a900:	d9f2      	bls.n	800a8e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d11c      	bne.n	800a942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a916:	f043 0302 	orr.w	r3, r3, #2
 800a91a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	e005      	b.n	800a94e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a954:	461a      	mov	r2, r3
 800a956:	2300      	movs	r3, #0
 800a958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a960:	4619      	mov	r1, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a968:	461a      	mov	r2, r3
 800a96a:	680b      	ldr	r3, [r1, #0]
 800a96c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a970:	2b01      	cmp	r3, #1
 800a972:	d10c      	bne.n	800a98e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	2b00      	cmp	r3, #0
 800a978:	d104      	bne.n	800a984 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a97a:	2100      	movs	r1, #0
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f965 	bl	800ac4c <USB_SetDevSpeed>
 800a982:	e008      	b.n	800a996 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a984:	2101      	movs	r1, #1
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f960 	bl	800ac4c <USB_SetDevSpeed>
 800a98c:	e003      	b.n	800a996 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a98e:	2103      	movs	r1, #3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f95b 	bl	800ac4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a996:	2110      	movs	r1, #16
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f8f3 	bl	800ab84 <USB_FlushTxFifo>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f91f 	bl	800abec <USB_FlushRxFifo>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9be:	461a      	mov	r2, r3
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	2300      	movs	r3, #0
 800a9da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9dc:	2300      	movs	r3, #0
 800a9de:	613b      	str	r3, [r7, #16]
 800a9e0:	e043      	b.n	800aa6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9f8:	d118      	bne.n	800aa2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa12:	6013      	str	r3, [r2, #0]
 800aa14:	e013      	b.n	800aa3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa22:	461a      	mov	r2, r3
 800aa24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	e008      	b.n	800aa3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa38:	461a      	mov	r2, r3
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	015a      	lsls	r2, r3, #5
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	3301      	adds	r3, #1
 800aa68:	613b      	str	r3, [r7, #16]
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d3b7      	bcc.n	800a9e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	e043      	b.n	800ab00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa8e:	d118      	bne.n	800aac2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10a      	bne.n	800aaac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	e013      	b.n	800aad4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab8:	461a      	mov	r2, r3
 800aaba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	e008      	b.n	800aad4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aace:	461a      	mov	r2, r3
 800aad0:	2300      	movs	r3, #0
 800aad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae0:	461a      	mov	r2, r3
 800aae2:	2300      	movs	r3, #0
 800aae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	3301      	adds	r3, #1
 800aafe:	613b      	str	r3, [r7, #16]
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d3b7      	bcc.n	800aa78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d105      	bne.n	800ab3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	f043 0210 	orr.w	r2, r3, #16
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	699a      	ldr	r2, [r3, #24]
 800ab40:	4b0e      	ldr	r3, [pc, #56]	; (800ab7c <USB_DevInit+0x2b4>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d005      	beq.n	800ab5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	f043 0208 	orr.w	r2, r3, #8
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d105      	bne.n	800ab6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699a      	ldr	r2, [r3, #24]
 800ab64:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <USB_DevInit+0x2b8>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab78:	b004      	add	sp, #16
 800ab7a:	4770      	bx	lr
 800ab7c:	803c3800 	.word	0x803c3800
 800ab80:	40000004 	.word	0x40000004

0800ab84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4a13      	ldr	r2, [pc, #76]	; (800abe8 <USB_FlushTxFifo+0x64>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d901      	bls.n	800aba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e01b      	b.n	800abdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	daf2      	bge.n	800ab92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	019b      	lsls	r3, r3, #6
 800abb4:	f043 0220 	orr.w	r2, r3, #32
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3301      	adds	r3, #1
 800abc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	4a08      	ldr	r2, [pc, #32]	; (800abe8 <USB_FlushTxFifo+0x64>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d901      	bls.n	800abce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e006      	b.n	800abdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d0f0      	beq.n	800abbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	00030d40 	.word	0x00030d40

0800abec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3301      	adds	r3, #1
 800abfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4a11      	ldr	r2, [pc, #68]	; (800ac48 <USB_FlushRxFifo+0x5c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d901      	bls.n	800ac0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e018      	b.n	800ac3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	daf2      	bge.n	800abf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2210      	movs	r2, #16
 800ac1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <USB_FlushRxFifo+0x5c>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d901      	bls.n	800ac2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e006      	b.n	800ac3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	f003 0310 	and.w	r3, r3, #16
 800ac36:	2b10      	cmp	r3, #16
 800ac38:	d0f0      	beq.n	800ac1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	00030d40 	.word	0x00030d40

0800ac4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	68f9      	ldr	r1, [r7, #12]
 800ac68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac98:	f023 0303 	bic.w	r3, r3, #3
 800ac9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acac:	f043 0302 	orr.w	r3, r3, #2
 800acb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	f003 0301 	and.w	r3, r3, #1
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3301      	adds	r3, #1
 800acec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	4a13      	ldr	r2, [pc, #76]	; (800ad40 <USB_CoreReset+0x64>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d901      	bls.n	800acfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e01b      	b.n	800ad32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	daf2      	bge.n	800ace8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f043 0201 	orr.w	r2, r3, #1
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3301      	adds	r3, #1
 800ad16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <USB_CoreReset+0x64>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d901      	bls.n	800ad24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e006      	b.n	800ad32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d0f0      	beq.n	800ad12 <USB_CoreReset+0x36>

  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	00030d40 	.word	0x00030d40

0800ad44 <__errno>:
 800ad44:	4b01      	ldr	r3, [pc, #4]	; (800ad4c <__errno+0x8>)
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	24000014 	.word	0x24000014

0800ad50 <__libc_init_array>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	4d0d      	ldr	r5, [pc, #52]	; (800ad88 <__libc_init_array+0x38>)
 800ad54:	4c0d      	ldr	r4, [pc, #52]	; (800ad8c <__libc_init_array+0x3c>)
 800ad56:	1b64      	subs	r4, r4, r5
 800ad58:	10a4      	asrs	r4, r4, #2
 800ad5a:	2600      	movs	r6, #0
 800ad5c:	42a6      	cmp	r6, r4
 800ad5e:	d109      	bne.n	800ad74 <__libc_init_array+0x24>
 800ad60:	4d0b      	ldr	r5, [pc, #44]	; (800ad90 <__libc_init_array+0x40>)
 800ad62:	4c0c      	ldr	r4, [pc, #48]	; (800ad94 <__libc_init_array+0x44>)
 800ad64:	f000 fc8e 	bl	800b684 <_init>
 800ad68:	1b64      	subs	r4, r4, r5
 800ad6a:	10a4      	asrs	r4, r4, #2
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	42a6      	cmp	r6, r4
 800ad70:	d105      	bne.n	800ad7e <__libc_init_array+0x2e>
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
 800ad74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad78:	4798      	blx	r3
 800ad7a:	3601      	adds	r6, #1
 800ad7c:	e7ee      	b.n	800ad5c <__libc_init_array+0xc>
 800ad7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad82:	4798      	blx	r3
 800ad84:	3601      	adds	r6, #1
 800ad86:	e7f2      	b.n	800ad6e <__libc_init_array+0x1e>
 800ad88:	0800b888 	.word	0x0800b888
 800ad8c:	0800b888 	.word	0x0800b888
 800ad90:	0800b888 	.word	0x0800b888
 800ad94:	0800b88c 	.word	0x0800b88c

0800ad98 <memset>:
 800ad98:	4402      	add	r2, r0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d100      	bne.n	800ada2 <memset+0xa>
 800ada0:	4770      	bx	lr
 800ada2:	f803 1b01 	strb.w	r1, [r3], #1
 800ada6:	e7f9      	b.n	800ad9c <memset+0x4>

0800ada8 <siprintf>:
 800ada8:	b40e      	push	{r1, r2, r3}
 800adaa:	b500      	push	{lr}
 800adac:	b09c      	sub	sp, #112	; 0x70
 800adae:	ab1d      	add	r3, sp, #116	; 0x74
 800adb0:	9002      	str	r0, [sp, #8]
 800adb2:	9006      	str	r0, [sp, #24]
 800adb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800adb8:	4809      	ldr	r0, [pc, #36]	; (800ade0 <siprintf+0x38>)
 800adba:	9107      	str	r1, [sp, #28]
 800adbc:	9104      	str	r1, [sp, #16]
 800adbe:	4909      	ldr	r1, [pc, #36]	; (800ade4 <siprintf+0x3c>)
 800adc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc4:	9105      	str	r1, [sp, #20]
 800adc6:	6800      	ldr	r0, [r0, #0]
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	a902      	add	r1, sp, #8
 800adcc:	f000 f868 	bl	800aea0 <_svfiprintf_r>
 800add0:	9b02      	ldr	r3, [sp, #8]
 800add2:	2200      	movs	r2, #0
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	b01c      	add	sp, #112	; 0x70
 800add8:	f85d eb04 	ldr.w	lr, [sp], #4
 800addc:	b003      	add	sp, #12
 800adde:	4770      	bx	lr
 800ade0:	24000014 	.word	0x24000014
 800ade4:	ffff0208 	.word	0xffff0208

0800ade8 <__ssputs_r>:
 800ade8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adec:	688e      	ldr	r6, [r1, #8]
 800adee:	429e      	cmp	r6, r3
 800adf0:	4682      	mov	sl, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4690      	mov	r8, r2
 800adf6:	461f      	mov	r7, r3
 800adf8:	d838      	bhi.n	800ae6c <__ssputs_r+0x84>
 800adfa:	898a      	ldrh	r2, [r1, #12]
 800adfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae00:	d032      	beq.n	800ae68 <__ssputs_r+0x80>
 800ae02:	6825      	ldr	r5, [r4, #0]
 800ae04:	6909      	ldr	r1, [r1, #16]
 800ae06:	eba5 0901 	sub.w	r9, r5, r1
 800ae0a:	6965      	ldr	r5, [r4, #20]
 800ae0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae14:	3301      	adds	r3, #1
 800ae16:	444b      	add	r3, r9
 800ae18:	106d      	asrs	r5, r5, #1
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf38      	it	cc
 800ae1e:	461d      	movcc	r5, r3
 800ae20:	0553      	lsls	r3, r2, #21
 800ae22:	d531      	bpl.n	800ae88 <__ssputs_r+0xa0>
 800ae24:	4629      	mov	r1, r5
 800ae26:	f000 fb63 	bl	800b4f0 <_malloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b950      	cbnz	r0, 800ae44 <__ssputs_r+0x5c>
 800ae2e:	230c      	movs	r3, #12
 800ae30:	f8ca 3000 	str.w	r3, [sl]
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae44:	6921      	ldr	r1, [r4, #16]
 800ae46:	464a      	mov	r2, r9
 800ae48:	f000 fabe 	bl	800b3c8 <memcpy>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	6126      	str	r6, [r4, #16]
 800ae5a:	6165      	str	r5, [r4, #20]
 800ae5c:	444e      	add	r6, r9
 800ae5e:	eba5 0509 	sub.w	r5, r5, r9
 800ae62:	6026      	str	r6, [r4, #0]
 800ae64:	60a5      	str	r5, [r4, #8]
 800ae66:	463e      	mov	r6, r7
 800ae68:	42be      	cmp	r6, r7
 800ae6a:	d900      	bls.n	800ae6e <__ssputs_r+0x86>
 800ae6c:	463e      	mov	r6, r7
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	4632      	mov	r2, r6
 800ae72:	4641      	mov	r1, r8
 800ae74:	f000 fab6 	bl	800b3e4 <memmove>
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	1b9b      	subs	r3, r3, r6
 800ae7c:	60a3      	str	r3, [r4, #8]
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	4433      	add	r3, r6
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	2000      	movs	r0, #0
 800ae86:	e7db      	b.n	800ae40 <__ssputs_r+0x58>
 800ae88:	462a      	mov	r2, r5
 800ae8a:	f000 fba5 	bl	800b5d8 <_realloc_r>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d1e1      	bne.n	800ae58 <__ssputs_r+0x70>
 800ae94:	6921      	ldr	r1, [r4, #16]
 800ae96:	4650      	mov	r0, sl
 800ae98:	f000 fabe 	bl	800b418 <_free_r>
 800ae9c:	e7c7      	b.n	800ae2e <__ssputs_r+0x46>
	...

0800aea0 <_svfiprintf_r>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	4698      	mov	r8, r3
 800aea6:	898b      	ldrh	r3, [r1, #12]
 800aea8:	061b      	lsls	r3, r3, #24
 800aeaa:	b09d      	sub	sp, #116	; 0x74
 800aeac:	4607      	mov	r7, r0
 800aeae:	460d      	mov	r5, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	d50e      	bpl.n	800aed2 <_svfiprintf_r+0x32>
 800aeb4:	690b      	ldr	r3, [r1, #16]
 800aeb6:	b963      	cbnz	r3, 800aed2 <_svfiprintf_r+0x32>
 800aeb8:	2140      	movs	r1, #64	; 0x40
 800aeba:	f000 fb19 	bl	800b4f0 <_malloc_r>
 800aebe:	6028      	str	r0, [r5, #0]
 800aec0:	6128      	str	r0, [r5, #16]
 800aec2:	b920      	cbnz	r0, 800aece <_svfiprintf_r+0x2e>
 800aec4:	230c      	movs	r3, #12
 800aec6:	603b      	str	r3, [r7, #0]
 800aec8:	f04f 30ff 	mov.w	r0, #4294967295
 800aecc:	e0d1      	b.n	800b072 <_svfiprintf_r+0x1d2>
 800aece:	2340      	movs	r3, #64	; 0x40
 800aed0:	616b      	str	r3, [r5, #20]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	2320      	movs	r3, #32
 800aed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee0:	2330      	movs	r3, #48	; 0x30
 800aee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b08c <_svfiprintf_r+0x1ec>
 800aee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeea:	f04f 0901 	mov.w	r9, #1
 800aeee:	4623      	mov	r3, r4
 800aef0:	469a      	mov	sl, r3
 800aef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aef6:	b10a      	cbz	r2, 800aefc <_svfiprintf_r+0x5c>
 800aef8:	2a25      	cmp	r2, #37	; 0x25
 800aefa:	d1f9      	bne.n	800aef0 <_svfiprintf_r+0x50>
 800aefc:	ebba 0b04 	subs.w	fp, sl, r4
 800af00:	d00b      	beq.n	800af1a <_svfiprintf_r+0x7a>
 800af02:	465b      	mov	r3, fp
 800af04:	4622      	mov	r2, r4
 800af06:	4629      	mov	r1, r5
 800af08:	4638      	mov	r0, r7
 800af0a:	f7ff ff6d 	bl	800ade8 <__ssputs_r>
 800af0e:	3001      	adds	r0, #1
 800af10:	f000 80aa 	beq.w	800b068 <_svfiprintf_r+0x1c8>
 800af14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af16:	445a      	add	r2, fp
 800af18:	9209      	str	r2, [sp, #36]	; 0x24
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 80a2 	beq.w	800b068 <_svfiprintf_r+0x1c8>
 800af24:	2300      	movs	r3, #0
 800af26:	f04f 32ff 	mov.w	r2, #4294967295
 800af2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af2e:	f10a 0a01 	add.w	sl, sl, #1
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af3a:	931a      	str	r3, [sp, #104]	; 0x68
 800af3c:	4654      	mov	r4, sl
 800af3e:	2205      	movs	r2, #5
 800af40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af44:	4851      	ldr	r0, [pc, #324]	; (800b08c <_svfiprintf_r+0x1ec>)
 800af46:	f7f5 f9cb 	bl	80002e0 <memchr>
 800af4a:	9a04      	ldr	r2, [sp, #16]
 800af4c:	b9d8      	cbnz	r0, 800af86 <_svfiprintf_r+0xe6>
 800af4e:	06d0      	lsls	r0, r2, #27
 800af50:	bf44      	itt	mi
 800af52:	2320      	movmi	r3, #32
 800af54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af58:	0711      	lsls	r1, r2, #28
 800af5a:	bf44      	itt	mi
 800af5c:	232b      	movmi	r3, #43	; 0x2b
 800af5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af62:	f89a 3000 	ldrb.w	r3, [sl]
 800af66:	2b2a      	cmp	r3, #42	; 0x2a
 800af68:	d015      	beq.n	800af96 <_svfiprintf_r+0xf6>
 800af6a:	9a07      	ldr	r2, [sp, #28]
 800af6c:	4654      	mov	r4, sl
 800af6e:	2000      	movs	r0, #0
 800af70:	f04f 0c0a 	mov.w	ip, #10
 800af74:	4621      	mov	r1, r4
 800af76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af7a:	3b30      	subs	r3, #48	; 0x30
 800af7c:	2b09      	cmp	r3, #9
 800af7e:	d94e      	bls.n	800b01e <_svfiprintf_r+0x17e>
 800af80:	b1b0      	cbz	r0, 800afb0 <_svfiprintf_r+0x110>
 800af82:	9207      	str	r2, [sp, #28]
 800af84:	e014      	b.n	800afb0 <_svfiprintf_r+0x110>
 800af86:	eba0 0308 	sub.w	r3, r0, r8
 800af8a:	fa09 f303 	lsl.w	r3, r9, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	46a2      	mov	sl, r4
 800af94:	e7d2      	b.n	800af3c <_svfiprintf_r+0x9c>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d19      	adds	r1, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfbb      	ittet	lt
 800afa2:	425b      	neglt	r3, r3
 800afa4:	f042 0202 	orrlt.w	r2, r2, #2
 800afa8:	9307      	strge	r3, [sp, #28]
 800afaa:	9307      	strlt	r3, [sp, #28]
 800afac:	bfb8      	it	lt
 800afae:	9204      	strlt	r2, [sp, #16]
 800afb0:	7823      	ldrb	r3, [r4, #0]
 800afb2:	2b2e      	cmp	r3, #46	; 0x2e
 800afb4:	d10c      	bne.n	800afd0 <_svfiprintf_r+0x130>
 800afb6:	7863      	ldrb	r3, [r4, #1]
 800afb8:	2b2a      	cmp	r3, #42	; 0x2a
 800afba:	d135      	bne.n	800b028 <_svfiprintf_r+0x188>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	9203      	str	r2, [sp, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bfb8      	it	lt
 800afc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800afcc:	3402      	adds	r4, #2
 800afce:	9305      	str	r3, [sp, #20]
 800afd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b09c <_svfiprintf_r+0x1fc>
 800afd4:	7821      	ldrb	r1, [r4, #0]
 800afd6:	2203      	movs	r2, #3
 800afd8:	4650      	mov	r0, sl
 800afda:	f7f5 f981 	bl	80002e0 <memchr>
 800afde:	b140      	cbz	r0, 800aff2 <_svfiprintf_r+0x152>
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	eba0 000a 	sub.w	r0, r0, sl
 800afe6:	fa03 f000 	lsl.w	r0, r3, r0
 800afea:	9b04      	ldr	r3, [sp, #16]
 800afec:	4303      	orrs	r3, r0
 800afee:	3401      	adds	r4, #1
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff6:	4826      	ldr	r0, [pc, #152]	; (800b090 <_svfiprintf_r+0x1f0>)
 800aff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800affc:	2206      	movs	r2, #6
 800affe:	f7f5 f96f 	bl	80002e0 <memchr>
 800b002:	2800      	cmp	r0, #0
 800b004:	d038      	beq.n	800b078 <_svfiprintf_r+0x1d8>
 800b006:	4b23      	ldr	r3, [pc, #140]	; (800b094 <_svfiprintf_r+0x1f4>)
 800b008:	bb1b      	cbnz	r3, 800b052 <_svfiprintf_r+0x1b2>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	3307      	adds	r3, #7
 800b00e:	f023 0307 	bic.w	r3, r3, #7
 800b012:	3308      	adds	r3, #8
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b018:	4433      	add	r3, r6
 800b01a:	9309      	str	r3, [sp, #36]	; 0x24
 800b01c:	e767      	b.n	800aeee <_svfiprintf_r+0x4e>
 800b01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b022:	460c      	mov	r4, r1
 800b024:	2001      	movs	r0, #1
 800b026:	e7a5      	b.n	800af74 <_svfiprintf_r+0xd4>
 800b028:	2300      	movs	r3, #0
 800b02a:	3401      	adds	r4, #1
 800b02c:	9305      	str	r3, [sp, #20]
 800b02e:	4619      	mov	r1, r3
 800b030:	f04f 0c0a 	mov.w	ip, #10
 800b034:	4620      	mov	r0, r4
 800b036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b03a:	3a30      	subs	r2, #48	; 0x30
 800b03c:	2a09      	cmp	r2, #9
 800b03e:	d903      	bls.n	800b048 <_svfiprintf_r+0x1a8>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0c5      	beq.n	800afd0 <_svfiprintf_r+0x130>
 800b044:	9105      	str	r1, [sp, #20]
 800b046:	e7c3      	b.n	800afd0 <_svfiprintf_r+0x130>
 800b048:	fb0c 2101 	mla	r1, ip, r1, r2
 800b04c:	4604      	mov	r4, r0
 800b04e:	2301      	movs	r3, #1
 800b050:	e7f0      	b.n	800b034 <_svfiprintf_r+0x194>
 800b052:	ab03      	add	r3, sp, #12
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	462a      	mov	r2, r5
 800b058:	4b0f      	ldr	r3, [pc, #60]	; (800b098 <_svfiprintf_r+0x1f8>)
 800b05a:	a904      	add	r1, sp, #16
 800b05c:	4638      	mov	r0, r7
 800b05e:	f3af 8000 	nop.w
 800b062:	1c42      	adds	r2, r0, #1
 800b064:	4606      	mov	r6, r0
 800b066:	d1d6      	bne.n	800b016 <_svfiprintf_r+0x176>
 800b068:	89ab      	ldrh	r3, [r5, #12]
 800b06a:	065b      	lsls	r3, r3, #25
 800b06c:	f53f af2c 	bmi.w	800aec8 <_svfiprintf_r+0x28>
 800b070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b072:	b01d      	add	sp, #116	; 0x74
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	ab03      	add	r3, sp, #12
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	462a      	mov	r2, r5
 800b07e:	4b06      	ldr	r3, [pc, #24]	; (800b098 <_svfiprintf_r+0x1f8>)
 800b080:	a904      	add	r1, sp, #16
 800b082:	4638      	mov	r0, r7
 800b084:	f000 f87a 	bl	800b17c <_printf_i>
 800b088:	e7eb      	b.n	800b062 <_svfiprintf_r+0x1c2>
 800b08a:	bf00      	nop
 800b08c:	0800b84c 	.word	0x0800b84c
 800b090:	0800b856 	.word	0x0800b856
 800b094:	00000000 	.word	0x00000000
 800b098:	0800ade9 	.word	0x0800ade9
 800b09c:	0800b852 	.word	0x0800b852

0800b0a0 <_printf_common>:
 800b0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a4:	4616      	mov	r6, r2
 800b0a6:	4699      	mov	r9, r3
 800b0a8:	688a      	ldr	r2, [r1, #8]
 800b0aa:	690b      	ldr	r3, [r1, #16]
 800b0ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	bfb8      	it	lt
 800b0b4:	4613      	movlt	r3, r2
 800b0b6:	6033      	str	r3, [r6, #0]
 800b0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0bc:	4607      	mov	r7, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	b10a      	cbz	r2, 800b0c6 <_printf_common+0x26>
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	6033      	str	r3, [r6, #0]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	0699      	lsls	r1, r3, #26
 800b0ca:	bf42      	ittt	mi
 800b0cc:	6833      	ldrmi	r3, [r6, #0]
 800b0ce:	3302      	addmi	r3, #2
 800b0d0:	6033      	strmi	r3, [r6, #0]
 800b0d2:	6825      	ldr	r5, [r4, #0]
 800b0d4:	f015 0506 	ands.w	r5, r5, #6
 800b0d8:	d106      	bne.n	800b0e8 <_printf_common+0x48>
 800b0da:	f104 0a19 	add.w	sl, r4, #25
 800b0de:	68e3      	ldr	r3, [r4, #12]
 800b0e0:	6832      	ldr	r2, [r6, #0]
 800b0e2:	1a9b      	subs	r3, r3, r2
 800b0e4:	42ab      	cmp	r3, r5
 800b0e6:	dc26      	bgt.n	800b136 <_printf_common+0x96>
 800b0e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0ec:	1e13      	subs	r3, r2, #0
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	bf18      	it	ne
 800b0f2:	2301      	movne	r3, #1
 800b0f4:	0692      	lsls	r2, r2, #26
 800b0f6:	d42b      	bmi.n	800b150 <_printf_common+0xb0>
 800b0f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	4638      	mov	r0, r7
 800b100:	47c0      	blx	r8
 800b102:	3001      	adds	r0, #1
 800b104:	d01e      	beq.n	800b144 <_printf_common+0xa4>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	68e5      	ldr	r5, [r4, #12]
 800b10a:	6832      	ldr	r2, [r6, #0]
 800b10c:	f003 0306 	and.w	r3, r3, #6
 800b110:	2b04      	cmp	r3, #4
 800b112:	bf08      	it	eq
 800b114:	1aad      	subeq	r5, r5, r2
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	6922      	ldr	r2, [r4, #16]
 800b11a:	bf0c      	ite	eq
 800b11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b120:	2500      	movne	r5, #0
 800b122:	4293      	cmp	r3, r2
 800b124:	bfc4      	itt	gt
 800b126:	1a9b      	subgt	r3, r3, r2
 800b128:	18ed      	addgt	r5, r5, r3
 800b12a:	2600      	movs	r6, #0
 800b12c:	341a      	adds	r4, #26
 800b12e:	42b5      	cmp	r5, r6
 800b130:	d11a      	bne.n	800b168 <_printf_common+0xc8>
 800b132:	2000      	movs	r0, #0
 800b134:	e008      	b.n	800b148 <_printf_common+0xa8>
 800b136:	2301      	movs	r3, #1
 800b138:	4652      	mov	r2, sl
 800b13a:	4649      	mov	r1, r9
 800b13c:	4638      	mov	r0, r7
 800b13e:	47c0      	blx	r8
 800b140:	3001      	adds	r0, #1
 800b142:	d103      	bne.n	800b14c <_printf_common+0xac>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295
 800b148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14c:	3501      	adds	r5, #1
 800b14e:	e7c6      	b.n	800b0de <_printf_common+0x3e>
 800b150:	18e1      	adds	r1, r4, r3
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	2030      	movs	r0, #48	; 0x30
 800b156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b15a:	4422      	add	r2, r4
 800b15c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b164:	3302      	adds	r3, #2
 800b166:	e7c7      	b.n	800b0f8 <_printf_common+0x58>
 800b168:	2301      	movs	r3, #1
 800b16a:	4622      	mov	r2, r4
 800b16c:	4649      	mov	r1, r9
 800b16e:	4638      	mov	r0, r7
 800b170:	47c0      	blx	r8
 800b172:	3001      	adds	r0, #1
 800b174:	d0e6      	beq.n	800b144 <_printf_common+0xa4>
 800b176:	3601      	adds	r6, #1
 800b178:	e7d9      	b.n	800b12e <_printf_common+0x8e>
	...

0800b17c <_printf_i>:
 800b17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b180:	7e0f      	ldrb	r7, [r1, #24]
 800b182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b184:	2f78      	cmp	r7, #120	; 0x78
 800b186:	4691      	mov	r9, r2
 800b188:	4680      	mov	r8, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	469a      	mov	sl, r3
 800b18e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b192:	d807      	bhi.n	800b1a4 <_printf_i+0x28>
 800b194:	2f62      	cmp	r7, #98	; 0x62
 800b196:	d80a      	bhi.n	800b1ae <_printf_i+0x32>
 800b198:	2f00      	cmp	r7, #0
 800b19a:	f000 80d8 	beq.w	800b34e <_printf_i+0x1d2>
 800b19e:	2f58      	cmp	r7, #88	; 0x58
 800b1a0:	f000 80a3 	beq.w	800b2ea <_printf_i+0x16e>
 800b1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1ac:	e03a      	b.n	800b224 <_printf_i+0xa8>
 800b1ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1b2:	2b15      	cmp	r3, #21
 800b1b4:	d8f6      	bhi.n	800b1a4 <_printf_i+0x28>
 800b1b6:	a101      	add	r1, pc, #4	; (adr r1, 800b1bc <_printf_i+0x40>)
 800b1b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1bc:	0800b215 	.word	0x0800b215
 800b1c0:	0800b229 	.word	0x0800b229
 800b1c4:	0800b1a5 	.word	0x0800b1a5
 800b1c8:	0800b1a5 	.word	0x0800b1a5
 800b1cc:	0800b1a5 	.word	0x0800b1a5
 800b1d0:	0800b1a5 	.word	0x0800b1a5
 800b1d4:	0800b229 	.word	0x0800b229
 800b1d8:	0800b1a5 	.word	0x0800b1a5
 800b1dc:	0800b1a5 	.word	0x0800b1a5
 800b1e0:	0800b1a5 	.word	0x0800b1a5
 800b1e4:	0800b1a5 	.word	0x0800b1a5
 800b1e8:	0800b335 	.word	0x0800b335
 800b1ec:	0800b259 	.word	0x0800b259
 800b1f0:	0800b317 	.word	0x0800b317
 800b1f4:	0800b1a5 	.word	0x0800b1a5
 800b1f8:	0800b1a5 	.word	0x0800b1a5
 800b1fc:	0800b357 	.word	0x0800b357
 800b200:	0800b1a5 	.word	0x0800b1a5
 800b204:	0800b259 	.word	0x0800b259
 800b208:	0800b1a5 	.word	0x0800b1a5
 800b20c:	0800b1a5 	.word	0x0800b1a5
 800b210:	0800b31f 	.word	0x0800b31f
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	1d1a      	adds	r2, r3, #4
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	602a      	str	r2, [r5, #0]
 800b21c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b224:	2301      	movs	r3, #1
 800b226:	e0a3      	b.n	800b370 <_printf_i+0x1f4>
 800b228:	6820      	ldr	r0, [r4, #0]
 800b22a:	6829      	ldr	r1, [r5, #0]
 800b22c:	0606      	lsls	r6, r0, #24
 800b22e:	f101 0304 	add.w	r3, r1, #4
 800b232:	d50a      	bpl.n	800b24a <_printf_i+0xce>
 800b234:	680e      	ldr	r6, [r1, #0]
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	2e00      	cmp	r6, #0
 800b23a:	da03      	bge.n	800b244 <_printf_i+0xc8>
 800b23c:	232d      	movs	r3, #45	; 0x2d
 800b23e:	4276      	negs	r6, r6
 800b240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b244:	485e      	ldr	r0, [pc, #376]	; (800b3c0 <_printf_i+0x244>)
 800b246:	230a      	movs	r3, #10
 800b248:	e019      	b.n	800b27e <_printf_i+0x102>
 800b24a:	680e      	ldr	r6, [r1, #0]
 800b24c:	602b      	str	r3, [r5, #0]
 800b24e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b252:	bf18      	it	ne
 800b254:	b236      	sxthne	r6, r6
 800b256:	e7ef      	b.n	800b238 <_printf_i+0xbc>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	1d19      	adds	r1, r3, #4
 800b25e:	6029      	str	r1, [r5, #0]
 800b260:	0601      	lsls	r1, r0, #24
 800b262:	d501      	bpl.n	800b268 <_printf_i+0xec>
 800b264:	681e      	ldr	r6, [r3, #0]
 800b266:	e002      	b.n	800b26e <_printf_i+0xf2>
 800b268:	0646      	lsls	r6, r0, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0xe8>
 800b26c:	881e      	ldrh	r6, [r3, #0]
 800b26e:	4854      	ldr	r0, [pc, #336]	; (800b3c0 <_printf_i+0x244>)
 800b270:	2f6f      	cmp	r7, #111	; 0x6f
 800b272:	bf0c      	ite	eq
 800b274:	2308      	moveq	r3, #8
 800b276:	230a      	movne	r3, #10
 800b278:	2100      	movs	r1, #0
 800b27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b27e:	6865      	ldr	r5, [r4, #4]
 800b280:	60a5      	str	r5, [r4, #8]
 800b282:	2d00      	cmp	r5, #0
 800b284:	bfa2      	ittt	ge
 800b286:	6821      	ldrge	r1, [r4, #0]
 800b288:	f021 0104 	bicge.w	r1, r1, #4
 800b28c:	6021      	strge	r1, [r4, #0]
 800b28e:	b90e      	cbnz	r6, 800b294 <_printf_i+0x118>
 800b290:	2d00      	cmp	r5, #0
 800b292:	d04d      	beq.n	800b330 <_printf_i+0x1b4>
 800b294:	4615      	mov	r5, r2
 800b296:	fbb6 f1f3 	udiv	r1, r6, r3
 800b29a:	fb03 6711 	mls	r7, r3, r1, r6
 800b29e:	5dc7      	ldrb	r7, [r0, r7]
 800b2a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2a4:	4637      	mov	r7, r6
 800b2a6:	42bb      	cmp	r3, r7
 800b2a8:	460e      	mov	r6, r1
 800b2aa:	d9f4      	bls.n	800b296 <_printf_i+0x11a>
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d10b      	bne.n	800b2c8 <_printf_i+0x14c>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07de      	lsls	r6, r3, #31
 800b2b4:	d508      	bpl.n	800b2c8 <_printf_i+0x14c>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	6861      	ldr	r1, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	bfde      	ittt	le
 800b2be:	2330      	movle	r3, #48	; 0x30
 800b2c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2c8:	1b52      	subs	r2, r2, r5
 800b2ca:	6122      	str	r2, [r4, #16]
 800b2cc:	f8cd a000 	str.w	sl, [sp]
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	aa03      	add	r2, sp, #12
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f7ff fee2 	bl	800b0a0 <_printf_common>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d14c      	bne.n	800b37a <_printf_i+0x1fe>
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	b004      	add	sp, #16
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	4835      	ldr	r0, [pc, #212]	; (800b3c0 <_printf_i+0x244>)
 800b2ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2f0:	6829      	ldr	r1, [r5, #0]
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2f8:	6029      	str	r1, [r5, #0]
 800b2fa:	061d      	lsls	r5, r3, #24
 800b2fc:	d514      	bpl.n	800b328 <_printf_i+0x1ac>
 800b2fe:	07df      	lsls	r7, r3, #31
 800b300:	bf44      	itt	mi
 800b302:	f043 0320 	orrmi.w	r3, r3, #32
 800b306:	6023      	strmi	r3, [r4, #0]
 800b308:	b91e      	cbnz	r6, 800b312 <_printf_i+0x196>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f023 0320 	bic.w	r3, r3, #32
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	2310      	movs	r3, #16
 800b314:	e7b0      	b.n	800b278 <_printf_i+0xfc>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	f043 0320 	orr.w	r3, r3, #32
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	2378      	movs	r3, #120	; 0x78
 800b320:	4828      	ldr	r0, [pc, #160]	; (800b3c4 <_printf_i+0x248>)
 800b322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b326:	e7e3      	b.n	800b2f0 <_printf_i+0x174>
 800b328:	0659      	lsls	r1, r3, #25
 800b32a:	bf48      	it	mi
 800b32c:	b2b6      	uxthmi	r6, r6
 800b32e:	e7e6      	b.n	800b2fe <_printf_i+0x182>
 800b330:	4615      	mov	r5, r2
 800b332:	e7bb      	b.n	800b2ac <_printf_i+0x130>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	6826      	ldr	r6, [r4, #0]
 800b338:	6961      	ldr	r1, [r4, #20]
 800b33a:	1d18      	adds	r0, r3, #4
 800b33c:	6028      	str	r0, [r5, #0]
 800b33e:	0635      	lsls	r5, r6, #24
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	d501      	bpl.n	800b348 <_printf_i+0x1cc>
 800b344:	6019      	str	r1, [r3, #0]
 800b346:	e002      	b.n	800b34e <_printf_i+0x1d2>
 800b348:	0670      	lsls	r0, r6, #25
 800b34a:	d5fb      	bpl.n	800b344 <_printf_i+0x1c8>
 800b34c:	8019      	strh	r1, [r3, #0]
 800b34e:	2300      	movs	r3, #0
 800b350:	6123      	str	r3, [r4, #16]
 800b352:	4615      	mov	r5, r2
 800b354:	e7ba      	b.n	800b2cc <_printf_i+0x150>
 800b356:	682b      	ldr	r3, [r5, #0]
 800b358:	1d1a      	adds	r2, r3, #4
 800b35a:	602a      	str	r2, [r5, #0]
 800b35c:	681d      	ldr	r5, [r3, #0]
 800b35e:	6862      	ldr	r2, [r4, #4]
 800b360:	2100      	movs	r1, #0
 800b362:	4628      	mov	r0, r5
 800b364:	f7f4 ffbc 	bl	80002e0 <memchr>
 800b368:	b108      	cbz	r0, 800b36e <_printf_i+0x1f2>
 800b36a:	1b40      	subs	r0, r0, r5
 800b36c:	6060      	str	r0, [r4, #4]
 800b36e:	6863      	ldr	r3, [r4, #4]
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	2300      	movs	r3, #0
 800b374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b378:	e7a8      	b.n	800b2cc <_printf_i+0x150>
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	462a      	mov	r2, r5
 800b37e:	4649      	mov	r1, r9
 800b380:	4640      	mov	r0, r8
 800b382:	47d0      	blx	sl
 800b384:	3001      	adds	r0, #1
 800b386:	d0ab      	beq.n	800b2e0 <_printf_i+0x164>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	079b      	lsls	r3, r3, #30
 800b38c:	d413      	bmi.n	800b3b6 <_printf_i+0x23a>
 800b38e:	68e0      	ldr	r0, [r4, #12]
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	4298      	cmp	r0, r3
 800b394:	bfb8      	it	lt
 800b396:	4618      	movlt	r0, r3
 800b398:	e7a4      	b.n	800b2e4 <_printf_i+0x168>
 800b39a:	2301      	movs	r3, #1
 800b39c:	4632      	mov	r2, r6
 800b39e:	4649      	mov	r1, r9
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	47d0      	blx	sl
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d09b      	beq.n	800b2e0 <_printf_i+0x164>
 800b3a8:	3501      	adds	r5, #1
 800b3aa:	68e3      	ldr	r3, [r4, #12]
 800b3ac:	9903      	ldr	r1, [sp, #12]
 800b3ae:	1a5b      	subs	r3, r3, r1
 800b3b0:	42ab      	cmp	r3, r5
 800b3b2:	dcf2      	bgt.n	800b39a <_printf_i+0x21e>
 800b3b4:	e7eb      	b.n	800b38e <_printf_i+0x212>
 800b3b6:	2500      	movs	r5, #0
 800b3b8:	f104 0619 	add.w	r6, r4, #25
 800b3bc:	e7f5      	b.n	800b3aa <_printf_i+0x22e>
 800b3be:	bf00      	nop
 800b3c0:	0800b85d 	.word	0x0800b85d
 800b3c4:	0800b86e 	.word	0x0800b86e

0800b3c8 <memcpy>:
 800b3c8:	440a      	add	r2, r1
 800b3ca:	4291      	cmp	r1, r2
 800b3cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3d0:	d100      	bne.n	800b3d4 <memcpy+0xc>
 800b3d2:	4770      	bx	lr
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3de:	4291      	cmp	r1, r2
 800b3e0:	d1f9      	bne.n	800b3d6 <memcpy+0xe>
 800b3e2:	bd10      	pop	{r4, pc}

0800b3e4 <memmove>:
 800b3e4:	4288      	cmp	r0, r1
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	eb01 0402 	add.w	r4, r1, r2
 800b3ec:	d902      	bls.n	800b3f4 <memmove+0x10>
 800b3ee:	4284      	cmp	r4, r0
 800b3f0:	4623      	mov	r3, r4
 800b3f2:	d807      	bhi.n	800b404 <memmove+0x20>
 800b3f4:	1e43      	subs	r3, r0, #1
 800b3f6:	42a1      	cmp	r1, r4
 800b3f8:	d008      	beq.n	800b40c <memmove+0x28>
 800b3fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b402:	e7f8      	b.n	800b3f6 <memmove+0x12>
 800b404:	4402      	add	r2, r0
 800b406:	4601      	mov	r1, r0
 800b408:	428a      	cmp	r2, r1
 800b40a:	d100      	bne.n	800b40e <memmove+0x2a>
 800b40c:	bd10      	pop	{r4, pc}
 800b40e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b416:	e7f7      	b.n	800b408 <memmove+0x24>

0800b418 <_free_r>:
 800b418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b41a:	2900      	cmp	r1, #0
 800b41c:	d044      	beq.n	800b4a8 <_free_r+0x90>
 800b41e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b422:	9001      	str	r0, [sp, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f1a1 0404 	sub.w	r4, r1, #4
 800b42a:	bfb8      	it	lt
 800b42c:	18e4      	addlt	r4, r4, r3
 800b42e:	f000 f913 	bl	800b658 <__malloc_lock>
 800b432:	4a1e      	ldr	r2, [pc, #120]	; (800b4ac <_free_r+0x94>)
 800b434:	9801      	ldr	r0, [sp, #4]
 800b436:	6813      	ldr	r3, [r2, #0]
 800b438:	b933      	cbnz	r3, 800b448 <_free_r+0x30>
 800b43a:	6063      	str	r3, [r4, #4]
 800b43c:	6014      	str	r4, [r2, #0]
 800b43e:	b003      	add	sp, #12
 800b440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b444:	f000 b90e 	b.w	800b664 <__malloc_unlock>
 800b448:	42a3      	cmp	r3, r4
 800b44a:	d908      	bls.n	800b45e <_free_r+0x46>
 800b44c:	6825      	ldr	r5, [r4, #0]
 800b44e:	1961      	adds	r1, r4, r5
 800b450:	428b      	cmp	r3, r1
 800b452:	bf01      	itttt	eq
 800b454:	6819      	ldreq	r1, [r3, #0]
 800b456:	685b      	ldreq	r3, [r3, #4]
 800b458:	1949      	addeq	r1, r1, r5
 800b45a:	6021      	streq	r1, [r4, #0]
 800b45c:	e7ed      	b.n	800b43a <_free_r+0x22>
 800b45e:	461a      	mov	r2, r3
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	b10b      	cbz	r3, 800b468 <_free_r+0x50>
 800b464:	42a3      	cmp	r3, r4
 800b466:	d9fa      	bls.n	800b45e <_free_r+0x46>
 800b468:	6811      	ldr	r1, [r2, #0]
 800b46a:	1855      	adds	r5, r2, r1
 800b46c:	42a5      	cmp	r5, r4
 800b46e:	d10b      	bne.n	800b488 <_free_r+0x70>
 800b470:	6824      	ldr	r4, [r4, #0]
 800b472:	4421      	add	r1, r4
 800b474:	1854      	adds	r4, r2, r1
 800b476:	42a3      	cmp	r3, r4
 800b478:	6011      	str	r1, [r2, #0]
 800b47a:	d1e0      	bne.n	800b43e <_free_r+0x26>
 800b47c:	681c      	ldr	r4, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	6053      	str	r3, [r2, #4]
 800b482:	4421      	add	r1, r4
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	e7da      	b.n	800b43e <_free_r+0x26>
 800b488:	d902      	bls.n	800b490 <_free_r+0x78>
 800b48a:	230c      	movs	r3, #12
 800b48c:	6003      	str	r3, [r0, #0]
 800b48e:	e7d6      	b.n	800b43e <_free_r+0x26>
 800b490:	6825      	ldr	r5, [r4, #0]
 800b492:	1961      	adds	r1, r4, r5
 800b494:	428b      	cmp	r3, r1
 800b496:	bf04      	itt	eq
 800b498:	6819      	ldreq	r1, [r3, #0]
 800b49a:	685b      	ldreq	r3, [r3, #4]
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	bf04      	itt	eq
 800b4a0:	1949      	addeq	r1, r1, r5
 800b4a2:	6021      	streq	r1, [r4, #0]
 800b4a4:	6054      	str	r4, [r2, #4]
 800b4a6:	e7ca      	b.n	800b43e <_free_r+0x26>
 800b4a8:	b003      	add	sp, #12
 800b4aa:	bd30      	pop	{r4, r5, pc}
 800b4ac:	24000cd0 	.word	0x24000cd0

0800b4b0 <sbrk_aligned>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	4e0e      	ldr	r6, [pc, #56]	; (800b4ec <sbrk_aligned+0x3c>)
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	6831      	ldr	r1, [r6, #0]
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	b911      	cbnz	r1, 800b4c2 <sbrk_aligned+0x12>
 800b4bc:	f000 f8bc 	bl	800b638 <_sbrk_r>
 800b4c0:	6030      	str	r0, [r6, #0]
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f000 f8b7 	bl	800b638 <_sbrk_r>
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	d00a      	beq.n	800b4e4 <sbrk_aligned+0x34>
 800b4ce:	1cc4      	adds	r4, r0, #3
 800b4d0:	f024 0403 	bic.w	r4, r4, #3
 800b4d4:	42a0      	cmp	r0, r4
 800b4d6:	d007      	beq.n	800b4e8 <sbrk_aligned+0x38>
 800b4d8:	1a21      	subs	r1, r4, r0
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f000 f8ac 	bl	800b638 <_sbrk_r>
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d101      	bne.n	800b4e8 <sbrk_aligned+0x38>
 800b4e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}
 800b4ec:	24000cd4 	.word	0x24000cd4

0800b4f0 <_malloc_r>:
 800b4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f4:	1ccd      	adds	r5, r1, #3
 800b4f6:	f025 0503 	bic.w	r5, r5, #3
 800b4fa:	3508      	adds	r5, #8
 800b4fc:	2d0c      	cmp	r5, #12
 800b4fe:	bf38      	it	cc
 800b500:	250c      	movcc	r5, #12
 800b502:	2d00      	cmp	r5, #0
 800b504:	4607      	mov	r7, r0
 800b506:	db01      	blt.n	800b50c <_malloc_r+0x1c>
 800b508:	42a9      	cmp	r1, r5
 800b50a:	d905      	bls.n	800b518 <_malloc_r+0x28>
 800b50c:	230c      	movs	r3, #12
 800b50e:	603b      	str	r3, [r7, #0]
 800b510:	2600      	movs	r6, #0
 800b512:	4630      	mov	r0, r6
 800b514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b518:	4e2e      	ldr	r6, [pc, #184]	; (800b5d4 <_malloc_r+0xe4>)
 800b51a:	f000 f89d 	bl	800b658 <__malloc_lock>
 800b51e:	6833      	ldr	r3, [r6, #0]
 800b520:	461c      	mov	r4, r3
 800b522:	bb34      	cbnz	r4, 800b572 <_malloc_r+0x82>
 800b524:	4629      	mov	r1, r5
 800b526:	4638      	mov	r0, r7
 800b528:	f7ff ffc2 	bl	800b4b0 <sbrk_aligned>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	4604      	mov	r4, r0
 800b530:	d14d      	bne.n	800b5ce <_malloc_r+0xde>
 800b532:	6834      	ldr	r4, [r6, #0]
 800b534:	4626      	mov	r6, r4
 800b536:	2e00      	cmp	r6, #0
 800b538:	d140      	bne.n	800b5bc <_malloc_r+0xcc>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	4631      	mov	r1, r6
 800b53e:	4638      	mov	r0, r7
 800b540:	eb04 0803 	add.w	r8, r4, r3
 800b544:	f000 f878 	bl	800b638 <_sbrk_r>
 800b548:	4580      	cmp	r8, r0
 800b54a:	d13a      	bne.n	800b5c2 <_malloc_r+0xd2>
 800b54c:	6821      	ldr	r1, [r4, #0]
 800b54e:	3503      	adds	r5, #3
 800b550:	1a6d      	subs	r5, r5, r1
 800b552:	f025 0503 	bic.w	r5, r5, #3
 800b556:	3508      	adds	r5, #8
 800b558:	2d0c      	cmp	r5, #12
 800b55a:	bf38      	it	cc
 800b55c:	250c      	movcc	r5, #12
 800b55e:	4629      	mov	r1, r5
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff ffa5 	bl	800b4b0 <sbrk_aligned>
 800b566:	3001      	adds	r0, #1
 800b568:	d02b      	beq.n	800b5c2 <_malloc_r+0xd2>
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	442b      	add	r3, r5
 800b56e:	6023      	str	r3, [r4, #0]
 800b570:	e00e      	b.n	800b590 <_malloc_r+0xa0>
 800b572:	6822      	ldr	r2, [r4, #0]
 800b574:	1b52      	subs	r2, r2, r5
 800b576:	d41e      	bmi.n	800b5b6 <_malloc_r+0xc6>
 800b578:	2a0b      	cmp	r2, #11
 800b57a:	d916      	bls.n	800b5aa <_malloc_r+0xba>
 800b57c:	1961      	adds	r1, r4, r5
 800b57e:	42a3      	cmp	r3, r4
 800b580:	6025      	str	r5, [r4, #0]
 800b582:	bf18      	it	ne
 800b584:	6059      	strne	r1, [r3, #4]
 800b586:	6863      	ldr	r3, [r4, #4]
 800b588:	bf08      	it	eq
 800b58a:	6031      	streq	r1, [r6, #0]
 800b58c:	5162      	str	r2, [r4, r5]
 800b58e:	604b      	str	r3, [r1, #4]
 800b590:	4638      	mov	r0, r7
 800b592:	f104 060b 	add.w	r6, r4, #11
 800b596:	f000 f865 	bl	800b664 <__malloc_unlock>
 800b59a:	f026 0607 	bic.w	r6, r6, #7
 800b59e:	1d23      	adds	r3, r4, #4
 800b5a0:	1af2      	subs	r2, r6, r3
 800b5a2:	d0b6      	beq.n	800b512 <_malloc_r+0x22>
 800b5a4:	1b9b      	subs	r3, r3, r6
 800b5a6:	50a3      	str	r3, [r4, r2]
 800b5a8:	e7b3      	b.n	800b512 <_malloc_r+0x22>
 800b5aa:	6862      	ldr	r2, [r4, #4]
 800b5ac:	42a3      	cmp	r3, r4
 800b5ae:	bf0c      	ite	eq
 800b5b0:	6032      	streq	r2, [r6, #0]
 800b5b2:	605a      	strne	r2, [r3, #4]
 800b5b4:	e7ec      	b.n	800b590 <_malloc_r+0xa0>
 800b5b6:	4623      	mov	r3, r4
 800b5b8:	6864      	ldr	r4, [r4, #4]
 800b5ba:	e7b2      	b.n	800b522 <_malloc_r+0x32>
 800b5bc:	4634      	mov	r4, r6
 800b5be:	6876      	ldr	r6, [r6, #4]
 800b5c0:	e7b9      	b.n	800b536 <_malloc_r+0x46>
 800b5c2:	230c      	movs	r3, #12
 800b5c4:	603b      	str	r3, [r7, #0]
 800b5c6:	4638      	mov	r0, r7
 800b5c8:	f000 f84c 	bl	800b664 <__malloc_unlock>
 800b5cc:	e7a1      	b.n	800b512 <_malloc_r+0x22>
 800b5ce:	6025      	str	r5, [r4, #0]
 800b5d0:	e7de      	b.n	800b590 <_malloc_r+0xa0>
 800b5d2:	bf00      	nop
 800b5d4:	24000cd0 	.word	0x24000cd0

0800b5d8 <_realloc_r>:
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	4680      	mov	r8, r0
 800b5de:	4614      	mov	r4, r2
 800b5e0:	460e      	mov	r6, r1
 800b5e2:	b921      	cbnz	r1, 800b5ee <_realloc_r+0x16>
 800b5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	f7ff bf81 	b.w	800b4f0 <_malloc_r>
 800b5ee:	b92a      	cbnz	r2, 800b5fc <_realloc_r+0x24>
 800b5f0:	f7ff ff12 	bl	800b418 <_free_r>
 800b5f4:	4625      	mov	r5, r4
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	f000 f838 	bl	800b670 <_malloc_usable_size_r>
 800b600:	4284      	cmp	r4, r0
 800b602:	4607      	mov	r7, r0
 800b604:	d802      	bhi.n	800b60c <_realloc_r+0x34>
 800b606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b60a:	d812      	bhi.n	800b632 <_realloc_r+0x5a>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4640      	mov	r0, r8
 800b610:	f7ff ff6e 	bl	800b4f0 <_malloc_r>
 800b614:	4605      	mov	r5, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	d0ed      	beq.n	800b5f6 <_realloc_r+0x1e>
 800b61a:	42bc      	cmp	r4, r7
 800b61c:	4622      	mov	r2, r4
 800b61e:	4631      	mov	r1, r6
 800b620:	bf28      	it	cs
 800b622:	463a      	movcs	r2, r7
 800b624:	f7ff fed0 	bl	800b3c8 <memcpy>
 800b628:	4631      	mov	r1, r6
 800b62a:	4640      	mov	r0, r8
 800b62c:	f7ff fef4 	bl	800b418 <_free_r>
 800b630:	e7e1      	b.n	800b5f6 <_realloc_r+0x1e>
 800b632:	4635      	mov	r5, r6
 800b634:	e7df      	b.n	800b5f6 <_realloc_r+0x1e>
	...

0800b638 <_sbrk_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4d06      	ldr	r5, [pc, #24]	; (800b654 <_sbrk_r+0x1c>)
 800b63c:	2300      	movs	r3, #0
 800b63e:	4604      	mov	r4, r0
 800b640:	4608      	mov	r0, r1
 800b642:	602b      	str	r3, [r5, #0]
 800b644:	f7f6 fcda 	bl	8001ffc <_sbrk>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d102      	bne.n	800b652 <_sbrk_r+0x1a>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	b103      	cbz	r3, 800b652 <_sbrk_r+0x1a>
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	24000cd8 	.word	0x24000cd8

0800b658 <__malloc_lock>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__malloc_lock+0x8>)
 800b65a:	f000 b811 	b.w	800b680 <__retarget_lock_acquire_recursive>
 800b65e:	bf00      	nop
 800b660:	24000cdc 	.word	0x24000cdc

0800b664 <__malloc_unlock>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__malloc_unlock+0x8>)
 800b666:	f000 b80c 	b.w	800b682 <__retarget_lock_release_recursive>
 800b66a:	bf00      	nop
 800b66c:	24000cdc 	.word	0x24000cdc

0800b670 <_malloc_usable_size_r>:
 800b670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b674:	1f18      	subs	r0, r3, #4
 800b676:	2b00      	cmp	r3, #0
 800b678:	bfbc      	itt	lt
 800b67a:	580b      	ldrlt	r3, [r1, r0]
 800b67c:	18c0      	addlt	r0, r0, r3
 800b67e:	4770      	bx	lr

0800b680 <__retarget_lock_acquire_recursive>:
 800b680:	4770      	bx	lr

0800b682 <__retarget_lock_release_recursive>:
 800b682:	4770      	bx	lr

0800b684 <_init>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	bf00      	nop
 800b688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68a:	bc08      	pop	{r3}
 800b68c:	469e      	mov	lr, r3
 800b68e:	4770      	bx	lr

0800b690 <_fini>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	bf00      	nop
 800b694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b696:	bc08      	pop	{r3}
 800b698:	469e      	mov	lr, r3
 800b69a:	4770      	bx	lr
